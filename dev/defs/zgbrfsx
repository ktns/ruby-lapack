--- 
:name: zgbrfsx
:md5sum: c8d8f3dcda58c3e51f64c2c62e669a25
:category: :subroutine
:arguments: 
- trans: 
    :type: char
    :intent: input
- equed: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- kl: 
    :type: integer
    :intent: input
- ku: 
    :type: integer
    :intent: input
- nrhs: 
    :type: integer
    :intent: input
- ab: 
    :type: doublereal
    :intent: input
    :dims: 
    - ldab
    - n
- ldab: 
    :type: integer
    :intent: input
- afb: 
    :type: doublereal
    :intent: input
    :dims: 
    - ldafb
    - n
- ldafb: 
    :type: integer
    :intent: input
- ipiv: 
    :type: integer
    :intent: input
    :dims: 
    - n
- r: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - n
- c: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - n
- b: 
    :type: doublereal
    :intent: input
    :dims: 
    - ldb
    - nrhs
- ldb: 
    :type: integer
    :intent: input
- x: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - ldx
    - nrhs
- ldx: 
    :type: integer
    :intent: input
- rcond: 
    :type: doublereal
    :intent: output
- berr: 
    :type: doublereal
    :intent: output
    :dims: 
    - nrhs
- n_err_bnds: 
    :type: integer
    :intent: input
- err_bnds_norm: 
    :type: doublereal
    :intent: output
    :dims: 
    - nrhs
    - n_err_bnds
- err_bnds_comp: 
    :type: doublereal
    :intent: output
    :dims: 
    - nrhs
    - n_err_bnds
- nparams: 
    :type: integer
    :intent: input
- params: 
    :type: doublereal
    :intent: input/output
    :dims: []

- work: 
    :type: doublecomplex
    :intent: workspace
    :dims: 
    - 2*n
- rwork: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - 2*n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZGBRFSX( TRANS, EQUED, N, KL, KU, NRHS, AB, LDAB, AFB, LDAFB, IPIV, R, C, B, LDB, X, LDX, RCOND, BERR, N_ERR_BNDS, ERR_BNDS_NORM, ERR_BNDS_COMP, NPARAMS, PARAMS, WORK, RWORK, INFO )\n\n\
  *     Purpose\n\
  *     =======\n\
  *\n\
  *     ZGBRFSX improves the computed solution to a system of linear\n\
  *     equations and provides error bounds and backward error estimates\n\
  *     for the solution.  In addition to normwise error bound, the code\n\
  *     provides maximum componentwise error bound if possible.  See\n\
  *     comments for ERR_BNDS_NORM and ERR_BNDS_COMP for details of the\n\
  *     error bounds.\n\
  *\n\
  *     The original system of linear equations may have been equilibrated\n\
  *     before calling this routine, as described by arguments EQUED, R\n\
  *     and C below. In this case, the solution and error bounds returned\n\
  *     are for the original unequilibrated system.\n\
  *\n\n\
  *     Arguments\n\
  *     =========\n\
  *\n\
  *     Some optional parameters are bundled in the PARAMS array.  These\n\
  *     settings determine how refinement is performed, but often the\n\
  *     defaults are acceptable.  If the defaults are acceptable, users\n\
  *     can pass NPARAMS = 0 which prevents the source code from accessing\n\
  *     the PARAMS argument.\n\
  *\n\
  *     TRANS   (input) CHARACTER*1\n\
  *     Specifies the form of the system of equations:\n\
  *       = 'N':  A * X = B     (No transpose)\n\
  *       = 'T':  A**T * X = B  (Transpose)\n\
  *       = 'C':  A**H * X = B  (Conjugate transpose = Transpose)\n\
  *\n\
  *     EQUED   (input) CHARACTER*1\n\
  *     Specifies the form of equilibration that was done to A\n\
  *     before calling this routine. This is needed to compute\n\
  *     the solution and error bounds correctly.\n\
  *       = 'N':  No equilibration\n\
  *       = 'R':  Row equilibration, i.e., A has been premultiplied by\n\
  *               diag(R).\n\
  *       = 'C':  Column equilibration, i.e., A has been postmultiplied\n\
  *               by diag(C).\n\
  *       = 'B':  Both row and column equilibration, i.e., A has been\n\
  *               replaced by diag(R) * A * diag(C).\n\
  *               The right hand side B has been changed accordingly.\n\
  *\n\
  *     N       (input) INTEGER\n\
  *     The order of the matrix A.  N >= 0.\n\
  *\n\
  *     KL      (input) INTEGER\n\
  *     The number of subdiagonals within the band of A.  KL >= 0.\n\
  *\n\
  *     KU      (input) INTEGER\n\
  *     The number of superdiagonals within the band of A.  KU >= 0.\n\
  *\n\
  *     NRHS    (input) INTEGER\n\
  *     The number of right hand sides, i.e., the number of columns\n\
  *     of the matrices B and X.  NRHS >= 0.\n\
  *\n\
  *     AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n\
  *     The original band matrix A, stored in rows 1 to KL+KU+1.\n\
  *     The j-th column of A is stored in the j-th column of the\n\
  *     array AB as follows:\n\
  *     AB(ku+1+i-j,j) = A(i,j) for max(1,j-ku)<=i<=min(n,j+kl).\n\
  *\n\
  *     LDAB    (input) INTEGER\n\
  *     The leading dimension of the array AB.  LDAB >= KL+KU+1.\n\
  *\n\
  *     AFB     (input) DOUBLE PRECISION array, dimension (LDAFB,N)\n\
  *     Details of the LU factorization of the band matrix A, as\n\
  *     computed by DGBTRF.  U is stored as an upper triangular band\n\
  *     matrix with KL+KU superdiagonals in rows 1 to KL+KU+1, and\n\
  *     the multipliers used during the factorization are stored in\n\
  *     rows KL+KU+2 to 2*KL+KU+1.\n\
  *\n\
  *     LDAFB   (input) INTEGER\n\
  *     The leading dimension of the array AFB.  LDAFB >= 2*KL*KU+1.\n\
  *\n\
  *     IPIV    (input) INTEGER array, dimension (N)\n\
  *     The pivot indices from DGETRF; for 1<=i<=N, row i of the\n\
  *     matrix was interchanged with row IPIV(i).\n\
  *\n\
  *     R       (input or output) DOUBLE PRECISION array, dimension (N)\n\
  *     The row scale factors for A.  If EQUED = 'R' or 'B', A is\n\
  *     multiplied on the left by diag(R); if EQUED = 'N' or 'C', R\n\
  *     is not accessed.  R is an input argument if FACT = 'F';\n\
  *     otherwise, R is an output argument.  If FACT = 'F' and\n\
  *     EQUED = 'R' or 'B', each element of R must be positive.\n\
  *     If R is output, each element of R is a power of the radix.\n\
  *     If R is input, each element of R should be a power of the radix\n\
  *     to ensure a reliable solution and error estimates. Scaling by\n\
  *     powers of the radix does not cause rounding errors unless the\n\
  *     result underflows or overflows. Rounding errors during scaling\n\
  *     lead to refining with a matrix that is not equivalent to the\n\
  *     input matrix, producing error estimates that may not be\n\
  *     reliable.\n\
  *\n\
  *     C       (input or output) DOUBLE PRECISION array, dimension (N)\n\
  *     The column scale factors for A.  If EQUED = 'C' or 'B', A is\n\
  *     multiplied on the right by diag(C); if EQUED = 'N' or 'R', C\n\
  *     is not accessed.  C is an input argument if FACT = 'F';\n\
  *     otherwise, C is an output argument.  If FACT = 'F' and\n\
  *     EQUED = 'C' or 'B', each element of C must be positive.\n\
  *     If C is output, each element of C is a power of the radix.\n\
  *     If C is input, each element of C should be a power of the radix\n\
  *     to ensure a reliable solution and error estimates. Scaling by\n\
  *     powers of the radix does not cause rounding errors unless the\n\
  *     result underflows or overflows. Rounding errors during scaling\n\
  *     lead to refining with a matrix that is not equivalent to the\n\
  *     input matrix, producing error estimates that may not be\n\
  *     reliable.\n\
  *\n\
  *     B       (input) DOUBLE PRECISION array, dimension (LDB,NRHS)\n\
  *     The right hand side matrix B.\n\
  *\n\
  *     LDB     (input) INTEGER\n\
  *     The leading dimension of the array B.  LDB >= max(1,N).\n\
  *\n\
  *     X       (input/output) DOUBLE PRECISION array, dimension (LDX,NRHS)\n\
  *     On entry, the solution matrix X, as computed by DGETRS.\n\
  *     On exit, the improved solution matrix X.\n\
  *\n\
  *     LDX     (input) INTEGER\n\
  *     The leading dimension of the array X.  LDX >= max(1,N).\n\
  *\n\
  *     RCOND   (output) DOUBLE PRECISION\n\
  *     Reciprocal scaled condition number.  This is an estimate of the\n\
  *     reciprocal Skeel condition number of the matrix A after\n\
  *     equilibration (if done).  If this is less than the machine\n\
  *     precision (in particular, if it is zero), the matrix is singular\n\
  *     to working precision.  Note that the error may still be small even\n\
  *     if this number is very small and the matrix appears ill-\n\
  *     conditioned.\n\
  *\n\
  *     BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n\
  *     Componentwise relative backward error.  This is the\n\
  *     componentwise relative backward error of each solution vector X(j)\n\
  *     (i.e., the smallest relative change in any element of A or B that\n\
  *     makes X(j) an exact solution).\n\
  *\n\
  *     N_ERR_BNDS (input) INTEGER\n\
  *     Number of error bounds to return for each right hand side\n\
  *     and each type (normwise or componentwise).  See ERR_BNDS_NORM and\n\
  *     ERR_BNDS_COMP below.\n\
  *\n\
  *     ERR_BNDS_NORM  (output) DOUBLE PRECISION array, dimension (NRHS, N_ERR_BNDS)\n\
  *     For each right-hand side, this array contains information about\n\
  *     various error bounds and condition numbers corresponding to the\n\
  *     normwise relative error, which is defined as follows:\n\
  *\n\
  *     Normwise relative error in the ith solution vector:\n\
  *             max_j (abs(XTRUE(j,i) - X(j,i)))\n\
  *            ------------------------------\n\
  *                  max_j abs(X(j,i))\n\
  *\n\
  *     The array is indexed by the type of error information as described\n\
  *     below. There currently are up to three pieces of information\n\
  *     returned.\n\
  *\n\
  *     The first index in ERR_BNDS_NORM(i,:) corresponds to the ith\n\
  *     right-hand side.\n\
  *\n\
  *     The second index in ERR_BNDS_NORM(:,err) contains the following\n\
  *     three fields:\n\
  *     err = 1 \"Trust/don't trust\" boolean. Trust the answer if the\n\
  *              reciprocal condition number is less than the threshold\n\
  *              sqrt(n) * dlamch('Epsilon').\n\
  *\n\
  *     err = 2 \"Guaranteed\" error bound: The estimated forward error,\n\
  *              almost certainly within a factor of 10 of the true error\n\
  *              so long as the next entry is greater than the threshold\n\
  *              sqrt(n) * dlamch('Epsilon'). This error bound should only\n\
  *              be trusted if the previous boolean is true.\n\
  *\n\
  *     err = 3  Reciprocal condition number: Estimated normwise\n\
  *              reciprocal condition number.  Compared with the threshold\n\
  *              sqrt(n) * dlamch('Epsilon') to determine if the error\n\
  *              estimate is \"guaranteed\". These reciprocal condition\n\
  *              numbers are 1 / (norm(Z^{-1},inf) * norm(Z,inf)) for some\n\
  *              appropriately scaled matrix Z.\n\
  *              Let Z = S*A, where S scales each row by a power of the\n\
  *              radix so all absolute row sums of Z are approximately 1.\n\
  *\n\
  *     See Lapack Working Note 165 for further details and extra\n\
  *     cautions.\n\
  *\n\
  *     ERR_BNDS_COMP  (output) DOUBLE PRECISION array, dimension (NRHS, N_ERR_BNDS)\n\
  *     For each right-hand side, this array contains information about\n\
  *     various error bounds and condition numbers corresponding to the\n\
  *     componentwise relative error, which is defined as follows:\n\
  *\n\
  *     Componentwise relative error in the ith solution vector:\n\
  *                    abs(XTRUE(j,i) - X(j,i))\n\
  *             max_j ----------------------\n\
  *                         abs(X(j,i))\n\
  *\n\
  *     The array is indexed by the right-hand side i (on which the\n\
  *     componentwise relative error depends), and the type of error\n\
  *     information as described below. There currently are up to three\n\
  *     pieces of information returned for each right-hand side. If\n\
  *     componentwise accuracy is not requested (PARAMS(3) = 0.0), then\n\
  *     ERR_BNDS_COMP is not accessed.  If N_ERR_BNDS .LT. 3, then at most\n\
  *     the first (:,N_ERR_BNDS) entries are returned.\n\
  *\n\
  *     The first index in ERR_BNDS_COMP(i,:) corresponds to the ith\n\
  *     right-hand side.\n\
  *\n\
  *     The second index in ERR_BNDS_COMP(:,err) contains the following\n\
  *     three fields:\n\
  *     err = 1 \"Trust/don't trust\" boolean. Trust the answer if the\n\
  *              reciprocal condition number is less than the threshold\n\
  *              sqrt(n) * dlamch('Epsilon').\n\
  *\n\
  *     err = 2 \"Guaranteed\" error bound: The estimated forward error,\n\
  *              almost certainly within a factor of 10 of the true error\n\
  *              so long as the next entry is greater than the threshold\n\
  *              sqrt(n) * dlamch('Epsilon'). This error bound should only\n\
  *              be trusted if the previous boolean is true.\n\
  *\n\
  *     err = 3  Reciprocal condition number: Estimated componentwise\n\
  *              reciprocal condition number.  Compared with the threshold\n\
  *              sqrt(n) * dlamch('Epsilon') to determine if the error\n\
  *              estimate is \"guaranteed\". These reciprocal condition\n\
  *              numbers are 1 / (norm(Z^{-1},inf) * norm(Z,inf)) for some\n\
  *              appropriately scaled matrix Z.\n\
  *              Let Z = S*(A*diag(x)), where x is the solution for the\n\
  *              current right-hand side and S scales each row of\n\
  *              A*diag(x) by a power of the radix so all absolute row\n\
  *              sums of Z are approximately 1.\n\
  *\n\
  *     See Lapack Working Note 165 for further details and extra\n\
  *     cautions.\n\
  *\n\
  *     NPARAMS (input) INTEGER\n\
  *     Specifies the number of parameters set in PARAMS.  If .LE. 0, the\n\
  *     PARAMS array is never referenced and default values are used.\n\
  *\n\
  *     PARAMS  (input / output) DOUBLE PRECISION array, dimension NPARAMS\n\
  *     Specifies algorithm parameters.  If an entry is .LT. 0.0, then\n\
  *     that entry will be filled with default value used for that\n\
  *     parameter.  Only positions up to NPARAMS are accessed; defaults\n\
  *     are used for higher-numbered parameters.\n\
  *\n\
  *       PARAMS(LA_LINRX_ITREF_I = 1) : Whether to perform iterative\n\
  *            refinement or not.\n\
  *         Default: 1.0D+0\n\
  *            = 0.0 : No refinement is performed, and no error bounds are\n\
  *                    computed.\n\
  *            = 1.0 : Use the double-precision refinement algorithm,\n\
  *                    possibly with doubled-single computations if the\n\
  *                    compilation environment does not support DOUBLE\n\
  *                    PRECISION.\n\
  *              (other values are reserved for future use)\n\
  *\n\
  *       PARAMS(LA_LINRX_ITHRESH_I = 2) : Maximum number of residual\n\
  *            computations allowed for refinement.\n\
  *         Default: 10\n\
  *         Aggressive: Set to 100 to permit convergence using approximate\n\
  *                     factorizations or factorizations other than LU. If\n\
  *                     the factorization uses a technique other than\n\
  *                     Gaussian elimination, the guarantees in\n\
  *                     err_bnds_norm and err_bnds_comp may no longer be\n\
  *                     trustworthy.\n\
  *\n\
  *       PARAMS(LA_LINRX_CWISE_I = 3) : Flag determining if the code\n\
  *            will attempt to find a solution with small componentwise\n\
  *            relative error in the double-precision algorithm.  Positive\n\
  *            is true, 0.0 is false.\n\
  *         Default: 1.0 (attempt componentwise convergence)\n\
  *\n\
  *     WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n\
  *\n\
  *     RWORK   (workspace) DOUBLE PRECISION array, dimension (2*N)\n\
  *\n\
  *     INFO    (output) INTEGER\n\
  *       = 0:  Successful exit. The solution to every right-hand side is\n\
  *         guaranteed.\n\
  *       < 0:  If INFO = -i, the i-th argument had an illegal value\n\
  *       > 0 and <= N:  U(INFO,INFO) is exactly zero.  The factorization\n\
  *         has been completed, but the factor U is exactly singular, so\n\
  *         the solution and error bounds could not be computed. RCOND = 0\n\
  *         is returned.\n\
  *       = N+J: The solution corresponding to the Jth right-hand side is\n\
  *         not guaranteed. The solutions corresponding to other right-\n\
  *         hand sides K with K > J may not be guaranteed as well, but\n\
  *         only the first such right-hand side is reported. If a small\n\
  *         componentwise error is not requested (PARAMS(3) = 0.0) then\n\
  *         the Jth right-hand side is the first with a normwise error\n\
  *         bound that is not guaranteed (the smallest J such\n\
  *         that ERR_BNDS_NORM(J,1) = 0.0). By default (PARAMS(3) = 1.0)\n\
  *         the Jth right-hand side is the first with either a normwise or\n\
  *         componentwise error bound that is not guaranteed (the smallest\n\
  *         J such that either ERR_BNDS_NORM(J,1) = 0.0 or\n\
  *         ERR_BNDS_COMP(J,1) = 0.0). See the definition of\n\
  *         ERR_BNDS_NORM(:,1) and ERR_BNDS_COMP(:,1). To get information\n\
  *         about all of the right-hand sides check ERR_BNDS_NORM or\n\
  *         ERR_BNDS_COMP.\n\
  *\n\n\
  *     ==================================================================\n\
  *\n"
