--- 
:name: zgtrfs
:md5sum: 8d4d4d8d907eb8ca2c144546d27fcda8
:category: :subroutine
:arguments: 
- trans: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- nrhs: 
    :type: integer
    :intent: input
- dl: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - n-1
- d: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - n
- du: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - n-1
- dlf: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - n-1
- df: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - n
- duf: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - n-1
- du2: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - n-2
- ipiv: 
    :type: integer
    :intent: input
    :dims: 
    - n
- b: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - ldb
    - nrhs
- ldb: 
    :type: integer
    :intent: input
- x: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - ldx
    - nrhs
- ldx: 
    :type: integer
    :intent: input
- ferr: 
    :type: doublereal
    :intent: output
    :dims: 
    - nrhs
- berr: 
    :type: doublereal
    :intent: output
    :dims: 
    - nrhs
- work: 
    :type: doublecomplex
    :intent: workspace
    :dims: 
    - 2*n
- rwork: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZGTRFS( TRANS, N, NRHS, DL, D, DU, DLF, DF, DUF, DU2, IPIV, B, LDB, X, LDX, FERR, BERR, WORK, RWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZGTRFS improves the computed solution to a system of linear\n\
  *  equations when the coefficient matrix is tridiagonal, and provides\n\
  *  error bounds and backward error estimates for the solution.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  TRANS   (input) CHARACTER*1\n\
  *          Specifies the form of the system of equations:\n\
  *          = 'N':  A * X = B     (No transpose)\n\
  *          = 'T':  A**T * X = B  (Transpose)\n\
  *          = 'C':  A**H * X = B  (Conjugate transpose)\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  NRHS    (input) INTEGER\n\
  *          The number of right hand sides, i.e., the number of columns\n\
  *          of the matrix B.  NRHS >= 0.\n\
  *\n\
  *  DL      (input) COMPLEX*16 array, dimension (N-1)\n\
  *          The (n-1) subdiagonal elements of A.\n\
  *\n\
  *  D       (input) COMPLEX*16 array, dimension (N)\n\
  *          The diagonal elements of A.\n\
  *\n\
  *  DU      (input) COMPLEX*16 array, dimension (N-1)\n\
  *          The (n-1) superdiagonal elements of A.\n\
  *\n\
  *  DLF     (input) COMPLEX*16 array, dimension (N-1)\n\
  *          The (n-1) multipliers that define the matrix L from the\n\
  *          LU factorization of A as computed by ZGTTRF.\n\
  *\n\
  *  DF      (input) COMPLEX*16 array, dimension (N)\n\
  *          The n diagonal elements of the upper triangular matrix U from\n\
  *          the LU factorization of A.\n\
  *\n\
  *  DUF     (input) COMPLEX*16 array, dimension (N-1)\n\
  *          The (n-1) elements of the first superdiagonal of U.\n\
  *\n\
  *  DU2     (input) COMPLEX*16 array, dimension (N-2)\n\
  *          The (n-2) elements of the second superdiagonal of U.\n\
  *\n\
  *  IPIV    (input) INTEGER array, dimension (N)\n\
  *          The pivot indices; for 1 <= i <= n, row i of the matrix was\n\
  *          interchanged with row IPIV(i).  IPIV(i) will always be either\n\
  *          i or i+1; IPIV(i) = i indicates a row interchange was not\n\
  *          required.\n\
  *\n\
  *  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n\
  *          The right hand side matrix B.\n\
  *\n\
  *  LDB     (input) INTEGER\n\
  *          The leading dimension of the array B.  LDB >= max(1,N).\n\
  *\n\
  *  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n\
  *          On entry, the solution matrix X, as computed by ZGTTRS.\n\
  *          On exit, the improved solution matrix X.\n\
  *\n\
  *  LDX     (input) INTEGER\n\
  *          The leading dimension of the array X.  LDX >= max(1,N).\n\
  *\n\
  *  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n\
  *          The estimated forward error bound for each solution vector\n\
  *          X(j) (the j-th column of the solution matrix X).\n\
  *          If XTRUE is the true solution corresponding to X(j), FERR(j)\n\
  *          is an estimated upper bound for the magnitude of the largest\n\
  *          element in (X(j) - XTRUE) divided by the magnitude of the\n\
  *          largest element in X(j).  The estimate is as reliable as\n\
  *          the estimate for RCOND, and is almost always a slight\n\
  *          overestimate of the true error.\n\
  *\n\
  *  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n\
  *          The componentwise relative backward error of each solution\n\
  *          vector X(j) (i.e., the smallest relative change in\n\
  *          any element of A or B that makes X(j) an exact solution).\n\
  *\n\
  *  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n\
  *\n\
  *  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\
  *  Internal Parameters\n\
  *  ===================\n\
  *\n\
  *  ITMAX is the maximum number of steps of iterative refinement.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
