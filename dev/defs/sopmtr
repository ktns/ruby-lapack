--- 
:name: sopmtr
:md5sum: 4b67d05bda91d23c14cdd5edc2424ec8
:category: :subroutine
:arguments: 
- side: 
    :type: char
    :intent: input
- uplo: 
    :type: char
    :intent: input
- trans: 
    :type: char
    :intent: input
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- ap: 
    :type: real
    :intent: input
    :dims: 
    - m*(m+1)/2
- tau: 
    :type: real
    :intent: input
    :dims: 
    - m-1
- c: 
    :type: real
    :intent: input/output
    :dims: 
    - ldc
    - n
- ldc: 
    :type: integer
    :intent: input
- work: 
    :type: real
    :intent: workspace
    :dims: 
    - "lsame_(&side,\"L\") ? n : lsame_(&side,\"R\") ? m : 0"
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE SOPMTR( SIDE, UPLO, TRANS, M, N, AP, TAU, C, LDC, WORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  SOPMTR overwrites the general real M-by-N matrix C with\n\
  *\n\
  *                  SIDE = 'L'     SIDE = 'R'\n\
  *  TRANS = 'N':      Q * C          C * Q\n\
  *  TRANS = 'T':      Q**T * C       C * Q**T\n\
  *\n\
  *  where Q is a real orthogonal matrix of order nq, with nq = m if\n\
  *  SIDE = 'L' and nq = n if SIDE = 'R'. Q is defined as the product of\n\
  *  nq-1 elementary reflectors, as returned by SSPTRD using packed\n\
  *  storage:\n\
  *\n\
  *  if UPLO = 'U', Q = H(nq-1) . . . H(2) H(1);\n\
  *\n\
  *  if UPLO = 'L', Q = H(1) H(2) . . . H(nq-1).\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  SIDE    (input) CHARACTER*1\n\
  *          = 'L': apply Q or Q**T from the Left;\n\
  *          = 'R': apply Q or Q**T from the Right.\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U': Upper triangular packed storage used in previous\n\
  *                 call to SSPTRD;\n\
  *          = 'L': Lower triangular packed storage used in previous\n\
  *                 call to SSPTRD.\n\
  *\n\
  *  TRANS   (input) CHARACTER*1\n\
  *          = 'N':  No transpose, apply Q;\n\
  *          = 'T':  Transpose, apply Q**T.\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The number of rows of the matrix C. M >= 0.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of columns of the matrix C. N >= 0.\n\
  *\n\
  *  AP      (input) REAL array, dimension\n\
  *                               (M*(M+1)/2) if SIDE = 'L'\n\
  *                               (N*(N+1)/2) if SIDE = 'R'\n\
  *          The vectors which define the elementary reflectors, as\n\
  *          returned by SSPTRD.  AP is modified by the routine but\n\
  *          restored on exit.\n\
  *\n\
  *  TAU     (input) REAL array, dimension (M-1) if SIDE = 'L'\n\
  *                                     or (N-1) if SIDE = 'R'\n\
  *          TAU(i) must contain the scalar factor of the elementary\n\
  *          reflector H(i), as returned by SSPTRD.\n\
  *\n\
  *  C       (input/output) REAL array, dimension (LDC,N)\n\
  *          On entry, the M-by-N matrix C.\n\
  *          On exit, C is overwritten by Q*C or Q**T*C or C*Q**T or C*Q.\n\
  *\n\
  *  LDC     (input) INTEGER\n\
  *          The leading dimension of the array C. LDC >= max(1,M).\n\
  *\n\
  *  WORK    (workspace) REAL array, dimension\n\
  *                                   (N) if SIDE = 'L'\n\
  *                                   (M) if SIDE = 'R'\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
