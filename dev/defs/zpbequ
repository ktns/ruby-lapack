--- 
:name: zpbequ
:md5sum: 2a11d91c2d32ad2d3816f333fb440f5b
:category: :subroutine
:arguments: 
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- kd: 
    :type: integer
    :intent: input
- ab: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - ldab
    - n
- ldab: 
    :type: integer
    :intent: input
- s: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- scond: 
    :type: doublereal
    :intent: output
- amax: 
    :type: doublereal
    :intent: output
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZPBEQU( UPLO, N, KD, AB, LDAB, S, SCOND, AMAX, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZPBEQU computes row and column scalings intended to equilibrate a\n\
  *  Hermitian positive definite band matrix A and reduce its condition\n\
  *  number (with respect to the two-norm).  S contains the scale factors,\n\
  *  S(i) = 1/sqrt(A(i,i)), chosen so that the scaled matrix B with\n\
  *  elements B(i,j) = S(i)*A(i,j)*S(j) has ones on the diagonal.  This\n\
  *  choice of S puts the condition number of B within a factor N of the\n\
  *  smallest possible condition number over all possible diagonal\n\
  *  scalings.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangular of A is stored;\n\
  *          = 'L':  Lower triangular of A is stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  KD      (input) INTEGER\n\
  *          The number of superdiagonals of the matrix A if UPLO = 'U',\n\
  *          or the number of subdiagonals if UPLO = 'L'.  KD >= 0.\n\
  *\n\
  *  AB      (input) COMPLEX*16 array, dimension (LDAB,N)\n\
  *          The upper or lower triangle of the Hermitian band matrix A,\n\
  *          stored in the first KD+1 rows of the array.  The j-th column\n\
  *          of A is stored in the j-th column of the array AB as follows:\n\
  *          if UPLO = 'U', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n\
  *          if UPLO = 'L', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n\
  *\n\
  *  LDAB     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDAB >= KD+1.\n\
  *\n\
  *  S       (output) DOUBLE PRECISION array, dimension (N)\n\
  *          If INFO = 0, S contains the scale factors for A.\n\
  *\n\
  *  SCOND   (output) DOUBLE PRECISION\n\
  *          If INFO = 0, S contains the ratio of the smallest S(i) to\n\
  *          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n\
  *          large nor too small, it is not worth scaling by S.\n\
  *\n\
  *  AMAX    (output) DOUBLE PRECISION\n\
  *          Absolute value of largest matrix element.  If AMAX is very\n\
  *          close to overflow or very close to underflow, the matrix\n\
  *          should be scaled.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value.\n\
  *          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
