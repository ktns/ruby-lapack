--- 
:name: cgeesx
:md5sum: 239541f0bcff569087e91823b8128f20
:category: :subroutine
:arguments: 
- jobvs: 
    :type: char
    :intent: input
- sort: 
    :type: char
    :intent: input
- select: 
    :intent: external procedure
    :block_type: logical
    :block_arg_num: 1
    :block_arg_type: complex
- sense: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: complex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- sdim: 
    :type: integer
    :intent: output
- w: 
    :type: complex
    :intent: output
    :dims: 
    - n
- vs: 
    :type: complex
    :intent: output
    :dims: 
    - ldvs
    - n
- ldvs: 
    :type: integer
    :intent: input
- rconde: 
    :type: real
    :intent: output
- rcondv: 
    :type: real
    :intent: output
- work: 
    :type: complex
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "(lsame_(&sense,\"E\")||lsame_(&sense,\"V\")||lsame_(&sense,\"B\")) ? n*n/2 : 2*n"
- rwork: 
    :type: real
    :intent: workspace
    :dims: 
    - n
- bwork: 
    :type: logical
    :intent: workspace
    :dims: 
    - "lsame_(&sort,\"N\") ? 0 : n"
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldvs: "lsame_(&jobvs,\"V\") ? n : 1"
:fortran_help: "      SUBROUTINE CGEESX( JOBVS, SORT, SELECT, SENSE, N, A, LDA, SDIM, W, VS, LDVS, RCONDE, RCONDV, WORK, LWORK, RWORK, BWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  CGEESX computes for an N-by-N complex nonsymmetric matrix A, the\n\
  *  eigenvalues, the Schur form T, and, optionally, the matrix of Schur\n\
  *  vectors Z.  This gives the Schur factorization A = Z*T*(Z**H).\n\
  *\n\
  *  Optionally, it also orders the eigenvalues on the diagonal of the\n\
  *  Schur form so that selected eigenvalues are at the top left;\n\
  *  computes a reciprocal condition number for the average of the\n\
  *  selected eigenvalues (RCONDE); and computes a reciprocal condition\n\
  *  number for the right invariant subspace corresponding to the\n\
  *  selected eigenvalues (RCONDV).  The leading columns of Z form an\n\
  *  orthonormal basis for this invariant subspace.\n\
  *\n\
  *  For further explanation of the reciprocal condition numbers RCONDE\n\
  *  and RCONDV, see Section 4.10 of the LAPACK Users' Guide (where\n\
  *  these quantities are called s and sep respectively).\n\
  *\n\
  *  A complex matrix is in Schur form if it is upper triangular.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  JOBVS   (input) CHARACTER*1\n\
  *          = 'N': Schur vectors are not computed;\n\
  *          = 'V': Schur vectors are computed.\n\
  *\n\
  *  SORT    (input) CHARACTER*1\n\
  *          Specifies whether or not to order the eigenvalues on the\n\
  *          diagonal of the Schur form.\n\
  *          = 'N': Eigenvalues are not ordered;\n\
  *          = 'S': Eigenvalues are ordered (see SELECT).\n\
  *\n\
  *  SELECT  (external procedure) LOGICAL FUNCTION of one COMPLEX argument\n\
  *          SELECT must be declared EXTERNAL in the calling subroutine.\n\
  *          If SORT = 'S', SELECT is used to select eigenvalues to order\n\
  *          to the top left of the Schur form.\n\
  *          If SORT = 'N', SELECT is not referenced.\n\
  *          An eigenvalue W(j) is selected if SELECT(W(j)) is true.\n\
  *\n\
  *  SENSE   (input) CHARACTER*1\n\
  *          Determines which reciprocal condition numbers are computed.\n\
  *          = 'N': None are computed;\n\
  *          = 'E': Computed for average of selected eigenvalues only;\n\
  *          = 'V': Computed for selected right invariant subspace only;\n\
  *          = 'B': Computed for both.\n\
  *          If SENSE = 'E', 'V' or 'B', SORT must equal 'S'.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A. N >= 0.\n\
  *\n\
  *  A       (input/output) COMPLEX array, dimension (LDA, N)\n\
  *          On entry, the N-by-N matrix A.\n\
  *          On exit, A is overwritten by its Schur form T.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  SDIM    (output) INTEGER\n\
  *          If SORT = 'N', SDIM = 0.\n\
  *          If SORT = 'S', SDIM = number of eigenvalues for which\n\
  *                         SELECT is true.\n\
  *\n\
  *  W       (output) COMPLEX array, dimension (N)\n\
  *          W contains the computed eigenvalues, in the same order\n\
  *          that they appear on the diagonal of the output Schur form T.\n\
  *\n\
  *  VS      (output) COMPLEX array, dimension (LDVS,N)\n\
  *          If JOBVS = 'V', VS contains the unitary matrix Z of Schur\n\
  *          vectors.\n\
  *          If JOBVS = 'N', VS is not referenced.\n\
  *\n\
  *  LDVS    (input) INTEGER\n\
  *          The leading dimension of the array VS.  LDVS >= 1, and if\n\
  *          JOBVS = 'V', LDVS >= N.\n\
  *\n\
  *  RCONDE  (output) REAL\n\
  *          If SENSE = 'E' or 'B', RCONDE contains the reciprocal\n\
  *          condition number for the average of the selected eigenvalues.\n\
  *          Not referenced if SENSE = 'N' or 'V'.\n\
  *\n\
  *  RCONDV  (output) REAL\n\
  *          If SENSE = 'V' or 'B', RCONDV contains the reciprocal\n\
  *          condition number for the selected right invariant subspace.\n\
  *          Not referenced if SENSE = 'N' or 'E'.\n\
  *\n\
  *  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.  LWORK >= max(1,2*N).\n\
  *          Also, if SENSE = 'E' or 'V' or 'B', LWORK >= 2*SDIM*(N-SDIM),\n\
  *          where SDIM is the number of selected eigenvalues computed by\n\
  *          this routine.  Note that 2*SDIM*(N-SDIM) <= N*N/2. Note also\n\
  *          that an error is only returned if LWORK < max(1,2*N), but if\n\
  *          SENSE = 'E' or 'V' or 'B' this may not be large enough.\n\
  *          For good performance, LWORK must generally be larger.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates upper bound on the optimal size of the\n\
  *          array WORK, returns this value as the first entry of the WORK\n\
  *          array, and no error message related to LWORK is issued by\n\
  *          XERBLA.\n\
  *\n\
  *  RWORK   (workspace) REAL array, dimension (N)\n\
  *\n\
  *  BWORK   (workspace) LOGICAL array, dimension (N)\n\
  *          Not referenced if SORT = 'N'.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0: successful exit\n\
  *          < 0: if INFO = -i, the i-th argument had an illegal value.\n\
  *          > 0: if INFO = i, and i is\n\
  *             <= N: the QR algorithm failed to compute all the\n\
  *                   eigenvalues; elements 1:ILO-1 and i+1:N of W\n\
  *                   contain those eigenvalues which have converged; if\n\
  *                   JOBVS = 'V', VS contains the transformation which\n\
  *                   reduces A to its partially converged Schur form.\n\
  *             = N+1: the eigenvalues could not be reordered because some\n\
  *                   eigenvalues were too close to separate (the problem\n\
  *                   is very ill-conditioned);\n\
  *             = N+2: after reordering, roundoff changed values of some\n\
  *                   complex eigenvalues so that leading eigenvalues in\n\
  *                   the Schur form no longer satisfy SELECT=.TRUE.  This\n\
  *                   could also be caused by underflow due to scaling.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
