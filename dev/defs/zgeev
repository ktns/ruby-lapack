--- 
:name: zgeev
:md5sum: a2f45f145f9a86dc68d7611fb89512e0
:category: :subroutine
:arguments: 
- jobvl: 
    :type: char
    :intent: input
- jobvr: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- w: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - n
- vl: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - ldvl
    - n
- ldvl: 
    :type: integer
    :intent: input
- vr: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - ldvr
    - n
- ldvr: 
    :type: integer
    :intent: input
- work: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
- rwork: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - 2*n
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldvr: "lsame_(&jobvr,\"V\") ? n : 1"
  ldvl: "lsame_(&jobvl,\"V\") ? n : 1"
:fortran_help: "      SUBROUTINE ZGEEV( JOBVL, JOBVR, N, A, LDA, W, VL, LDVL, VR, LDVR, WORK, LWORK, RWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZGEEV computes for an N-by-N complex nonsymmetric matrix A, the\n\
  *  eigenvalues and, optionally, the left and/or right eigenvectors.\n\
  *\n\
  *  The right eigenvector v(j) of A satisfies\n\
  *                   A * v(j) = lambda(j) * v(j)\n\
  *  where lambda(j) is its eigenvalue.\n\
  *  The left eigenvector u(j) of A satisfies\n\
  *                u(j)**H * A = lambda(j) * u(j)**H\n\
  *  where u(j)**H denotes the conjugate transpose of u(j).\n\
  *\n\
  *  The computed eigenvectors are normalized to have Euclidean norm\n\
  *  equal to 1 and largest component real.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  JOBVL   (input) CHARACTER*1\n\
  *          = 'N': left eigenvectors of A are not computed;\n\
  *          = 'V': left eigenvectors of are computed.\n\
  *\n\
  *  JOBVR   (input) CHARACTER*1\n\
  *          = 'N': right eigenvectors of A are not computed;\n\
  *          = 'V': right eigenvectors of A are computed.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A. N >= 0.\n\
  *\n\
  *  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n\
  *          On entry, the N-by-N matrix A.\n\
  *          On exit, A has been overwritten.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  W       (output) COMPLEX*16 array, dimension (N)\n\
  *          W contains the computed eigenvalues.\n\
  *\n\
  *  VL      (output) COMPLEX*16 array, dimension (LDVL,N)\n\
  *          If JOBVL = 'V', the left eigenvectors u(j) are stored one\n\
  *          after another in the columns of VL, in the same order\n\
  *          as their eigenvalues.\n\
  *          If JOBVL = 'N', VL is not referenced.\n\
  *          u(j) = VL(:,j), the j-th column of VL.\n\
  *\n\
  *  LDVL    (input) INTEGER\n\
  *          The leading dimension of the array VL.  LDVL >= 1; if\n\
  *          JOBVL = 'V', LDVL >= N.\n\
  *\n\
  *  VR      (output) COMPLEX*16 array, dimension (LDVR,N)\n\
  *          If JOBVR = 'V', the right eigenvectors v(j) are stored one\n\
  *          after another in the columns of VR, in the same order\n\
  *          as their eigenvalues.\n\
  *          If JOBVR = 'N', VR is not referenced.\n\
  *          v(j) = VR(:,j), the j-th column of VR.\n\
  *\n\
  *  LDVR    (input) INTEGER\n\
  *          The leading dimension of the array VR.  LDVR >= 1; if\n\
  *          JOBVR = 'V', LDVR >= N.\n\
  *\n\
  *  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.  LWORK >= max(1,2*N).\n\
  *          For good performance, LWORK must generally be larger.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  RWORK   (workspace) DOUBLE PRECISION array, dimension (2*N)\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value.\n\
  *          > 0:  if INFO = i, the QR algorithm failed to compute all the\n\
  *                eigenvalues, and no eigenvectors have been computed;\n\
  *                elements and i+1:N of W contain eigenvalues which have\n\
  *                converged.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
