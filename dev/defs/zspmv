--- 
:name: zspmv
:md5sum: 99c666f5d7f41498747544b9d29ffc22
:category: :subroutine
:arguments: 
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- alpha: 
    :type: doublecomplex
    :intent: input
- ap: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - ( n*( n + 1 ) )/2
- x: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - 1 + ( n - 1 )*abs( incx )
- incx: 
    :type: integer
    :intent: input
- beta: 
    :type: doublecomplex
    :intent: input
- y: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - 1 + ( n - 1 )*abs( incy )
- incy: 
    :type: integer
    :intent: input
:substitutions: {}

:fortran_help: "      SUBROUTINE ZSPMV( UPLO, N, ALPHA, AP, X, INCX, BETA, Y, INCY )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZSPMV  performs the matrix-vector operation\n\
  *\n\
  *     y := alpha*A*x + beta*y,\n\
  *\n\
  *  where alpha and beta are scalars, x and y are n element vectors and\n\
  *  A is an n by n symmetric matrix, supplied in packed form.\n\
  *\n\n\
  *  Arguments\n\
  *  ==========\n\
  *\n\
  *  UPLO     (input) CHARACTER*1\n\
  *           On entry, UPLO specifies whether the upper or lower\n\
  *           triangular part of the matrix A is supplied in the packed\n\
  *           array AP as follows:\n\
  *\n\
  *              UPLO = 'U' or 'u'   The upper triangular part of A is\n\
  *                                  supplied in AP.\n\
  *\n\
  *              UPLO = 'L' or 'l'   The lower triangular part of A is\n\
  *                                  supplied in AP.\n\
  *\n\
  *           Unchanged on exit.\n\
  *\n\
  *  N        (input) INTEGER\n\
  *           On entry, N specifies the order of the matrix A.\n\
  *           N must be at least zero.\n\
  *           Unchanged on exit.\n\
  *\n\
  *  ALPHA    (input) COMPLEX*16\n\
  *           On entry, ALPHA specifies the scalar alpha.\n\
  *           Unchanged on exit.\n\
  *\n\
  *  AP       (input) COMPLEX*16 array, dimension at least\n\
  *           ( ( N*( N + 1 ) )/2 ).\n\
  *           Before entry, with UPLO = 'U' or 'u', the array AP must\n\
  *           contain the upper triangular part of the symmetric matrix\n\
  *           packed sequentially, column by column, so that AP( 1 )\n\
  *           contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 1, 2 )\n\
  *           and a( 2, 2 ) respectively, and so on.\n\
  *           Before entry, with UPLO = 'L' or 'l', the array AP must\n\
  *           contain the lower triangular part of the symmetric matrix\n\
  *           packed sequentially, column by column, so that AP( 1 )\n\
  *           contains a( 1, 1 ), AP( 2 ) and AP( 3 ) contain a( 2, 1 )\n\
  *           and a( 3, 1 ) respectively, and so on.\n\
  *           Unchanged on exit.\n\
  *\n\
  *  X        (input) COMPLEX*16 array, dimension at least\n\
  *           ( 1 + ( N - 1 )*abs( INCX ) ).\n\
  *           Before entry, the incremented array X must contain the N-\n\
  *           element vector x.\n\
  *           Unchanged on exit.\n\
  *\n\
  *  INCX     (input) INTEGER\n\
  *           On entry, INCX specifies the increment for the elements of\n\
  *           X. INCX must not be zero.\n\
  *           Unchanged on exit.\n\
  *\n\
  *  BETA     (input) COMPLEX*16\n\
  *           On entry, BETA specifies the scalar beta. When BETA is\n\
  *           supplied as zero then Y need not be set on input.\n\
  *           Unchanged on exit.\n\
  *\n\
  *  Y        (input/output) COMPLEX*16 array, dimension at least\n\
  *           ( 1 + ( N - 1 )*abs( INCY ) ).\n\
  *           Before entry, the incremented array Y must contain the n\n\
  *           element vector y. On exit, Y is overwritten by the updated\n\
  *           vector y.\n\
  *\n\
  *  INCY     (input) INTEGER\n\
  *           On entry, INCY specifies the increment for the elements of\n\
  *           Y. INCY must not be zero.\n\
  *           Unchanged on exit.\n\
  *\n\n\
  * =====================================================================\n\
  *\n"
