--- 
:name: chegv
:md5sum: 937cc653b6096de55edba381f27843d8
:category: :subroutine
:arguments: 
- itype: 
    :type: integer
    :intent: input
- jobz: 
    :type: char
    :intent: input
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: complex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- b: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldb
    - n
- ldb: 
    :type: integer
    :intent: input
- w: 
    :type: real
    :intent: output
    :dims: 
    - n
- work: 
    :type: complex
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
- rwork: 
    :type: real
    :intent: workspace
    :dims: 
    - MAX(1, 3*n-2)
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE CHEGV( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK, LWORK, RWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  CHEGV computes all the eigenvalues, and optionally, the eigenvectors\n\
  *  of a complex generalized Hermitian-definite eigenproblem, of the form\n\
  *  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.\n\
  *  Here A and B are assumed to be Hermitian and B is also\n\
  *  positive definite.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  ITYPE   (input) INTEGER\n\
  *          Specifies the problem type to be solved:\n\
  *          = 1:  A*x = (lambda)*B*x\n\
  *          = 2:  A*B*x = (lambda)*x\n\
  *          = 3:  B*A*x = (lambda)*x\n\
  *\n\
  *  JOBZ    (input) CHARACTER*1\n\
  *          = 'N':  Compute eigenvalues only;\n\
  *          = 'V':  Compute eigenvalues and eigenvectors.\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangles of A and B are stored;\n\
  *          = 'L':  Lower triangles of A and B are stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrices A and B.  N >= 0.\n\
  *\n\
  *  A       (input/output) COMPLEX array, dimension (LDA, N)\n\
  *          On entry, the Hermitian matrix A.  If UPLO = 'U', the\n\
  *          leading N-by-N upper triangular part of A contains the\n\
  *          upper triangular part of the matrix A.  If UPLO = 'L',\n\
  *          the leading N-by-N lower triangular part of A contains\n\
  *          the lower triangular part of the matrix A.\n\
  *\n\
  *          On exit, if JOBZ = 'V', then if INFO = 0, A contains the\n\
  *          matrix Z of eigenvectors.  The eigenvectors are normalized\n\
  *          as follows:\n\
  *          if ITYPE = 1 or 2, Z**H*B*Z = I;\n\
  *          if ITYPE = 3, Z**H*inv(B)*Z = I.\n\
  *          If JOBZ = 'N', then on exit the upper triangle (if UPLO='U')\n\
  *          or the lower triangle (if UPLO='L') of A, including the\n\
  *          diagonal, is destroyed.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  B       (input/output) COMPLEX array, dimension (LDB, N)\n\
  *          On entry, the Hermitian positive definite matrix B.\n\
  *          If UPLO = 'U', the leading N-by-N upper triangular part of B\n\
  *          contains the upper triangular part of the matrix B.\n\
  *          If UPLO = 'L', the leading N-by-N lower triangular part of B\n\
  *          contains the lower triangular part of the matrix B.\n\
  *\n\
  *          On exit, if INFO <= N, the part of B containing the matrix is\n\
  *          overwritten by the triangular factor U or L from the Cholesky\n\
  *          factorization B = U**H*U or B = L*L**H.\n\
  *\n\
  *  LDB     (input) INTEGER\n\
  *          The leading dimension of the array B.  LDB >= max(1,N).\n\
  *\n\
  *  W       (output) REAL array, dimension (N)\n\
  *          If INFO = 0, the eigenvalues in ascending order.\n\
  *\n\
  *  WORK    (workspace/output) COMPLEX array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The length of the array WORK.  LWORK >= max(1,2*N-1).\n\
  *          For optimal efficiency, LWORK >= (NB+1)*N,\n\
  *          where NB is the blocksize for CHETRD returned by ILAENV.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  RWORK   (workspace) REAL array, dimension (max(1, 3*N-2))\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  CPOTRF or CHEEV returned an error code:\n\
  *             <= N:  if INFO = i, CHEEV failed to converge;\n\
  *                    i off-diagonal elements of an intermediate\n\
  *                    tridiagonal form did not converge to zero;\n\
  *             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n\
  *                    minor of order i of B is not positive definite.\n\
  *                    The factorization of B could not be completed and\n\
  *                    no eigenvalues or eigenvectors were computed.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
