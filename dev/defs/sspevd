--- 
:name: sspevd
:md5sum: 83441e80c70bbab2f5bee13cf131faa6
:category: :subroutine
:arguments: 
- jobz: 
    :type: char
    :intent: input
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- ap: 
    :type: real
    :intent: input/output
    :dims: 
    - ldap
- w: 
    :type: real
    :intent: output
    :dims: 
    - n
- z: 
    :type: real
    :intent: output
    :dims: 
    - ldz
    - n
- ldz: 
    :type: integer
    :intent: input
- work: 
    :type: real
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
- iwork: 
    :type: integer
    :intent: output
    :dims: 
    - MAX(1,liwork)
- liwork: 
    :type: integer
    :intent: input
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldz: "lsame_(&jobz,\"V\") ? MAX(1,n) : 1"
  n: (int)(sqrt((double)8*ldap+1)-1)/2
:fortran_help: "      SUBROUTINE SSPEVD( JOBZ, UPLO, N, AP, W, Z, LDZ, WORK, LWORK, IWORK, LIWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  SSPEVD computes all the eigenvalues and, optionally, eigenvectors\n\
  *  of a real symmetric matrix A in packed storage. If eigenvectors are\n\
  *  desired, it uses a divide and conquer algorithm.\n\
  *\n\
  *  The divide and conquer algorithm makes very mild assumptions about\n\
  *  floating point arithmetic. It will work on machines with a guard\n\
  *  digit in add/subtract, or on those binary machines without guard\n\
  *  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n\
  *  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n\
  *  without guard digits, but we know of none.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  JOBZ    (input) CHARACTER*1\n\
  *          = 'N':  Compute eigenvalues only;\n\
  *          = 'V':  Compute eigenvalues and eigenvectors.\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangle of A is stored;\n\
  *          = 'L':  Lower triangle of A is stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n\
  *          On entry, the upper or lower triangle of the symmetric matrix\n\
  *          A, packed columnwise in a linear array.  The j-th column of A\n\
  *          is stored in the array AP as follows:\n\
  *          if UPLO = 'U', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n\
  *          if UPLO = 'L', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n\
  *\n\
  *          On exit, AP is overwritten by values generated during the\n\
  *          reduction to tridiagonal form.  If UPLO = 'U', the diagonal\n\
  *          and first superdiagonal of the tridiagonal matrix T overwrite\n\
  *          the corresponding elements of A, and if UPLO = 'L', the\n\
  *          diagonal and first subdiagonal of T overwrite the\n\
  *          corresponding elements of A.\n\
  *\n\
  *  W       (output) REAL array, dimension (N)\n\
  *          If INFO = 0, the eigenvalues in ascending order.\n\
  *\n\
  *  Z       (output) REAL array, dimension (LDZ, N)\n\
  *          If JOBZ = 'V', then if INFO = 0, Z contains the orthonormal\n\
  *          eigenvectors of the matrix A, with the i-th column of Z\n\
  *          holding the eigenvector associated with W(i).\n\
  *          If JOBZ = 'N', then Z is not referenced.\n\
  *\n\
  *  LDZ     (input) INTEGER\n\
  *          The leading dimension of the array Z.  LDZ >= 1, and if\n\
  *          JOBZ = 'V', LDZ >= max(1,N).\n\
  *\n\
  *  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the required LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.\n\
  *          If N <= 1,               LWORK must be at least 1.\n\
  *          If JOBZ = 'N' and N > 1, LWORK must be at least 2*N.\n\
  *          If JOBZ = 'V' and N > 1, LWORK must be at least\n\
  *                                                 1 + 6*N + N**2.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the required sizes of the WORK and IWORK\n\
  *          arrays, returns these values as the first entries of the WORK\n\
  *          and IWORK arrays, and no error message related to LWORK or\n\
  *          LIWORK is issued by XERBLA.\n\
  *\n\
  *  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n\
  *          On exit, if INFO = 0, IWORK(1) returns the required LIWORK.\n\
  *\n\
  *  LIWORK  (input) INTEGER\n\
  *          The dimension of the array IWORK.\n\
  *          If JOBZ  = 'N' or N <= 1, LIWORK must be at least 1.\n\
  *          If JOBZ  = 'V' and N > 1, LIWORK must be at least 3 + 5*N.\n\
  *\n\
  *          If LIWORK = -1, then a workspace query is assumed; the\n\
  *          routine only calculates the required sizes of the WORK and\n\
  *          IWORK arrays, returns these values as the first entries of\n\
  *          the WORK and IWORK arrays, and no error message related to\n\
  *          LWORK or LIWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value.\n\
  *          > 0:  if INFO = i, the algorithm failed to converge; i\n\
  *                off-diagonal elements of an intermediate tridiagonal\n\
  *                form did not converge to zero.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
