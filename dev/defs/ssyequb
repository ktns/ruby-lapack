--- 
:name: ssyequb
:md5sum: f38f288f9e8b71ede27c0a88d4d0021f
:category: :subroutine
:arguments: 
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: real
    :intent: input
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- s: 
    :type: real
    :intent: output
    :dims: 
    - n
- scond: 
    :type: real
    :intent: output
- amax: 
    :type: real
    :intent: output
- work: 
    :type: real
    :intent: workspace
    :dims: 
    - 3*n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE SSYEQUB( UPLO, N, A, LDA, S, SCOND, AMAX, WORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  SSYEQUB computes row and column scalings intended to equilibrate a\n\
  *  symmetric matrix A and reduce its condition number\n\
  *  (with respect to the two-norm).  S contains the scale factors,\n\
  *  S(i) = 1/sqrt(A(i,i)), chosen so that the scaled matrix B with\n\
  *  elements B(i,j) = S(i)*A(i,j)*S(j) has ones on the diagonal.  This\n\
  *  choice of S puts the condition number of B within a factor N of the\n\
  *  smallest possible condition number over all possible diagonal\n\
  *  scalings.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          Specifies whether the details of the factorization are stored\n\
  *          as an upper or lower triangular matrix.\n\
  *          = 'U':  Upper triangular, form is A = U*D*U**T;\n\
  *          = 'L':  Lower triangular, form is A = L*D*L**T.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  A       (input) REAL array, dimension (LDA,N)\n\
  *          The N-by-N symmetric matrix whose scaling\n\
  *          factors are to be computed.  Only the diagonal elements of A\n\
  *          are referenced.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  S       (output) REAL array, dimension (N)\n\
  *          If INFO = 0, S contains the scale factors for A.\n\
  *\n\
  *  SCOND   (output) REAL\n\
  *          If INFO = 0, S contains the ratio of the smallest S(i) to\n\
  *          the largest S(i).  If SCOND >= 0.1 and AMAX is neither too\n\
  *          large nor too small, it is not worth scaling by S.\n\
  *\n\
  *  AMAX    (output) REAL\n\
  *          Absolute value of largest matrix element.  If AMAX is very\n\
  *          close to overflow or very close to underflow, the matrix\n\
  *          should be scaled.\n\
  *\n\
  *  WORK    (workspace) REAL array, dimension (3*N)\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  if INFO = i, the i-th diagonal element is nonpositive.\n\
  *\n\n\
  *  Further Details\n\
  *  ======= =======\n\
  *\n\
  *  Reference: Livne, O.E. and Golub, G.H., \"Scaling by Binormalization\",\n\
  *  Numerical Algorithms, vol. 35, no. 1, pp. 97-120, January 2004.\n\
  *  DOI 10.1023/B:NUMA.0000016606.32820.69\n\
  *  Tech report version: http://ruready.utah.edu/archive/papers/bin.pdf\n\
  *\n\
  *  =====================================================================\n\
  *\n"
