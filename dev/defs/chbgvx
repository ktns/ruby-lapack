--- 
:name: chbgvx
:md5sum: 994b0281e65266e3f6c89ad887294c10
:category: :subroutine
:arguments: 
- jobz: 
    :type: char
    :intent: input
- range: 
    :type: char
    :intent: input
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- ka: 
    :type: integer
    :intent: input
- kb: 
    :type: integer
    :intent: input
- ab: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldab
    - n
- ldab: 
    :type: integer
    :intent: input
- bb: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldbb
    - n
- ldbb: 
    :type: integer
    :intent: input
- q: 
    :type: complex
    :intent: output
    :dims: 
    - ldq
    - n
- ldq: 
    :type: integer
    :intent: input
- vl: 
    :type: real
    :intent: input
- vu: 
    :type: real
    :intent: input
- il: 
    :type: integer
    :intent: input
- iu: 
    :type: integer
    :intent: input
- abstol: 
    :type: real
    :intent: input
- m: 
    :type: integer
    :intent: output
- w: 
    :type: real
    :intent: output
    :dims: 
    - n
- z: 
    :type: complex
    :intent: output
    :dims: 
    - ldz
    - n
- ldz: 
    :type: integer
    :intent: input
- work: 
    :type: complex
    :intent: workspace
    :dims: 
    - n
- rwork: 
    :type: real
    :intent: workspace
    :dims: 
    - 7*n
- iwork: 
    :type: integer
    :intent: workspace
    :dims: 
    - 5*n
- ifail: 
    :type: integer
    :intent: output
    :dims: 
    - n
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldz: "lsame_(&jobz,\"V\") ? n : 1"
  ldq: "1 ? jobz = 'n' : MAX(1,n) ? jobz = 'v' : 0"
:fortran_help: "      SUBROUTINE CHBGVX( JOBZ, RANGE, UPLO, N, KA, KB, AB, LDAB, BB, LDBB, Q, LDQ, VL, VU, IL, IU, ABSTOL, M, W, Z, LDZ, WORK, RWORK, IWORK, IFAIL, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  CHBGVX computes all the eigenvalues, and optionally, the eigenvectors\n\
  *  of a complex generalized Hermitian-definite banded eigenproblem, of\n\
  *  the form A*x=(lambda)*B*x. Here A and B are assumed to be Hermitian\n\
  *  and banded, and B is also positive definite.  Eigenvalues and\n\
  *  eigenvectors can be selected by specifying either all eigenvalues,\n\
  *  a range of values or a range of indices for the desired eigenvalues.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  JOBZ    (input) CHARACTER*1\n\
  *          = 'N':  Compute eigenvalues only;\n\
  *          = 'V':  Compute eigenvalues and eigenvectors.\n\
  *\n\
  *  RANGE   (input) CHARACTER*1\n\
  *          = 'A': all eigenvalues will be found;\n\
  *          = 'V': all eigenvalues in the half-open interval (VL,VU]\n\
  *                 will be found;\n\
  *          = 'I': the IL-th through IU-th eigenvalues will be found.\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangles of A and B are stored;\n\
  *          = 'L':  Lower triangles of A and B are stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrices A and B.  N >= 0.\n\
  *\n\
  *  KA      (input) INTEGER\n\
  *          The number of superdiagonals of the matrix A if UPLO = 'U',\n\
  *          or the number of subdiagonals if UPLO = 'L'. KA >= 0.\n\
  *\n\
  *  KB      (input) INTEGER\n\
  *          The number of superdiagonals of the matrix B if UPLO = 'U',\n\
  *          or the number of subdiagonals if UPLO = 'L'. KB >= 0.\n\
  *\n\
  *  AB      (input/output) COMPLEX array, dimension (LDAB, N)\n\
  *          On entry, the upper or lower triangle of the Hermitian band\n\
  *          matrix A, stored in the first ka+1 rows of the array.  The\n\
  *          j-th column of A is stored in the j-th column of the array AB\n\
  *          as follows:\n\
  *          if UPLO = 'U', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n\
  *          if UPLO = 'L', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n\
  *\n\
  *          On exit, the contents of AB are destroyed.\n\
  *\n\
  *  LDAB    (input) INTEGER\n\
  *          The leading dimension of the array AB.  LDAB >= KA+1.\n\
  *\n\
  *  BB      (input/output) COMPLEX array, dimension (LDBB, N)\n\
  *          On entry, the upper or lower triangle of the Hermitian band\n\
  *          matrix B, stored in the first kb+1 rows of the array.  The\n\
  *          j-th column of B is stored in the j-th column of the array BB\n\
  *          as follows:\n\
  *          if UPLO = 'U', BB(kb+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n\
  *          if UPLO = 'L', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n\
  *\n\
  *          On exit, the factor S from the split Cholesky factorization\n\
  *          B = S**H*S, as returned by CPBSTF.\n\
  *\n\
  *  LDBB    (input) INTEGER\n\
  *          The leading dimension of the array BB.  LDBB >= KB+1.\n\
  *\n\
  *  Q       (output) COMPLEX array, dimension (LDQ, N)\n\
  *          If JOBZ = 'V', the n-by-n matrix used in the reduction of\n\
  *          A*x = (lambda)*B*x to standard form, i.e. C*x = (lambda)*x,\n\
  *          and consequently C to tridiagonal form.\n\
  *          If JOBZ = 'N', the array Q is not referenced.\n\
  *\n\
  *  LDQ     (input) INTEGER\n\
  *          The leading dimension of the array Q.  If JOBZ = 'N',\n\
  *          LDQ >= 1. If JOBZ = 'V', LDQ >= max(1,N).\n\
  *\n\
  *  VL      (input) REAL\n\
  *  VU      (input) REAL\n\
  *          If RANGE='V', the lower and upper bounds of the interval to\n\
  *          be searched for eigenvalues. VL < VU.\n\
  *          Not referenced if RANGE = 'A' or 'I'.\n\
  *\n\
  *  IL      (input) INTEGER\n\
  *  IU      (input) INTEGER\n\
  *          If RANGE='I', the indices (in ascending order) of the\n\
  *          smallest and largest eigenvalues to be returned.\n\
  *          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n\
  *          Not referenced if RANGE = 'A' or 'V'.\n\
  *\n\
  *  ABSTOL  (input) REAL\n\
  *          The absolute error tolerance for the eigenvalues.\n\
  *          An approximate eigenvalue is accepted as converged\n\
  *          when it is determined to lie in an interval [a,b]\n\
  *          of width less than or equal to\n\
  *\n\
  *                  ABSTOL + EPS *   max( |a|,|b| ) ,\n\
  *\n\
  *          where EPS is the machine precision.  If ABSTOL is less than\n\
  *          or equal to zero, then  EPS*|T|  will be used in its place,\n\
  *          where |T| is the 1-norm of the tridiagonal matrix obtained\n\
  *          by reducing AP to tridiagonal form.\n\
  *\n\
  *          Eigenvalues will be computed most accurately when ABSTOL is\n\
  *          set to twice the underflow threshold 2*SLAMCH('S'), not zero.\n\
  *          If this routine returns with INFO>0, indicating that some\n\
  *          eigenvectors did not converge, try setting ABSTOL to\n\
  *          2*SLAMCH('S').\n\
  *\n\
  *  M       (output) INTEGER\n\
  *          The total number of eigenvalues found.  0 <= M <= N.\n\
  *          If RANGE = 'A', M = N, and if RANGE = 'I', M = IU-IL+1.\n\
  *\n\
  *  W       (output) REAL array, dimension (N)\n\
  *          If INFO = 0, the eigenvalues in ascending order.\n\
  *\n\
  *  Z       (output) COMPLEX array, dimension (LDZ, N)\n\
  *          If JOBZ = 'V', then if INFO = 0, Z contains the matrix Z of\n\
  *          eigenvectors, with the i-th column of Z holding the\n\
  *          eigenvector associated with W(i). The eigenvectors are\n\
  *          normalized so that Z**H*B*Z = I.\n\
  *          If JOBZ = 'N', then Z is not referenced.\n\
  *\n\
  *  LDZ     (input) INTEGER\n\
  *          The leading dimension of the array Z.  LDZ >= 1, and if\n\
  *          JOBZ = 'V', LDZ >= N.\n\
  *\n\
  *  WORK    (workspace) COMPLEX array, dimension (N)\n\
  *\n\
  *  RWORK   (workspace) REAL array, dimension (7*N)\n\
  *\n\
  *  IWORK   (workspace) INTEGER array, dimension (5*N)\n\
  *\n\
  *  IFAIL   (output) INTEGER array, dimension (N)\n\
  *          If JOBZ = 'V', then if INFO = 0, the first M elements of\n\
  *          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n\
  *          indices of the eigenvectors that failed to converge.\n\
  *          If JOBZ = 'N', then IFAIL is not referenced.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  if INFO = i, and i is:\n\
  *             <= N:  then i eigenvectors failed to converge.  Their\n\
  *                    indices are stored in array IFAIL.\n\
  *             > N:   if INFO = N + i, for 1 <= i <= N, then CPBSTF\n\
  *                    returned INFO = i: B is not positive definite.\n\
  *                    The factorization of B could not be completed and\n\
  *                    no eigenvalues or eigenvectors were computed.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Mark Fahey, Department of Mathematics, Univ. of Kentucky, USA\n\
  *\n\
  *  =====================================================================\n\
  *\n"
