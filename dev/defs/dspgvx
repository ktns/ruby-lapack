--- 
:name: dspgvx
:md5sum: f64e08142ffc3da2c4a946629754e8ad
:category: :subroutine
:arguments: 
- itype: 
    :type: integer
    :intent: input
- jobz: 
    :type: char
    :intent: input
- range: 
    :type: char
    :intent: input
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- ap: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - ldap
- bp: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - n*(n+1)/2
- vl: 
    :type: doublereal
    :intent: input
- vu: 
    :type: doublereal
    :intent: input
- il: 
    :type: integer
    :intent: input
- iu: 
    :type: integer
    :intent: input
- abstol: 
    :type: doublereal
    :intent: input
- m: 
    :type: integer
    :intent: output
- w: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- z: 
    :type: doublereal
    :intent: output
    :dims: 
    - "lsame_(&jobz,\"N\") ? 0 : ldz"
    - "lsame_(&jobz,\"N\") ? 0 : MAX(1,m)"
- ldz: 
    :type: integer
    :intent: input
- work: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - 8*n
- iwork: 
    :type: integer
    :intent: workspace
    :dims: 
    - 5*n
- ifail: 
    :type: integer
    :intent: output
    :dims: 
    - n
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldz: "lsame_(&jobz,\"V\") ? MAX(1,n) : 1"
  m: "lsame_(&range,\"A\") ? n : lsame_(&range,\"I\") ? iu-il+1 : 0"
  n: (int)(sqrt((double)8*ldap+1)-1)/2
:fortran_help: "      SUBROUTINE DSPGVX( ITYPE, JOBZ, RANGE, UPLO, N, AP, BP, VL, VU, IL, IU, ABSTOL, M, W, Z, LDZ, WORK, IWORK, IFAIL, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DSPGVX computes selected eigenvalues, and optionally, eigenvectors\n\
  *  of a real generalized symmetric-definite eigenproblem, of the form\n\
  *  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A\n\
  *  and B are assumed to be symmetric, stored in packed storage, and B\n\
  *  is also positive definite.  Eigenvalues and eigenvectors can be\n\
  *  selected by specifying either a range of values or a range of indices\n\
  *  for the desired eigenvalues.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  ITYPE   (input) INTEGER\n\
  *          Specifies the problem type to be solved:\n\
  *          = 1:  A*x = (lambda)*B*x\n\
  *          = 2:  A*B*x = (lambda)*x\n\
  *          = 3:  B*A*x = (lambda)*x\n\
  *\n\
  *  JOBZ    (input) CHARACTER*1\n\
  *          = 'N':  Compute eigenvalues only;\n\
  *          = 'V':  Compute eigenvalues and eigenvectors.\n\
  *\n\
  *  RANGE   (input) CHARACTER*1\n\
  *          = 'A': all eigenvalues will be found.\n\
  *          = 'V': all eigenvalues in the half-open interval (VL,VU]\n\
  *                 will be found.\n\
  *          = 'I': the IL-th through IU-th eigenvalues will be found.\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangle of A and B are stored;\n\
  *          = 'L':  Lower triangle of A and B are stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix pencil (A,B).  N >= 0.\n\
  *\n\
  *  AP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n\
  *          On entry, the upper or lower triangle of the symmetric matrix\n\
  *          A, packed columnwise in a linear array.  The j-th column of A\n\
  *          is stored in the array AP as follows:\n\
  *          if UPLO = 'U', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n\
  *          if UPLO = 'L', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n\
  *\n\
  *          On exit, the contents of AP are destroyed.\n\
  *\n\
  *  BP      (input/output) DOUBLE PRECISION array, dimension (N*(N+1)/2)\n\
  *          On entry, the upper or lower triangle of the symmetric matrix\n\
  *          B, packed columnwise in a linear array.  The j-th column of B\n\
  *          is stored in the array BP as follows:\n\
  *          if UPLO = 'U', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n\
  *          if UPLO = 'L', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n\
  *\n\
  *          On exit, the triangular factor U or L from the Cholesky\n\
  *          factorization B = U**T*U or B = L*L**T, in the same storage\n\
  *          format as B.\n\
  *\n\
  *  VL      (input) DOUBLE PRECISION\n\
  *  VU      (input) DOUBLE PRECISION\n\
  *          If RANGE='V', the lower and upper bounds of the interval to\n\
  *          be searched for eigenvalues. VL < VU.\n\
  *          Not referenced if RANGE = 'A' or 'I'.\n\
  *\n\
  *  IL      (input) INTEGER\n\
  *  IU      (input) INTEGER\n\
  *          If RANGE='I', the indices (in ascending order) of the\n\
  *          smallest and largest eigenvalues to be returned.\n\
  *          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n\
  *          Not referenced if RANGE = 'A' or 'V'.\n\
  *\n\
  *  ABSTOL  (input) DOUBLE PRECISION\n\
  *          The absolute error tolerance for the eigenvalues.\n\
  *          An approximate eigenvalue is accepted as converged\n\
  *          when it is determined to lie in an interval [a,b]\n\
  *          of width less than or equal to\n\
  *\n\
  *                  ABSTOL + EPS *   max( |a|,|b| ) ,\n\
  *\n\
  *          where EPS is the machine precision.  If ABSTOL is less than\n\
  *          or equal to zero, then  EPS*|T|  will be used in its place,\n\
  *          where |T| is the 1-norm of the tridiagonal matrix obtained\n\
  *          by reducing A to tridiagonal form.\n\
  *\n\
  *          Eigenvalues will be computed most accurately when ABSTOL is\n\
  *          set to twice the underflow threshold 2*DLAMCH('S'), not zero.\n\
  *          If this routine returns with INFO>0, indicating that some\n\
  *          eigenvectors did not converge, try setting ABSTOL to\n\
  *          2*DLAMCH('S').\n\
  *\n\
  *  M       (output) INTEGER\n\
  *          The total number of eigenvalues found.  0 <= M <= N.\n\
  *          If RANGE = 'A', M = N, and if RANGE = 'I', M = IU-IL+1.\n\
  *\n\
  *  W       (output) DOUBLE PRECISION array, dimension (N)\n\
  *          On normal exit, the first M elements contain the selected\n\
  *          eigenvalues in ascending order.\n\
  *\n\
  *  Z       (output) DOUBLE PRECISION array, dimension (LDZ, max(1,M))\n\
  *          If JOBZ = 'N', then Z is not referenced.\n\
  *          If JOBZ = 'V', then if INFO = 0, the first M columns of Z\n\
  *          contain the orthonormal eigenvectors of the matrix A\n\
  *          corresponding to the selected eigenvalues, with the i-th\n\
  *          column of Z holding the eigenvector associated with W(i).\n\
  *          The eigenvectors are normalized as follows:\n\
  *          if ITYPE = 1 or 2, Z**T*B*Z = I;\n\
  *          if ITYPE = 3, Z**T*inv(B)*Z = I.\n\
  *\n\
  *          If an eigenvector fails to converge, then that column of Z\n\
  *          contains the latest approximation to the eigenvector, and the\n\
  *          index of the eigenvector is returned in IFAIL.\n\
  *          Note: the user must ensure that at least max(1,M) columns are\n\
  *          supplied in the array Z; if RANGE = 'V', the exact value of M\n\
  *          is not known in advance and an upper bound must be used.\n\
  *\n\
  *  LDZ     (input) INTEGER\n\
  *          The leading dimension of the array Z.  LDZ >= 1, and if\n\
  *          JOBZ = 'V', LDZ >= max(1,N).\n\
  *\n\
  *  WORK    (workspace) DOUBLE PRECISION array, dimension (8*N)\n\
  *\n\
  *  IWORK   (workspace) INTEGER array, dimension (5*N)\n\
  *\n\
  *  IFAIL   (output) INTEGER array, dimension (N)\n\
  *          If JOBZ = 'V', then if INFO = 0, the first M elements of\n\
  *          IFAIL are zero.  If INFO > 0, then IFAIL contains the\n\
  *          indices of the eigenvectors that failed to converge.\n\
  *          If JOBZ = 'N', then IFAIL is not referenced.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  DPPTRF or DSPEVX returned an error code:\n\
  *             <= N:  if INFO = i, DSPEVX failed to converge;\n\
  *                    i eigenvectors failed to converge.  Their indices\n\
  *                    are stored in array IFAIL.\n\
  *             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n\
  *                    minor of order i of B is not positive definite.\n\
  *                    The factorization of B could not be completed and\n\
  *                    no eigenvalues or eigenvectors were computed.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Mark Fahey, Department of Mathematics, Univ. of Kentucky, USA\n\
  *\n\
  * =====================================================================\n\
  *\n\
  *     .. Local Scalars ..\n      LOGICAL            ALLEIG, INDEIG, UPPER, VALEIG, WANTZ\n      CHARACTER          TRANS\n      INTEGER            J\n\
  *     ..\n\
  *     .. External Functions ..\n      LOGICAL            LSAME\n      EXTERNAL           LSAME\n\
  *     ..\n\
  *     .. External Subroutines ..\n      EXTERNAL           DPPTRF, DSPEVX, DSPGST, DTPMV, DTPSV, XERBLA\n\
  *     ..\n\
  *     .. Intrinsic Functions ..\n      INTRINSIC          MIN\n\
  *     ..\n"
