--- 
:name: dlarrd
:md5sum: 1c6e49f591c6b2ec7416a44a5da7f9c7
:category: :subroutine
:arguments: 
- range: 
    :type: char
    :intent: input
- order: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- vl: 
    :type: doublereal
    :intent: input
- vu: 
    :type: doublereal
    :intent: input
- il: 
    :type: integer
    :intent: input
- iu: 
    :type: integer
    :intent: input
- gers: 
    :type: doublereal
    :intent: input
    :dims: 
    - 2*n
- reltol: 
    :type: doublereal
    :intent: input
- d: 
    :type: doublereal
    :intent: input
    :dims: 
    - n
- e: 
    :type: doublereal
    :intent: input
    :dims: 
    - n-1
- e2: 
    :type: doublereal
    :intent: input
    :dims: 
    - n-1
- pivmin: 
    :type: doublereal
    :intent: input
- nsplit: 
    :type: integer
    :intent: input
- isplit: 
    :type: integer
    :intent: input
    :dims: 
    - n
- m: 
    :type: integer
    :intent: output
- w: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- werr: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- wl: 
    :type: doublereal
    :intent: output
- wu: 
    :type: doublereal
    :intent: output
- iblock: 
    :type: integer
    :intent: output
    :dims: 
    - n
- indexw: 
    :type: integer
    :intent: output
    :dims: 
    - n
- work: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - 4*n
- iwork: 
    :type: integer
    :intent: workspace
    :dims: 
    - 3*n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE DLARRD( RANGE, ORDER, N, VL, VU, IL, IU, GERS, RELTOL, D, E, E2, PIVMIN, NSPLIT, ISPLIT, M, W, WERR, WL, WU, IBLOCK, INDEXW, WORK, IWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DLARRD computes the eigenvalues of a symmetric tridiagonal\n\
  *  matrix T to suitable accuracy. This is an auxiliary code to be\n\
  *  called from DSTEMR.\n\
  *  The user may ask for all eigenvalues, all eigenvalues\n\
  *  in the half-open interval (VL, VU], or the IL-th through IU-th\n\
  *  eigenvalues.\n\
  *\n\
  *  To avoid overflow, the matrix must be scaled so that its\n\
  *  largest element is no greater than overflow**(1/2) *\n\
  *  underflow**(1/4) in absolute value, and for greatest\n\
  *  accuracy, it should not be much smaller than that.\n\
  *\n\
  *  See W. Kahan \"Accurate Eigenvalues of a Symmetric Tridiagonal\n\
  *  Matrix\", Report CS41, Computer Science Dept., Stanford\n\
  *  University, July 21, 1966.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  RANGE   (input) CHARACTER*1\n\
  *          = 'A': (\"All\")   all eigenvalues will be found.\n\
  *          = 'V': (\"Value\") all eigenvalues in the half-open interval\n\
  *                           (VL, VU] will be found.\n\
  *          = 'I': (\"Index\") the IL-th through IU-th eigenvalues (of the\n\
  *                           entire matrix) will be found.\n\
  *\n\
  *  ORDER   (input) CHARACTER*1\n\
  *          = 'B': (\"By Block\") the eigenvalues will be grouped by\n\
  *                              split-off block (see IBLOCK, ISPLIT) and\n\
  *                              ordered from smallest to largest within\n\
  *                              the block.\n\
  *          = 'E': (\"Entire matrix\")\n\
  *                              the eigenvalues for the entire matrix\n\
  *                              will be ordered from smallest to\n\
  *                              largest.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the tridiagonal matrix T.  N >= 0.\n\
  *\n\
  *  VL      (input) DOUBLE PRECISION\n\
  *  VU      (input) DOUBLE PRECISION\n\
  *          If RANGE='V', the lower and upper bounds of the interval to\n\
  *          be searched for eigenvalues.  Eigenvalues less than or equal\n\
  *          to VL, or greater than VU, will not be returned.  VL < VU.\n\
  *          Not referenced if RANGE = 'A' or 'I'.\n\
  *\n\
  *  IL      (input) INTEGER\n\
  *  IU      (input) INTEGER\n\
  *          If RANGE='I', the indices (in ascending order) of the\n\
  *          smallest and largest eigenvalues to be returned.\n\
  *          1 <= IL <= IU <= N, if N > 0; IL = 1 and IU = 0 if N = 0.\n\
  *          Not referenced if RANGE = 'A' or 'V'.\n\
  *\n\
  *  GERS    (input) DOUBLE PRECISION array, dimension (2*N)\n\
  *          The N Gerschgorin intervals (the i-th Gerschgorin interval\n\
  *          is (GERS(2*i-1), GERS(2*i)).\n\
  *\n\
  *  RELTOL  (input) DOUBLE PRECISION\n\
  *          The minimum relative width of an interval.  When an interval\n\
  *          is narrower than RELTOL times the larger (in\n\
  *          magnitude) endpoint, then it is considered to be\n\
  *          sufficiently small, i.e., converged.  Note: this should\n\
  *          always be at least radix*machine epsilon.\n\
  *\n\
  *  D       (input) DOUBLE PRECISION array, dimension (N)\n\
  *          The n diagonal elements of the tridiagonal matrix T.\n\
  *\n\
  *  E       (input) DOUBLE PRECISION array, dimension (N-1)\n\
  *          The (n-1) off-diagonal elements of the tridiagonal matrix T.\n\
  *\n\
  *  E2      (input) DOUBLE PRECISION array, dimension (N-1)\n\
  *          The (n-1) squared off-diagonal elements of the tridiagonal matrix T.\n\
  *\n\
  *  PIVMIN  (input) DOUBLE PRECISION\n\
  *          The minimum pivot allowed in the Sturm sequence for T.\n\
  *\n\
  *  NSPLIT  (input) INTEGER\n\
  *          The number of diagonal blocks in the matrix T.\n\
  *          1 <= NSPLIT <= N.\n\
  *\n\
  *  ISPLIT  (input) INTEGER array, dimension (N)\n\
  *          The splitting points, at which T breaks up into submatrices.\n\
  *          The first submatrix consists of rows/columns 1 to ISPLIT(1),\n\
  *          the second of rows/columns ISPLIT(1)+1 through ISPLIT(2),\n\
  *          etc., and the NSPLIT-th consists of rows/columns\n\
  *          ISPLIT(NSPLIT-1)+1 through ISPLIT(NSPLIT)=N.\n\
  *          (Only the first NSPLIT elements will actually be used, but\n\
  *          since the user cannot know a priori what value NSPLIT will\n\
  *          have, N words must be reserved for ISPLIT.)\n\
  *\n\
  *  M       (output) INTEGER\n\
  *          The actual number of eigenvalues found. 0 <= M <= N.\n\
  *          (See also the description of INFO=2,3.)\n\
  *\n\
  *  W       (output) DOUBLE PRECISION array, dimension (N)\n\
  *          On exit, the first M elements of W will contain the\n\
  *          eigenvalue approximations. DLARRD computes an interval\n\
  *          I_j = (a_j, b_j] that includes eigenvalue j. The eigenvalue\n\
  *          approximation is given as the interval midpoint\n\
  *          W(j)= ( a_j + b_j)/2. The corresponding error is bounded by\n\
  *          WERR(j) = abs( a_j - b_j)/2\n\
  *\n\
  *  WERR    (output) DOUBLE PRECISION array, dimension (N)\n\
  *          The error bound on the corresponding eigenvalue approximation\n\
  *          in W.\n\
  *\n\
  *  WL      (output) DOUBLE PRECISION\n\
  *  WU      (output) DOUBLE PRECISION\n\
  *          The interval (WL, WU] contains all the wanted eigenvalues.\n\
  *          If RANGE='V', then WL=VL and WU=VU.\n\
  *          If RANGE='A', then WL and WU are the global Gerschgorin bounds\n\
  *                        on the spectrum.\n\
  *          If RANGE='I', then WL and WU are computed by DLAEBZ from the\n\
  *                        index range specified.\n\
  *\n\
  *  IBLOCK  (output) INTEGER array, dimension (N)\n\
  *          At each row/column j where E(j) is zero or small, the\n\
  *          matrix T is considered to split into a block diagonal\n\
  *          matrix.  On exit, if INFO = 0, IBLOCK(i) specifies to which\n\
  *          block (from 1 to the number of blocks) the eigenvalue W(i)\n\
  *          belongs.  (DLARRD may use the remaining N-M elements as\n\
  *          workspace.)\n\
  *\n\
  *  INDEXW  (output) INTEGER array, dimension (N)\n\
  *          The indices of the eigenvalues within each block (submatrix);\n\
  *          for example, INDEXW(i)= j and IBLOCK(i)=k imply that the\n\
  *          i-th eigenvalue W(i) is the j-th eigenvalue in block k.\n\
  *\n\
  *  WORK    (workspace) DOUBLE PRECISION array, dimension (4*N)\n\
  *\n\
  *  IWORK   (workspace) INTEGER array, dimension (3*N)\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  some or all of the eigenvalues failed to converge or\n\
  *                were not computed:\n\
  *                =1 or 3: Bisection failed to converge for some\n\
  *                        eigenvalues; these eigenvalues are flagged by a\n\
  *                        negative block number.  The effect is that the\n\
  *                        eigenvalues may not be as accurate as the\n\
  *                        absolute and relative tolerances.  This is\n\
  *                        generally caused by unexpectedly inaccurate\n\
  *                        arithmetic.\n\
  *                =2 or 3: RANGE='I' only: Not all of the eigenvalues\n\
  *                        IL:IU were found.\n\
  *                        Effect: M < IU+1-IL\n\
  *                        Cause:  non-monotonic arithmetic, causing the\n\
  *                                Sturm sequence to be non-monotonic.\n\
  *                        Cure:   recalculate, using RANGE='A', and pick\n\
  *                                out eigenvalues IL:IU.  In some cases,\n\
  *                                increasing the PARAMETER \"FUDGE\" may\n\
  *                                make things work.\n\
  *                = 4:    RANGE='I', and the Gershgorin interval\n\
  *                        initially used was too small.  No eigenvalues\n\
  *                        were computed.\n\
  *                        Probable cause: your machine has sloppy\n\
  *                                        floating-point arithmetic.\n\
  *                        Cure: Increase the PARAMETER \"FUDGE\",\n\
  *                              recompile, and try again.\n\
  *\n\
  *  Internal Parameters\n\
  *  ===================\n\
  *\n\
  *  FUDGE   DOUBLE PRECISION, default = 2\n\
  *          A \"fudge factor\" to widen the Gershgorin intervals.  Ideally,\n\
  *          a value of 1 should work, but on machines with sloppy\n\
  *          arithmetic, this needs to be larger.  The default for\n\
  *          publicly released versions should be large enough to handle\n\
  *          the worst machine around.  Note that this has no effect\n\
  *          on accuracy of the solution.\n\
  *\n\
  *  Based on contributions by\n\
  *     W. Kahan, University of California, Berkeley, USA\n\
  *     Beresford Parlett, University of California, Berkeley, USA\n\
  *     Jim Demmel, University of California, Berkeley, USA\n\
  *     Inderjit Dhillon, University of Texas, Austin, USA\n\
  *     Osni Marques, LBNL/NERSC, USA\n\
  *     Christof Voemel, University of California, Berkeley, USA\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
