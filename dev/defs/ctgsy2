--- 
:name: ctgsy2
:md5sum: fd16bf64f0e7ab12a71f285b2f8febc0
:category: :subroutine
:arguments: 
- trans: 
    :type: char
    :intent: input
- ijob: 
    :type: integer
    :intent: input
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: complex
    :intent: input
    :dims: 
    - lda
    - m
- lda: 
    :type: integer
    :intent: input
- b: 
    :type: complex
    :intent: input
    :dims: 
    - ldb
    - n
- ldb: 
    :type: integer
    :intent: input
- c: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldc
    - n
- ldc: 
    :type: integer
    :intent: input
- d: 
    :type: complex
    :intent: input
    :dims: 
    - ldd
    - m
- ldd: 
    :type: integer
    :intent: input
- e: 
    :type: complex
    :intent: input
    :dims: 
    - lde
    - n
- lde: 
    :type: integer
    :intent: input
- f: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldf
    - n
- ldf: 
    :type: integer
    :intent: input
- scale: 
    :type: real
    :intent: output
- rdsum: 
    :type: real
    :intent: input/output
- rdscal: 
    :type: real
    :intent: input/output
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE CTGSY2( TRANS, IJOB, M, N, A, LDA, B, LDB, C, LDC, D, LDD, E, LDE, F, LDF, SCALE, RDSUM, RDSCAL, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  CTGSY2 solves the generalized Sylvester equation\n\
  *\n\
  *              A * R - L * B = scale *   C               (1)\n\
  *              D * R - L * E = scale * F\n\
  *\n\
  *  using Level 1 and 2 BLAS, where R and L are unknown M-by-N matrices,\n\
  *  (A, D), (B, E) and (C, F) are given matrix pairs of size M-by-M,\n\
  *  N-by-N and M-by-N, respectively. A, B, D and E are upper triangular\n\
  *  (i.e., (A,D) and (B,E) in generalized Schur form).\n\
  *\n\
  *  The solution (R, L) overwrites (C, F). 0 <= SCALE <= 1 is an output\n\
  *  scaling factor chosen to avoid overflow.\n\
  *\n\
  *  In matrix notation solving equation (1) corresponds to solve\n\
  *  Zx = scale * b, where Z is defined as\n\
  *\n\
  *         Z = [ kron(In, A)  -kron(B', Im) ]             (2)\n\
  *             [ kron(In, D)  -kron(E', Im) ],\n\
  *\n\
  *  Ik is the identity matrix of size k and X' is the transpose of X.\n\
  *  kron(X, Y) is the Kronecker product between the matrices X and Y.\n\
  *\n\
  *  If TRANS = 'C', y in the conjugate transposed system Z'y = scale*b\n\
  *  is solved for, which is equivalent to solve for R and L in\n\
  *\n\
  *              A' * R  + D' * L   = scale *  C           (3)\n\
  *              R  * B' + L  * E'  = scale * -F\n\
  *\n\
  *  This case is used to compute an estimate of Dif[(A, D), (B, E)] =\n\
  *  = sigma_min(Z) using reverse communicaton with CLACON.\n\
  *\n\
  *  CTGSY2 also (IJOB >= 1) contributes to the computation in CTGSYL\n\
  *  of an upper bound on the separation between to matrix pairs. Then\n\
  *  the input (A, D), (B, E) are sub-pencils of two matrix pairs in\n\
  *  CTGSYL.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  TRANS   (input) CHARACTER*1\n\
  *          = 'N', solve the generalized Sylvester equation (1).\n\
  *          = 'T': solve the 'transposed' system (3).\n\
  *\n\
  *  IJOB    (input) INTEGER\n\
  *          Specifies what kind of functionality to be performed.\n\
  *          =0: solve (1) only.\n\
  *          =1: A contribution from this subsystem to a Frobenius\n\
  *              norm-based estimate of the separation between two matrix\n\
  *              pairs is computed. (look ahead strategy is used).\n\
  *          =2: A contribution from this subsystem to a Frobenius\n\
  *              norm-based estimate of the separation between two matrix\n\
  *              pairs is computed. (SGECON on sub-systems is used.)\n\
  *          Not referenced if TRANS = 'T'.\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          On entry, M specifies the order of A and D, and the row\n\
  *          dimension of C, F, R and L.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          On entry, N specifies the order of B and E, and the column\n\
  *          dimension of C, F, R and L.\n\
  *\n\
  *  A       (input) COMPLEX array, dimension (LDA, M)\n\
  *          On entry, A contains an upper triangular matrix.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the matrix A. LDA >= max(1, M).\n\
  *\n\
  *  B       (input) COMPLEX array, dimension (LDB, N)\n\
  *          On entry, B contains an upper triangular matrix.\n\
  *\n\
  *  LDB     (input) INTEGER\n\
  *          The leading dimension of the matrix B. LDB >= max(1, N).\n\
  *\n\
  *  C       (input/output) COMPLEX array, dimension (LDC, N)\n\
  *          On entry, C contains the right-hand-side of the first matrix\n\
  *          equation in (1).\n\
  *          On exit, if IJOB = 0, C has been overwritten by the solution\n\
  *          R.\n\
  *\n\
  *  LDC     (input) INTEGER\n\
  *          The leading dimension of the matrix C. LDC >= max(1, M).\n\
  *\n\
  *  D       (input) COMPLEX array, dimension (LDD, M)\n\
  *          On entry, D contains an upper triangular matrix.\n\
  *\n\
  *  LDD     (input) INTEGER\n\
  *          The leading dimension of the matrix D. LDD >= max(1, M).\n\
  *\n\
  *  E       (input) COMPLEX array, dimension (LDE, N)\n\
  *          On entry, E contains an upper triangular matrix.\n\
  *\n\
  *  LDE     (input) INTEGER\n\
  *          The leading dimension of the matrix E. LDE >= max(1, N).\n\
  *\n\
  *  F       (input/output) COMPLEX array, dimension (LDF, N)\n\
  *          On entry, F contains the right-hand-side of the second matrix\n\
  *          equation in (1).\n\
  *          On exit, if IJOB = 0, F has been overwritten by the solution\n\
  *          L.\n\
  *\n\
  *  LDF     (input) INTEGER\n\
  *          The leading dimension of the matrix F. LDF >= max(1, M).\n\
  *\n\
  *  SCALE   (output) REAL\n\
  *          On exit, 0 <= SCALE <= 1. If 0 < SCALE < 1, the solutions\n\
  *          R and L (C and F on entry) will hold the solutions to a\n\
  *          slightly perturbed system but the input matrices A, B, D and\n\
  *          E have not been changed. If SCALE = 0, R and L will hold the\n\
  *          solutions to the homogeneous system with C = F = 0.\n\
  *          Normally, SCALE = 1.\n\
  *\n\
  *  RDSUM   (input/output) REAL\n\
  *          On entry, the sum of squares of computed contributions to\n\
  *          the Dif-estimate under computation by CTGSYL, where the\n\
  *          scaling factor RDSCAL (see below) has been factored out.\n\
  *          On exit, the corresponding sum of squares updated with the\n\
  *          contributions from the current sub-system.\n\
  *          If TRANS = 'T' RDSUM is not touched.\n\
  *          NOTE: RDSUM only makes sense when CTGSY2 is called by\n\
  *          CTGSYL.\n\
  *\n\
  *  RDSCAL  (input/output) REAL\n\
  *          On entry, scaling factor used to prevent overflow in RDSUM.\n\
  *          On exit, RDSCAL is updated w.r.t. the current contributions\n\
  *          in RDSUM.\n\
  *          If TRANS = 'T', RDSCAL is not touched.\n\
  *          NOTE: RDSCAL only makes sense when CTGSY2 is called by\n\
  *          CTGSYL.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          On exit, if INFO is set to\n\
  *            =0: Successful exit\n\
  *            <0: If INFO = -i, input argument number i is illegal.\n\
  *            >0: The matrix pairs (A, D) and (B, E) have common or very\n\
  *                close eigenvalues.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Bo Kagstrom and Peter Poromaa, Department of Computing Science,\n\
  *     Umea University, S-901 87 Umea, Sweden.\n\
  *\n\
  *  =====================================================================\n\
  *\n"
