--- 
:name: ztprfs
:md5sum: 0ad6c6044e04b9f8287f22946398270a
:category: :subroutine
:arguments: 
- uplo: 
    :type: char
    :intent: input
- trans: 
    :type: char
    :intent: input
- diag: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- nrhs: 
    :type: integer
    :intent: input
- ap: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - n*(n+1)/2
- b: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - ldb
    - nrhs
- ldb: 
    :type: integer
    :intent: input
- x: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - ldx
    - nrhs
- ldx: 
    :type: integer
    :intent: input
- ferr: 
    :type: doublereal
    :intent: output
    :dims: 
    - nrhs
- berr: 
    :type: doublereal
    :intent: output
    :dims: 
    - nrhs
- work: 
    :type: doublecomplex
    :intent: workspace
    :dims: 
    - 2*n
- rwork: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - n
- info: 
    :type: integer
    :intent: output
:substitutions: 
  n: ldb
:fortran_help: "      SUBROUTINE ZTPRFS( UPLO, TRANS, DIAG, N, NRHS, AP, B, LDB, X, LDX, FERR, BERR, WORK, RWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZTPRFS provides error bounds and backward error estimates for the\n\
  *  solution to a system of linear equations with a triangular packed\n\
  *  coefficient matrix.\n\
  *\n\
  *  The solution matrix X must be computed by ZTPTRS or some other\n\
  *  means before entering this routine.  ZTPRFS does not do iterative\n\
  *  refinement because doing so cannot improve the backward error.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  A is upper triangular;\n\
  *          = 'L':  A is lower triangular.\n\
  *\n\
  *  TRANS   (input) CHARACTER*1\n\
  *          Specifies the form of the system of equations:\n\
  *          = 'N':  A * X = B     (No transpose)\n\
  *          = 'T':  A**T * X = B  (Transpose)\n\
  *          = 'C':  A**H * X = B  (Conjugate transpose)\n\
  *\n\
  *  DIAG    (input) CHARACTER*1\n\
  *          = 'N':  A is non-unit triangular;\n\
  *          = 'U':  A is unit triangular.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  NRHS    (input) INTEGER\n\
  *          The number of right hand sides, i.e., the number of columns\n\
  *          of the matrices B and X.  NRHS >= 0.\n\
  *\n\
  *  AP      (input) COMPLEX*16 array, dimension (N*(N+1)/2)\n\
  *          The upper or lower triangular matrix A, packed columnwise in\n\
  *          a linear array.  The j-th column of A is stored in the array\n\
  *          AP as follows:\n\
  *          if UPLO = 'U', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n\
  *          if UPLO = 'L', AP(i + (j-1)*(2n-j)/2) = A(i,j) for j<=i<=n.\n\
  *          If DIAG = 'U', the diagonal elements of A are not referenced\n\
  *          and are assumed to be 1.\n\
  *\n\
  *  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n\
  *          The right hand side matrix B.\n\
  *\n\
  *  LDB     (input) INTEGER\n\
  *          The leading dimension of the array B.  LDB >= max(1,N).\n\
  *\n\
  *  X       (input) COMPLEX*16 array, dimension (LDX,NRHS)\n\
  *          The solution matrix X.\n\
  *\n\
  *  LDX     (input) INTEGER\n\
  *          The leading dimension of the array X.  LDX >= max(1,N).\n\
  *\n\
  *  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n\
  *          The estimated forward error bound for each solution vector\n\
  *          X(j) (the j-th column of the solution matrix X).\n\
  *          If XTRUE is the true solution corresponding to X(j), FERR(j)\n\
  *          is an estimated upper bound for the magnitude of the largest\n\
  *          element in (X(j) - XTRUE) divided by the magnitude of the\n\
  *          largest element in X(j).  The estimate is as reliable as\n\
  *          the estimate for RCOND, and is almost always a slight\n\
  *          overestimate of the true error.\n\
  *\n\
  *  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n\
  *          The componentwise relative backward error of each solution\n\
  *          vector X(j) (i.e., the smallest relative change in\n\
  *          any element of A or B that makes X(j) an exact solution).\n\
  *\n\
  *  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n\
  *\n\
  *  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
