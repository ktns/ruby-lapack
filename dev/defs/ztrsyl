--- 
:name: ztrsyl
:md5sum: b74a0884c540a69b1720f8f96006957c
:category: :subroutine
:arguments: 
- trana: 
    :type: char
    :intent: input
- tranb: 
    :type: char
    :intent: input
- isgn: 
    :type: integer
    :intent: input
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - lda
    - m
- lda: 
    :type: integer
    :intent: input
- b: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - ldb
    - n
- ldb: 
    :type: integer
    :intent: input
- c: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - ldc
    - n
- ldc: 
    :type: integer
    :intent: input
- scale: 
    :type: doublereal
    :intent: output
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZTRSYL( TRANA, TRANB, ISGN, M, N, A, LDA, B, LDB, C, LDC, SCALE, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZTRSYL solves the complex Sylvester matrix equation:\n\
  *\n\
  *     op(A)*X + X*op(B) = scale*C or\n\
  *     op(A)*X - X*op(B) = scale*C,\n\
  *\n\
  *  where op(A) = A or A**H, and A and B are both upper triangular. A is\n\
  *  M-by-M and B is N-by-N; the right hand side C and the solution X are\n\
  *  M-by-N; and scale is an output scale factor, set <= 1 to avoid\n\
  *  overflow in X.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  TRANA   (input) CHARACTER*1\n\
  *          Specifies the option op(A):\n\
  *          = 'N': op(A) = A    (No transpose)\n\
  *          = 'C': op(A) = A**H (Conjugate transpose)\n\
  *\n\
  *  TRANB   (input) CHARACTER*1\n\
  *          Specifies the option op(B):\n\
  *          = 'N': op(B) = B    (No transpose)\n\
  *          = 'C': op(B) = B**H (Conjugate transpose)\n\
  *\n\
  *  ISGN    (input) INTEGER\n\
  *          Specifies the sign in the equation:\n\
  *          = +1: solve op(A)*X + X*op(B) = scale*C\n\
  *          = -1: solve op(A)*X - X*op(B) = scale*C\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The order of the matrix A, and the number of rows in the\n\
  *          matrices X and C. M >= 0.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix B, and the number of columns in the\n\
  *          matrices X and C. N >= 0.\n\
  *\n\
  *  A       (input) COMPLEX*16 array, dimension (LDA,M)\n\
  *          The upper triangular matrix A.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A. LDA >= max(1,M).\n\
  *\n\
  *  B       (input) COMPLEX*16 array, dimension (LDB,N)\n\
  *          The upper triangular matrix B.\n\
  *\n\
  *  LDB     (input) INTEGER\n\
  *          The leading dimension of the array B. LDB >= max(1,N).\n\
  *\n\
  *  C       (input/output) COMPLEX*16 array, dimension (LDC,N)\n\
  *          On entry, the M-by-N right hand side matrix C.\n\
  *          On exit, C is overwritten by the solution matrix X.\n\
  *\n\
  *  LDC     (input) INTEGER\n\
  *          The leading dimension of the array C. LDC >= max(1,M)\n\
  *\n\
  *  SCALE   (output) DOUBLE PRECISION\n\
  *          The scale factor, scale, set <= 1 to avoid overflow in X.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0: successful exit\n\
  *          < 0: if INFO = -i, the i-th argument had an illegal value\n\
  *          = 1: A and B have common or very close eigenvalues; perturbed\n\
  *               values were used to solve the equation (but the matrices\n\
  *               A and B are unchanged).\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
