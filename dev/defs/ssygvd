--- 
:name: ssygvd
:md5sum: 89917a8e36f69459391a1b240a601bff
:category: :subroutine
:arguments: 
- itype: 
    :type: integer
    :intent: input
- jobz: 
    :type: char
    :intent: input
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: real
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- b: 
    :type: real
    :intent: input/output
    :dims: 
    - ldb
    - n
- ldb: 
    :type: integer
    :intent: input
- w: 
    :type: real
    :intent: output
    :dims: 
    - n
- work: 
    :type: real
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
- iwork: 
    :type: integer
    :intent: output
    :dims: 
    - MAX(1,liwork)
- liwork: 
    :type: integer
    :intent: input
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE SSYGVD( ITYPE, JOBZ, UPLO, N, A, LDA, B, LDB, W, WORK, LWORK, IWORK, LIWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  SSYGVD computes all the eigenvalues, and optionally, the eigenvectors\n\
  *  of a real generalized symmetric-definite eigenproblem, of the form\n\
  *  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n\
  *  B are assumed to be symmetric and B is also positive definite.\n\
  *  If eigenvectors are desired, it uses a divide and conquer algorithm.\n\
  *\n\
  *  The divide and conquer algorithm makes very mild assumptions about\n\
  *  floating point arithmetic. It will work on machines with a guard\n\
  *  digit in add/subtract, or on those binary machines without guard\n\
  *  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n\
  *  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n\
  *  without guard digits, but we know of none.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  ITYPE   (input) INTEGER\n\
  *          Specifies the problem type to be solved:\n\
  *          = 1:  A*x = (lambda)*B*x\n\
  *          = 2:  A*B*x = (lambda)*x\n\
  *          = 3:  B*A*x = (lambda)*x\n\
  *\n\
  *  JOBZ    (input) CHARACTER*1\n\
  *          = 'N':  Compute eigenvalues only;\n\
  *          = 'V':  Compute eigenvalues and eigenvectors.\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangles of A and B are stored;\n\
  *          = 'L':  Lower triangles of A and B are stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrices A and B.  N >= 0.\n\
  *\n\
  *  A       (input/output) REAL array, dimension (LDA, N)\n\
  *          On entry, the symmetric matrix A.  If UPLO = 'U', the\n\
  *          leading N-by-N upper triangular part of A contains the\n\
  *          upper triangular part of the matrix A.  If UPLO = 'L',\n\
  *          the leading N-by-N lower triangular part of A contains\n\
  *          the lower triangular part of the matrix A.\n\
  *\n\
  *          On exit, if JOBZ = 'V', then if INFO = 0, A contains the\n\
  *          matrix Z of eigenvectors.  The eigenvectors are normalized\n\
  *          as follows:\n\
  *          if ITYPE = 1 or 2, Z**T*B*Z = I;\n\
  *          if ITYPE = 3, Z**T*inv(B)*Z = I.\n\
  *          If JOBZ = 'N', then on exit the upper triangle (if UPLO='U')\n\
  *          or the lower triangle (if UPLO='L') of A, including the\n\
  *          diagonal, is destroyed.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  B       (input/output) REAL array, dimension (LDB, N)\n\
  *          On entry, the symmetric matrix B.  If UPLO = 'U', the\n\
  *          leading N-by-N upper triangular part of B contains the\n\
  *          upper triangular part of the matrix B.  If UPLO = 'L',\n\
  *          the leading N-by-N lower triangular part of B contains\n\
  *          the lower triangular part of the matrix B.\n\
  *\n\
  *          On exit, if INFO <= N, the part of B containing the matrix is\n\
  *          overwritten by the triangular factor U or L from the Cholesky\n\
  *          factorization B = U**T*U or B = L*L**T.\n\
  *\n\
  *  LDB     (input) INTEGER\n\
  *          The leading dimension of the array B.  LDB >= max(1,N).\n\
  *\n\
  *  W       (output) REAL array, dimension (N)\n\
  *          If INFO = 0, the eigenvalues in ascending order.\n\
  *\n\
  *  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.\n\
  *          If N <= 1,               LWORK >= 1.\n\
  *          If JOBZ = 'N' and N > 1, LWORK >= 2*N+1.\n\
  *          If JOBZ = 'V' and N > 1, LWORK >= 1 + 6*N + 2*N**2.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal sizes of the WORK and IWORK\n\
  *          arrays, returns these values as the first entries of the WORK\n\
  *          and IWORK arrays, and no error message related to LWORK or\n\
  *          LIWORK is issued by XERBLA.\n\
  *\n\
  *  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n\
  *          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n\
  *\n\
  *  LIWORK  (input) INTEGER\n\
  *          The dimension of the array IWORK.\n\
  *          If N <= 1,                LIWORK >= 1.\n\
  *          If JOBZ  = 'N' and N > 1, LIWORK >= 1.\n\
  *          If JOBZ  = 'V' and N > 1, LIWORK >= 3 + 5*N.\n\
  *\n\
  *          If LIWORK = -1, then a workspace query is assumed; the\n\
  *          routine only calculates the optimal sizes of the WORK and\n\
  *          IWORK arrays, returns these values as the first entries of\n\
  *          the WORK and IWORK arrays, and no error message related to\n\
  *          LWORK or LIWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  SPOTRF or SSYEVD returned an error code:\n\
  *             <= N:  if INFO = i and JOBZ = 'N', then the algorithm\n\
  *                    failed to converge; i off-diagonal elements of an\n\
  *                    intermediate tridiagonal form did not converge to\n\
  *                    zero;\n\
  *                    if INFO = i and JOBZ = 'V', then the algorithm\n\
  *                    failed to compute an eigenvalue while working on\n\
  *                    the submatrix lying in rows and columns INFO/(N+1)\n\
  *                    through mod(INFO,N+1);\n\
  *             > N:   if INFO = N + i, for 1 <= i <= N, then the leading\n\
  *                    minor of order i of B is not positive definite.\n\
  *                    The factorization of B could not be completed and\n\
  *                    no eigenvalues or eigenvectors were computed.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Mark Fahey, Department of Mathematics, Univ. of Kentucky, USA\n\
  *\n\
  *  Modified so that no backsubstitution is performed if SSYEVD fails to\n\
  *  converge (NEIG in old code could be greater than N causing out of\n\
  *  bounds reference to A - reported by Ralf Meyer).  Also corrected the\n\
  *  description of INFO and the test on ITYPE. Sven, 16 Feb 05.\n\
  *  =====================================================================\n\
  *\n"
