--- 
:name: zhsein
:md5sum: e2281999ac422c1eb5a43a6ce31f629e
:category: :subroutine
:arguments: 
- side: 
    :type: char
    :intent: input
- eigsrc: 
    :type: char
    :intent: input
- initv: 
    :type: char
    :intent: input
- select: 
    :type: logical
    :intent: input
    :dims: 
    - n
- n: 
    :type: integer
    :intent: input
- h: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - ldh
    - n
- ldh: 
    :type: integer
    :intent: input
- w: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - n
- vl: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - ldvl
    - mm
- ldvl: 
    :type: integer
    :intent: input
- vr: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - ldvr
    - mm
- ldvr: 
    :type: integer
    :intent: input
- mm: 
    :type: integer
    :intent: input
- m: 
    :type: integer
    :intent: output
- work: 
    :type: doublecomplex
    :intent: workspace
    :dims: 
    - n*n
- rwork: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - n
- ifaill: 
    :type: integer
    :intent: output
    :dims: 
    - mm
- ifailr: 
    :type: integer
    :intent: output
    :dims: 
    - mm
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZHSEIN( SIDE, EIGSRC, INITV, SELECT, N, H, LDH, W, VL, LDVL, VR, LDVR, MM, M, WORK, RWORK, IFAILL, IFAILR, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZHSEIN uses inverse iteration to find specified right and/or left\n\
  *  eigenvectors of a complex upper Hessenberg matrix H.\n\
  *\n\
  *  The right eigenvector x and the left eigenvector y of the matrix H\n\
  *  corresponding to an eigenvalue w are defined by:\n\
  *\n\
  *               H * x = w * x,     y**h * H = w * y**h\n\
  *\n\
  *  where y**h denotes the conjugate transpose of the vector y.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  SIDE    (input) CHARACTER*1\n\
  *          = 'R': compute right eigenvectors only;\n\
  *          = 'L': compute left eigenvectors only;\n\
  *          = 'B': compute both right and left eigenvectors.\n\
  *\n\
  *  EIGSRC  (input) CHARACTER*1\n\
  *          Specifies the source of eigenvalues supplied in W:\n\
  *          = 'Q': the eigenvalues were found using ZHSEQR; thus, if\n\
  *                 H has zero subdiagonal elements, and so is\n\
  *                 block-triangular, then the j-th eigenvalue can be\n\
  *                 assumed to be an eigenvalue of the block containing\n\
  *                 the j-th row/column.  This property allows ZHSEIN to\n\
  *                 perform inverse iteration on just one diagonal block.\n\
  *          = 'N': no assumptions are made on the correspondence\n\
  *                 between eigenvalues and diagonal blocks.  In this\n\
  *                 case, ZHSEIN must always perform inverse iteration\n\
  *                 using the whole matrix H.\n\
  *\n\
  *  INITV   (input) CHARACTER*1\n\
  *          = 'N': no initial vectors are supplied;\n\
  *          = 'U': user-supplied initial vectors are stored in the arrays\n\
  *                 VL and/or VR.\n\
  *\n\
  *  SELECT  (input) LOGICAL array, dimension (N)\n\
  *          Specifies the eigenvectors to be computed. To select the\n\
  *          eigenvector corresponding to the eigenvalue W(j),\n\
  *          SELECT(j) must be set to .TRUE..\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix H.  N >= 0.\n\
  *\n\
  *  H       (input) COMPLEX*16 array, dimension (LDH,N)\n\
  *          The upper Hessenberg matrix H.\n\
  *\n\
  *  LDH     (input) INTEGER\n\
  *          The leading dimension of the array H.  LDH >= max(1,N).\n\
  *\n\
  *  W       (input/output) COMPLEX*16 array, dimension (N)\n\
  *          On entry, the eigenvalues of H.\n\
  *          On exit, the real parts of W may have been altered since\n\
  *          close eigenvalues are perturbed slightly in searching for\n\
  *          independent eigenvectors.\n\
  *\n\
  *  VL      (input/output) COMPLEX*16 array, dimension (LDVL,MM)\n\
  *          On entry, if INITV = 'U' and SIDE = 'L' or 'B', VL must\n\
  *          contain starting vectors for the inverse iteration for the\n\
  *          left eigenvectors; the starting vector for each eigenvector\n\
  *          must be in the same column in which the eigenvector will be\n\
  *          stored.\n\
  *          On exit, if SIDE = 'L' or 'B', the left eigenvectors\n\
  *          specified by SELECT will be stored consecutively in the\n\
  *          columns of VL, in the same order as their eigenvalues.\n\
  *          If SIDE = 'R', VL is not referenced.\n\
  *\n\
  *  LDVL    (input) INTEGER\n\
  *          The leading dimension of the array VL.\n\
  *          LDVL >= max(1,N) if SIDE = 'L' or 'B'; LDVL >= 1 otherwise.\n\
  *\n\
  *  VR      (input/output) COMPLEX*16 array, dimension (LDVR,MM)\n\
  *          On entry, if INITV = 'U' and SIDE = 'R' or 'B', VR must\n\
  *          contain starting vectors for the inverse iteration for the\n\
  *          right eigenvectors; the starting vector for each eigenvector\n\
  *          must be in the same column in which the eigenvector will be\n\
  *          stored.\n\
  *          On exit, if SIDE = 'R' or 'B', the right eigenvectors\n\
  *          specified by SELECT will be stored consecutively in the\n\
  *          columns of VR, in the same order as their eigenvalues.\n\
  *          If SIDE = 'L', VR is not referenced.\n\
  *\n\
  *  LDVR    (input) INTEGER\n\
  *          The leading dimension of the array VR.\n\
  *          LDVR >= max(1,N) if SIDE = 'R' or 'B'; LDVR >= 1 otherwise.\n\
  *\n\
  *  MM      (input) INTEGER\n\
  *          The number of columns in the arrays VL and/or VR. MM >= M.\n\
  *\n\
  *  M       (output) INTEGER\n\
  *          The number of columns in the arrays VL and/or VR required to\n\
  *          store the eigenvectors (= the number of .TRUE. elements in\n\
  *          SELECT).\n\
  *\n\
  *  WORK    (workspace) COMPLEX*16 array, dimension (N*N)\n\
  *\n\
  *  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n\
  *\n\
  *  IFAILL  (output) INTEGER array, dimension (MM)\n\
  *          If SIDE = 'L' or 'B', IFAILL(i) = j > 0 if the left\n\
  *          eigenvector in the i-th column of VL (corresponding to the\n\
  *          eigenvalue w(j)) failed to converge; IFAILL(i) = 0 if the\n\
  *          eigenvector converged satisfactorily.\n\
  *          If SIDE = 'R', IFAILL is not referenced.\n\
  *\n\
  *  IFAILR  (output) INTEGER array, dimension (MM)\n\
  *          If SIDE = 'R' or 'B', IFAILR(i) = j > 0 if the right\n\
  *          eigenvector in the i-th column of VR (corresponding to the\n\
  *          eigenvalue w(j)) failed to converge; IFAILR(i) = 0 if the\n\
  *          eigenvector converged satisfactorily.\n\
  *          If SIDE = 'L', IFAILR is not referenced.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  if INFO = i, i is the number of eigenvectors which\n\
  *                failed to converge; see IFAILL and IFAILR for further\n\
  *                details.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Each eigenvector is normalized so that the element of largest\n\
  *  magnitude has magnitude 1; here the magnitude of a complex number\n\
  *  (x,y) is taken to be |x|+|y|.\n\
  *\n\
  *  =====================================================================\n\
  *\n"
