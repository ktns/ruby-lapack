--- 
:name: spptri
:md5sum: 43cff036bbefeae28ea091a5a1aa282e
:category: :subroutine
:arguments: 
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- ap: 
    :type: real
    :intent: input/output
    :dims: 
    - n*(n+1)/2
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE SPPTRI( UPLO, N, AP, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  SPPTRI computes the inverse of a real symmetric positive definite\n\
  *  matrix A using the Cholesky factorization A = U**T*U or A = L*L**T\n\
  *  computed by SPPTRF.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangular factor is stored in AP;\n\
  *          = 'L':  Lower triangular factor is stored in AP.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  AP      (input/output) REAL array, dimension (N*(N+1)/2)\n\
  *          On entry, the triangular factor U or L from the Cholesky\n\
  *          factorization A = U**T*U or A = L*L**T, packed columnwise as\n\
  *          a linear array.  The j-th column of U or L is stored in the\n\
  *          array AP as follows:\n\
  *          if UPLO = 'U', AP(i + (j-1)*j/2) = U(i,j) for 1<=i<=j;\n\
  *          if UPLO = 'L', AP(i + (j-1)*(2n-j)/2) = L(i,j) for j<=i<=n.\n\
  *\n\
  *          On exit, the upper or lower triangle of the (symmetric)\n\
  *          inverse of A, overwriting the input factor U or L.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  if INFO = i, the (i,i) element of the factor U or L is\n\
  *                zero, and the inverse could not be computed.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
