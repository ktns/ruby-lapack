--- 
:name: dsbgvd
:md5sum: abed2add2591a833e7d03dc10381944d
:category: :subroutine
:arguments: 
- jobz: 
    :type: char
    :intent: input
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- ka: 
    :type: integer
    :intent: input
- kb: 
    :type: integer
    :intent: input
- ab: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - ldab
    - n
- ldab: 
    :type: integer
    :intent: input
- bb: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - ldbb
    - n
- ldbb: 
    :type: integer
    :intent: input
- w: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- z: 
    :type: doublereal
    :intent: output
    :dims: 
    - ldz
    - n
- ldz: 
    :type: integer
    :intent: input
- work: 
    :type: doublereal
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
- iwork: 
    :type: integer
    :intent: output
    :dims: 
    - MAX(1,liwork)
- liwork: 
    :type: integer
    :intent: input
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldz: "lsame_(&jobz,\"V\") ? MAX(1,n) : 1"
:fortran_help: "      SUBROUTINE DSBGVD( JOBZ, UPLO, N, KA, KB, AB, LDAB, BB, LDBB, W, Z, LDZ, WORK, LWORK, IWORK, LIWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DSBGVD computes all the eigenvalues, and optionally, the eigenvectors\n\
  *  of a real generalized symmetric-definite banded eigenproblem, of the\n\
  *  form A*x=(lambda)*B*x.  Here A and B are assumed to be symmetric and\n\
  *  banded, and B is also positive definite.  If eigenvectors are\n\
  *  desired, it uses a divide and conquer algorithm.\n\
  *\n\
  *  The divide and conquer algorithm makes very mild assumptions about\n\
  *  floating point arithmetic. It will work on machines with a guard\n\
  *  digit in add/subtract, or on those binary machines without guard\n\
  *  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n\
  *  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n\
  *  without guard digits, but we know of none.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  JOBZ    (input) CHARACTER*1\n\
  *          = 'N':  Compute eigenvalues only;\n\
  *          = 'V':  Compute eigenvalues and eigenvectors.\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangles of A and B are stored;\n\
  *          = 'L':  Lower triangles of A and B are stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrices A and B.  N >= 0.\n\
  *\n\
  *  KA      (input) INTEGER\n\
  *          The number of superdiagonals of the matrix A if UPLO = 'U',\n\
  *          or the number of subdiagonals if UPLO = 'L'.  KA >= 0.\n\
  *\n\
  *  KB      (input) INTEGER\n\
  *          The number of superdiagonals of the matrix B if UPLO = 'U',\n\
  *          or the number of subdiagonals if UPLO = 'L'.  KB >= 0.\n\
  *\n\
  *  AB      (input/output) DOUBLE PRECISION array, dimension (LDAB, N)\n\
  *          On entry, the upper or lower triangle of the symmetric band\n\
  *          matrix A, stored in the first ka+1 rows of the array.  The\n\
  *          j-th column of A is stored in the j-th column of the array AB\n\
  *          as follows:\n\
  *          if UPLO = 'U', AB(ka+1+i-j,j) = A(i,j) for max(1,j-ka)<=i<=j;\n\
  *          if UPLO = 'L', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+ka).\n\
  *\n\
  *          On exit, the contents of AB are destroyed.\n\
  *\n\
  *  LDAB    (input) INTEGER\n\
  *          The leading dimension of the array AB.  LDAB >= KA+1.\n\
  *\n\
  *  BB      (input/output) DOUBLE PRECISION array, dimension (LDBB, N)\n\
  *          On entry, the upper or lower triangle of the symmetric band\n\
  *          matrix B, stored in the first kb+1 rows of the array.  The\n\
  *          j-th column of B is stored in the j-th column of the array BB\n\
  *          as follows:\n\
  *          if UPLO = 'U', BB(ka+1+i-j,j) = B(i,j) for max(1,j-kb)<=i<=j;\n\
  *          if UPLO = 'L', BB(1+i-j,j)    = B(i,j) for j<=i<=min(n,j+kb).\n\
  *\n\
  *          On exit, the factor S from the split Cholesky factorization\n\
  *          B = S**T*S, as returned by DPBSTF.\n\
  *\n\
  *  LDBB    (input) INTEGER\n\
  *          The leading dimension of the array BB.  LDBB >= KB+1.\n\
  *\n\
  *  W       (output) DOUBLE PRECISION array, dimension (N)\n\
  *          If INFO = 0, the eigenvalues in ascending order.\n\
  *\n\
  *  Z       (output) DOUBLE PRECISION array, dimension (LDZ, N)\n\
  *          If JOBZ = 'V', then if INFO = 0, Z contains the matrix Z of\n\
  *          eigenvectors, with the i-th column of Z holding the\n\
  *          eigenvector associated with W(i).  The eigenvectors are\n\
  *          normalized so Z**T*B*Z = I.\n\
  *          If JOBZ = 'N', then Z is not referenced.\n\
  *\n\
  *  LDZ     (input) INTEGER\n\
  *          The leading dimension of the array Z.  LDZ >= 1, and if\n\
  *          JOBZ = 'V', LDZ >= max(1,N).\n\
  *\n\
  *  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.\n\
  *          If N <= 1,               LWORK >= 1.\n\
  *          If JOBZ = 'N' and N > 1, LWORK >= 3*N.\n\
  *          If JOBZ = 'V' and N > 1, LWORK >= 1 + 5*N + 2*N**2.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal sizes of the WORK and IWORK\n\
  *          arrays, returns these values as the first entries of the WORK\n\
  *          and IWORK arrays, and no error message related to LWORK or\n\
  *          LIWORK is issued by XERBLA.\n\
  *\n\
  *  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n\
  *          On exit, if LIWORK > 0, IWORK(1) returns the optimal LIWORK.\n\
  *\n\
  *  LIWORK  (input) INTEGER\n\
  *          The dimension of the array IWORK.\n\
  *          If JOBZ  = 'N' or N <= 1, LIWORK >= 1.\n\
  *          If JOBZ  = 'V' and N > 1, LIWORK >= 3 + 5*N.\n\
  *\n\
  *          If LIWORK = -1, then a workspace query is assumed; the\n\
  *          routine only calculates the optimal sizes of the WORK and\n\
  *          IWORK arrays, returns these values as the first entries of\n\
  *          the WORK and IWORK arrays, and no error message related to\n\
  *          LWORK or LIWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  if INFO = i, and i is:\n\
  *             <= N:  the algorithm failed to converge:\n\
  *                    i off-diagonal elements of an intermediate\n\
  *                    tridiagonal form did not converge to zero;\n\
  *             > N:   if INFO = N + i, for 1 <= i <= N, then DPBSTF\n\
  *                    returned INFO = i: B is not positive definite.\n\
  *                    The factorization of B could not be completed and\n\
  *                    no eigenvalues or eigenvectors were computed.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Mark Fahey, Department of Mathematics, Univ. of Kentucky, USA\n\
  *\n\
  *  =====================================================================\n\
  *\n"
