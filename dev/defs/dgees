--- 
:name: dgees
:md5sum: 6e68756fb1b8fae3f71e2cb0f98b4115
:category: :subroutine
:arguments: 
- jobvs: 
    :type: char
    :intent: input
- sort: 
    :type: char
    :intent: input
- select: 
    :intent: external procedure
    :block_type: logical
    :block_arg_num: 2
    :block_arg_type: doublereal
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- sdim: 
    :type: integer
    :intent: output
- wr: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- wi: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- vs: 
    :type: doublereal
    :intent: output
    :dims: 
    - ldvs
    - n
- ldvs: 
    :type: integer
    :intent: input
- work: 
    :type: doublereal
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
- bwork: 
    :type: logical
    :intent: workspace
    :dims: 
    - "lsame_(&sort,\"N\") ? 0 : n"
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldvs: "lsame_(&jobvs,\"V\") ? n : 1"
:fortran_help: "      SUBROUTINE DGEES( JOBVS, SORT, SELECT, N, A, LDA, SDIM, WR, WI, VS, LDVS, WORK, LWORK, BWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DGEES computes for an N-by-N real nonsymmetric matrix A, the\n\
  *  eigenvalues, the real Schur form T, and, optionally, the matrix of\n\
  *  Schur vectors Z.  This gives the Schur factorization A = Z*T*(Z**T).\n\
  *\n\
  *  Optionally, it also orders the eigenvalues on the diagonal of the\n\
  *  real Schur form so that selected eigenvalues are at the top left.\n\
  *  The leading columns of Z then form an orthonormal basis for the\n\
  *  invariant subspace corresponding to the selected eigenvalues.\n\
  *\n\
  *  A matrix is in real Schur form if it is upper quasi-triangular with\n\
  *  1-by-1 and 2-by-2 blocks. 2-by-2 blocks will be standardized in the\n\
  *  form\n\
  *          [  a  b  ]\n\
  *          [  c  a  ]\n\
  *\n\
  *  where b*c < 0. The eigenvalues of such a block are a +- sqrt(bc).\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  JOBVS   (input) CHARACTER*1\n\
  *          = 'N': Schur vectors are not computed;\n\
  *          = 'V': Schur vectors are computed.\n\
  *\n\
  *  SORT    (input) CHARACTER*1\n\
  *          Specifies whether or not to order the eigenvalues on the\n\
  *          diagonal of the Schur form.\n\
  *          = 'N': Eigenvalues are not ordered;\n\
  *          = 'S': Eigenvalues are ordered (see SELECT).\n\
  *\n\
  *  SELECT  (external procedure) LOGICAL FUNCTION of two DOUBLE PRECISION arguments\n\
  *          SELECT must be declared EXTERNAL in the calling subroutine.\n\
  *          If SORT = 'S', SELECT is used to select eigenvalues to sort\n\
  *          to the top left of the Schur form.\n\
  *          If SORT = 'N', SELECT is not referenced.\n\
  *          An eigenvalue WR(j)+sqrt(-1)*WI(j) is selected if\n\
  *          SELECT(WR(j),WI(j)) is true; i.e., if either one of a complex\n\
  *          conjugate pair of eigenvalues is selected, then both complex\n\
  *          eigenvalues are selected.\n\
  *          Note that a selected complex eigenvalue may no longer\n\
  *          satisfy SELECT(WR(j),WI(j)) = .TRUE. after ordering, since\n\
  *          ordering may change the value of complex eigenvalues\n\
  *          (especially if the eigenvalue is ill-conditioned); in this\n\
  *          case INFO is set to N+2 (see INFO below).\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A. N >= 0.\n\
  *\n\
  *  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n\
  *          On entry, the N-by-N matrix A.\n\
  *          On exit, A has been overwritten by its real Schur form T.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  SDIM    (output) INTEGER\n\
  *          If SORT = 'N', SDIM = 0.\n\
  *          If SORT = 'S', SDIM = number of eigenvalues (after sorting)\n\
  *                         for which SELECT is true. (Complex conjugate\n\
  *                         pairs for which SELECT is true for either\n\
  *                         eigenvalue count as 2.)\n\
  *\n\
  *  WR      (output) DOUBLE PRECISION array, dimension (N)\n\
  *  WI      (output) DOUBLE PRECISION array, dimension (N)\n\
  *          WR and WI contain the real and imaginary parts,\n\
  *          respectively, of the computed eigenvalues in the same order\n\
  *          that they appear on the diagonal of the output Schur form T.\n\
  *          Complex conjugate pairs of eigenvalues will appear\n\
  *          consecutively with the eigenvalue having the positive\n\
  *          imaginary part first.\n\
  *\n\
  *  VS      (output) DOUBLE PRECISION array, dimension (LDVS,N)\n\
  *          If JOBVS = 'V', VS contains the orthogonal matrix Z of Schur\n\
  *          vectors.\n\
  *          If JOBVS = 'N', VS is not referenced.\n\
  *\n\
  *  LDVS    (input) INTEGER\n\
  *          The leading dimension of the array VS.  LDVS >= 1; if\n\
  *          JOBVS = 'V', LDVS >= N.\n\
  *\n\
  *  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) contains the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.  LWORK >= max(1,3*N).\n\
  *          For good performance, LWORK must generally be larger.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  BWORK   (workspace) LOGICAL array, dimension (N)\n\
  *          Not referenced if SORT = 'N'.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0: successful exit\n\
  *          < 0: if INFO = -i, the i-th argument had an illegal value.\n\
  *          > 0: if INFO = i, and i is\n\
  *             <= N: the QR algorithm failed to compute all the\n\
  *                   eigenvalues; elements 1:ILO-1 and i+1:N of WR and WI\n\
  *                   contain those eigenvalues which have converged; if\n\
  *                   JOBVS = 'V', VS contains the matrix which reduces A\n\
  *                   to its partially converged Schur form.\n\
  *             = N+1: the eigenvalues could not be reordered because some\n\
  *                   eigenvalues were too close to separate (the problem\n\
  *                   is very ill-conditioned);\n\
  *             = N+2: after reordering, roundoff changed values of some\n\
  *                   complex eigenvalues so that leading eigenvalues in\n\
  *                   the Schur form no longer satisfy SELECT=.TRUE.  This\n\
  *                   could also be caused by underflow due to scaling.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
