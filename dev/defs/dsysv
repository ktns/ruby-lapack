--- 
:name: dsysv
:md5sum: ad88b5f290f6f6d3c3471e0ea1db7839
:category: :subroutine
:arguments: 
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- nrhs: 
    :type: integer
    :intent: input
- a: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- ipiv: 
    :type: integer
    :intent: output
    :dims: 
    - n
- b: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - ldb
    - nrhs
- ldb: 
    :type: integer
    :intent: input
- work: 
    :type: doublereal
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
    :option: true
    :default: n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE DSYSV( UPLO, N, NRHS, A, LDA, IPIV, B, LDB, WORK, LWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DSYSV computes the solution to a real system of linear equations\n\
  *     A * X = B,\n\
  *  where A is an N-by-N symmetric matrix and X and B are N-by-NRHS\n\
  *  matrices.\n\
  *\n\
  *  The diagonal pivoting method is used to factor A as\n\
  *     A = U * D * U**T,  if UPLO = 'U', or\n\
  *     A = L * D * L**T,  if UPLO = 'L',\n\
  *  where U (or L) is a product of permutation and unit upper (lower)\n\
  *  triangular matrices, and D is symmetric and block diagonal with\n\
  *  1-by-1 and 2-by-2 diagonal blocks.  The factored form of A is then\n\
  *  used to solve the system of equations A * X = B.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangle of A is stored;\n\
  *          = 'L':  Lower triangle of A is stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of linear equations, i.e., the order of the\n\
  *          matrix A.  N >= 0.\n\
  *\n\
  *  NRHS    (input) INTEGER\n\
  *          The number of right hand sides, i.e., the number of columns\n\
  *          of the matrix B.  NRHS >= 0.\n\
  *\n\
  *  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n\
  *          On entry, the symmetric matrix A.  If UPLO = 'U', the leading\n\
  *          N-by-N upper triangular part of A contains the upper\n\
  *          triangular part of the matrix A, and the strictly lower\n\
  *          triangular part of A is not referenced.  If UPLO = 'L', the\n\
  *          leading N-by-N lower triangular part of A contains the lower\n\
  *          triangular part of the matrix A, and the strictly upper\n\
  *          triangular part of A is not referenced.\n\
  *\n\
  *          On exit, if INFO = 0, the block diagonal matrix D and the\n\
  *          multipliers used to obtain the factor U or L from the\n\
  *          factorization A = U*D*U**T or A = L*D*L**T as computed by\n\
  *          DSYTRF.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  IPIV    (output) INTEGER array, dimension (N)\n\
  *          Details of the interchanges and the block structure of D, as\n\
  *          determined by DSYTRF.  If IPIV(k) > 0, then rows and columns\n\
  *          k and IPIV(k) were interchanged, and D(k,k) is a 1-by-1\n\
  *          diagonal block.  If UPLO = 'U' and IPIV(k) = IPIV(k-1) < 0,\n\
  *          then rows and columns k-1 and -IPIV(k) were interchanged and\n\
  *          D(k-1:k,k-1:k) is a 2-by-2 diagonal block.  If UPLO = 'L' and\n\
  *          IPIV(k) = IPIV(k+1) < 0, then rows and columns k+1 and\n\
  *          -IPIV(k) were interchanged and D(k:k+1,k:k+1) is a 2-by-2\n\
  *          diagonal block.\n\
  *\n\
  *  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n\
  *          On entry, the N-by-NRHS right hand side matrix B.\n\
  *          On exit, if INFO = 0, the N-by-NRHS solution matrix X.\n\
  *\n\
  *  LDB     (input) INTEGER\n\
  *          The leading dimension of the array B.  LDB >= max(1,N).\n\
  *\n\
  *  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The length of WORK.  LWORK >= 1, and for best performance\n\
  *          LWORK >= max(1,N*NB), where NB is the optimal blocksize for\n\
  *          DSYTRF.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0: successful exit\n\
  *          < 0: if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0: if INFO = i, D(i,i) is exactly zero.  The factorization\n\
  *               has been completed, but the block diagonal matrix D is\n\
  *               exactly singular, so the solution could not be computed.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n\
  *     .. Local Scalars ..\n      LOGICAL            LQUERY\n      INTEGER            LWKOPT, NB\n\
  *     ..\n\
  *     .. External Functions ..\n      LOGICAL            LSAME\n      INTEGER            ILAENV\n      EXTERNAL           LSAME, ILAENV\n\
  *     ..\n\
  *     .. External Subroutines ..\n      EXTERNAL           DSYTRF, DSYTRS2, XERBLA\n\
  *     ..\n\
  *     .. Intrinsic Functions ..\n      INTRINSIC          MAX\n\
  *     ..\n"
