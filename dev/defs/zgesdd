--- 
:name: zgesdd
:md5sum: 0d191901adb7622e92d1f0b2dc6c8138
:category: :subroutine
:arguments: 
- jobz: 
    :type: char
    :intent: input
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- s: 
    :type: doublereal
    :intent: output
    :dims: 
    - MIN(m,n)
- u: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - ldu
    - ucol
- ldu: 
    :type: integer
    :intent: input
- vt: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - ldvt
    - n
- ldvt: 
    :type: integer
    :intent: input
- work: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "lsame_(&jobz,\"N\") ? 2*MIN(m,n)+MAX(m,n) : lsame_(&jobz,\"O\") ? 2*MIN(m,n)*MIN(m,n)+2*MIN(m,n)+MAX(m,n) : (lsame_(&jobz,\"S\")||lsame_(&jobz,\"A\")) ? MIN(m,n)*MIN(m,n)+2*MIN(m,n)+MAX(m,n) : 0"
- rwork: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - "MAX(1, (lsame_(&jobz,\"N\") ? 5*MIN(m,n) : MIN(m,n)*MAX(5*MIN(m,n)+7,2*MAX(m,n)+2*MIN(m,n)+1)))"
- iwork: 
    :type: integer
    :intent: workspace
    :dims: 
    - 8*MIN(m,n)
- info: 
    :type: integer
    :intent: output
:substitutions: 
  m: lda
  ucol: "((lsame_(&jobz,\"A\")) || (((lsame_(&jobz,\"O\")) && (m < n)))) ? m : lsame_(&jobz,\"S\") ? MIN(m,n) : 0"
  ldvt: "((lsame_(&jobz,\"A\")) || (((lsame_(&jobz,\"O\")) && (m >= n)))) ? n : lsame_(&jobz,\"S\") ? MIN(m,n) : 1"
  ldu: "(lsame_(&jobz,\"S\") || lsame_(&jobz,\"A\") || (lsame_(&jobz,\"O\") && m < n)) ? m : 1"
:fortran_help: "      SUBROUTINE ZGESDD( JOBZ, M, N, A, LDA, S, U, LDU, VT, LDVT, WORK, LWORK, RWORK, IWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZGESDD computes the singular value decomposition (SVD) of a complex\n\
  *  M-by-N matrix A, optionally computing the left and/or right singular\n\
  *  vectors, by using divide-and-conquer method. The SVD is written\n\
  *\n\
  *       A = U * SIGMA * conjugate-transpose(V)\n\
  *\n\
  *  where SIGMA is an M-by-N matrix which is zero except for its\n\
  *  min(m,n) diagonal elements, U is an M-by-M unitary matrix, and\n\
  *  V is an N-by-N unitary matrix.  The diagonal elements of SIGMA\n\
  *  are the singular values of A; they are real and non-negative, and\n\
  *  are returned in descending order.  The first min(m,n) columns of\n\
  *  U and V are the left and right singular vectors of A.\n\
  *\n\
  *  Note that the routine returns VT = V**H, not V.\n\
  *\n\
  *  The divide and conquer algorithm makes very mild assumptions about\n\
  *  floating point arithmetic. It will work on machines with a guard\n\
  *  digit in add/subtract, or on those binary machines without guard\n\
  *  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n\
  *  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n\
  *  without guard digits, but we know of none.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  JOBZ    (input) CHARACTER*1\n\
  *          Specifies options for computing all or part of the matrix U:\n\
  *          = 'A':  all M columns of U and all N rows of V**H are\n\
  *                  returned in the arrays U and VT;\n\
  *          = 'S':  the first min(M,N) columns of U and the first\n\
  *                  min(M,N) rows of V**H are returned in the arrays U\n\
  *                  and VT;\n\
  *          = 'O':  If M >= N, the first N columns of U are overwritten\n\
  *                  in the array A and all rows of V**H are returned in\n\
  *                  the array VT;\n\
  *                  otherwise, all columns of U are returned in the\n\
  *                  array U and the first M rows of V**H are overwritten\n\
  *                  in the array A;\n\
  *          = 'N':  no columns of U or rows of V**H are computed.\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The number of rows of the input matrix A.  M >= 0.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of columns of the input matrix A.  N >= 0.\n\
  *\n\
  *  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n\
  *          On entry, the M-by-N matrix A.\n\
  *          On exit,\n\
  *          if JOBZ = 'O',  A is overwritten with the first N columns\n\
  *                          of U (the left singular vectors, stored\n\
  *                          columnwise) if M >= N;\n\
  *                          A is overwritten with the first M rows\n\
  *                          of V**H (the right singular vectors, stored\n\
  *                          rowwise) otherwise.\n\
  *          if JOBZ .ne. 'O', the contents of A are destroyed.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,M).\n\
  *\n\
  *  S       (output) DOUBLE PRECISION array, dimension (min(M,N))\n\
  *          The singular values of A, sorted so that S(i) >= S(i+1).\n\
  *\n\
  *  U       (output) COMPLEX*16 array, dimension (LDU,UCOL)\n\
  *          UCOL = M if JOBZ = 'A' or JOBZ = 'O' and M < N;\n\
  *          UCOL = min(M,N) if JOBZ = 'S'.\n\
  *          If JOBZ = 'A' or JOBZ = 'O' and M < N, U contains the M-by-M\n\
  *          unitary matrix U;\n\
  *          if JOBZ = 'S', U contains the first min(M,N) columns of U\n\
  *          (the left singular vectors, stored columnwise);\n\
  *          if JOBZ = 'O' and M >= N, or JOBZ = 'N', U is not referenced.\n\
  *\n\
  *  LDU     (input) INTEGER\n\
  *          The leading dimension of the array U.  LDU >= 1; if\n\
  *          JOBZ = 'S' or 'A' or JOBZ = 'O' and M < N, LDU >= M.\n\
  *\n\
  *  VT      (output) COMPLEX*16 array, dimension (LDVT,N)\n\
  *          If JOBZ = 'A' or JOBZ = 'O' and M >= N, VT contains the\n\
  *          N-by-N unitary matrix V**H;\n\
  *          if JOBZ = 'S', VT contains the first min(M,N) rows of\n\
  *          V**H (the right singular vectors, stored rowwise);\n\
  *          if JOBZ = 'O' and M < N, or JOBZ = 'N', VT is not referenced.\n\
  *\n\
  *  LDVT    (input) INTEGER\n\
  *          The leading dimension of the array VT.  LDVT >= 1; if\n\
  *          JOBZ = 'A' or JOBZ = 'O' and M >= N, LDVT >= N;\n\
  *          if JOBZ = 'S', LDVT >= min(M,N).\n\
  *\n\
  *  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK. LWORK >= 1.\n\
  *          if JOBZ = 'N', LWORK >= 2*min(M,N)+max(M,N).\n\
  *          if JOBZ = 'O',\n\
  *                LWORK >= 2*min(M,N)*min(M,N)+2*min(M,N)+max(M,N).\n\
  *          if JOBZ = 'S' or 'A',\n\
  *                LWORK >= min(M,N)*min(M,N)+2*min(M,N)+max(M,N).\n\
  *          For good performance, LWORK should generally be larger.\n\
  *\n\
  *          If LWORK = -1, a workspace query is assumed.  The optimal\n\
  *          size for the WORK array is calculated and stored in WORK(1),\n\
  *          and no other work except argument checking is performed.\n\
  *\n\
  *  RWORK   (workspace) DOUBLE PRECISION array, dimension (MAX(1,LRWORK))\n\
  *          If JOBZ = 'N', LRWORK >= 5*min(M,N).\n\
  *          Otherwise,\n\
  *          LRWORK >= min(M,N)*max(5*min(M,N)+7,2*max(M,N)+2*min(M,N)+1)\n\
  *\n\
  *  IWORK   (workspace) INTEGER array, dimension (8*min(M,N))\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit.\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value.\n\
  *          > 0:  The updating process of DBDSDC did not converge.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Ming Gu and Huan Ren, Computer Science Division, University of\n\
  *     California at Berkeley, USA\n\
  *\n\
  *  =====================================================================\n\
  *\n"
