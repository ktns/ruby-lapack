--- 
:name: zgebrd
:md5sum: faeeaf701bfb70e79e0723c0b655fa1a
:category: :subroutine
:arguments: 
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- d: 
    :type: doublereal
    :intent: output
    :dims: 
    - MIN(m,n)
- e: 
    :type: doublereal
    :intent: output
    :dims: 
    - MIN(m,n)-1
- tauq: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - MIN(m,n)
- taup: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - MIN(m,n)
- work: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
    :option: true
    :default: MAX(m,n)
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZGEBRD( M, N, A, LDA, D, E, TAUQ, TAUP, WORK, LWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZGEBRD reduces a general complex M-by-N matrix A to upper or lower\n\
  *  bidiagonal form B by a unitary transformation: Q**H * A * P = B.\n\
  *\n\
  *  If m >= n, B is upper bidiagonal; if m < n, B is lower bidiagonal.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The number of rows in the matrix A.  M >= 0.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of columns in the matrix A.  N >= 0.\n\
  *\n\
  *  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n\
  *          On entry, the M-by-N general matrix to be reduced.\n\
  *          On exit,\n\
  *          if m >= n, the diagonal and the first superdiagonal are\n\
  *            overwritten with the upper bidiagonal matrix B; the\n\
  *            elements below the diagonal, with the array TAUQ, represent\n\
  *            the unitary matrix Q as a product of elementary\n\
  *            reflectors, and the elements above the first superdiagonal,\n\
  *            with the array TAUP, represent the unitary matrix P as\n\
  *            a product of elementary reflectors;\n\
  *          if m < n, the diagonal and the first subdiagonal are\n\
  *            overwritten with the lower bidiagonal matrix B; the\n\
  *            elements below the first subdiagonal, with the array TAUQ,\n\
  *            represent the unitary matrix Q as a product of\n\
  *            elementary reflectors, and the elements above the diagonal,\n\
  *            with the array TAUP, represent the unitary matrix P as\n\
  *            a product of elementary reflectors.\n\
  *          See Further Details.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,M).\n\
  *\n\
  *  D       (output) DOUBLE PRECISION array, dimension (min(M,N))\n\
  *          The diagonal elements of the bidiagonal matrix B:\n\
  *          D(i) = A(i,i).\n\
  *\n\
  *  E       (output) DOUBLE PRECISION array, dimension (min(M,N)-1)\n\
  *          The off-diagonal elements of the bidiagonal matrix B:\n\
  *          if m >= n, E(i) = A(i,i+1) for i = 1,2,...,n-1;\n\
  *          if m < n, E(i) = A(i+1,i) for i = 1,2,...,m-1.\n\
  *\n\
  *  TAUQ    (output) COMPLEX*16 array dimension (min(M,N))\n\
  *          The scalar factors of the elementary reflectors which\n\
  *          represent the unitary matrix Q. See Further Details.\n\
  *\n\
  *  TAUP    (output) COMPLEX*16 array, dimension (min(M,N))\n\
  *          The scalar factors of the elementary reflectors which\n\
  *          represent the unitary matrix P. See Further Details.\n\
  *\n\
  *  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The length of the array WORK.  LWORK >= max(1,M,N).\n\
  *          For optimum performance LWORK >= (M+N)*NB, where NB\n\
  *          is the optimal blocksize.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit.\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  The matrices Q and P are represented as products of elementary\n\
  *  reflectors:\n\
  *\n\
  *  If m >= n,\n\
  *\n\
  *     Q = H(1) H(2) . . . H(n)  and  P = G(1) G(2) . . . G(n-1)\n\
  *\n\
  *  Each H(i) and G(i) has the form:\n\
  *\n\
  *     H(i) = I - tauq * v * v'  and G(i) = I - taup * u * u'\n\
  *\n\
  *  where tauq and taup are complex scalars, and v and u are complex\n\
  *  vectors; v(1:i-1) = 0, v(i) = 1, and v(i+1:m) is stored on exit in\n\
  *  A(i+1:m,i); u(1:i) = 0, u(i+1) = 1, and u(i+2:n) is stored on exit in\n\
  *  A(i,i+2:n); tauq is stored in TAUQ(i) and taup in TAUP(i).\n\
  *\n\
  *  If m < n,\n\
  *\n\
  *     Q = H(1) H(2) . . . H(m-1)  and  P = G(1) G(2) . . . G(m)\n\
  *\n\
  *  Each H(i) and G(i) has the form:\n\
  *\n\
  *     H(i) = I - tauq * v * v'  and G(i) = I - taup * u * u'\n\
  *\n\
  *  where tauq and taup are complex scalars, and v and u are complex\n\
  *  vectors; v(1:i) = 0, v(i+1) = 1, and v(i+2:m) is stored on exit in\n\
  *  A(i+2:m,i); u(1:i-1) = 0, u(i) = 1, and u(i+1:n) is stored on exit in\n\
  *  A(i,i+1:n); tauq is stored in TAUQ(i) and taup in TAUP(i).\n\
  *\n\
  *  The contents of A on exit are illustrated by the following examples:\n\
  *\n\
  *  m = 6 and n = 5 (m > n):          m = 5 and n = 6 (m < n):\n\
  *\n\
  *    (  d   e   u1  u1  u1 )           (  d   u1  u1  u1  u1  u1 )\n\
  *    (  v1  d   e   u2  u2 )           (  e   d   u2  u2  u2  u2 )\n\
  *    (  v1  v2  d   e   u3 )           (  v1  e   d   u3  u3  u3 )\n\
  *    (  v1  v2  v3  d   e  )           (  v1  v2  e   d   u4  u4 )\n\
  *    (  v1  v2  v3  v4  d  )           (  v1  v2  v3  e   d   u5 )\n\
  *    (  v1  v2  v3  v4  v5 )\n\
  *\n\
  *  where d and e denote diagonal and off-diagonal elements of B, vi\n\
  *  denotes an element of the vector defining H(i), and ui an element of\n\
  *  the vector defining G(i).\n\
  *\n\
  *  =====================================================================\n\
  *\n"
