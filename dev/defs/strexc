--- 
:name: strexc
:md5sum: a068be55bb498b1fa71d32054496ba06
:category: :subroutine
:arguments: 
- compq: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- t: 
    :type: real
    :intent: input/output
    :dims: 
    - ldt
    - n
- ldt: 
    :type: integer
    :intent: input
- q: 
    :type: real
    :intent: input/output
    :dims: 
    - ldq
    - n
- ldq: 
    :type: integer
    :intent: input
- ifst: 
    :type: integer
    :intent: input/output
- ilst: 
    :type: integer
    :intent: input/output
- work: 
    :type: real
    :intent: workspace
    :dims: 
    - n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE STREXC( COMPQ, N, T, LDT, Q, LDQ, IFST, ILST, WORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  STREXC reorders the real Schur factorization of a real matrix\n\
  *  A = Q*T*Q**T, so that the diagonal block of T with row index IFST is\n\
  *  moved to row ILST.\n\
  *\n\
  *  The real Schur form T is reordered by an orthogonal similarity\n\
  *  transformation Z**T*T*Z, and optionally the matrix Q of Schur vectors\n\
  *  is updated by postmultiplying it with Z.\n\
  *\n\
  *  T must be in Schur canonical form (as returned by SHSEQR), that is,\n\
  *  block upper triangular with 1-by-1 and 2-by-2 diagonal blocks; each\n\
  *  2-by-2 diagonal block has its diagonal elements equal and its\n\
  *  off-diagonal elements of opposite sign.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  COMPQ   (input) CHARACTER*1\n\
  *          = 'V':  update the matrix Q of Schur vectors;\n\
  *          = 'N':  do not update Q.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix T. N >= 0.\n\
  *\n\
  *  T       (input/output) REAL array, dimension (LDT,N)\n\
  *          On entry, the upper quasi-triangular matrix T, in Schur\n\
  *          Schur canonical form.\n\
  *          On exit, the reordered upper quasi-triangular matrix, again\n\
  *          in Schur canonical form.\n\
  *\n\
  *  LDT     (input) INTEGER\n\
  *          The leading dimension of the array T. LDT >= max(1,N).\n\
  *\n\
  *  Q       (input/output) REAL array, dimension (LDQ,N)\n\
  *          On entry, if COMPQ = 'V', the matrix Q of Schur vectors.\n\
  *          On exit, if COMPQ = 'V', Q has been postmultiplied by the\n\
  *          orthogonal transformation matrix Z which reorders T.\n\
  *          If COMPQ = 'N', Q is not referenced.\n\
  *\n\
  *  LDQ     (input) INTEGER\n\
  *          The leading dimension of the array Q.  LDQ >= max(1,N).\n\
  *\n\
  *  IFST    (input/output) INTEGER\n\
  *  ILST    (input/output) INTEGER\n\
  *          Specify the reordering of the diagonal blocks of T.\n\
  *          The block with row index IFST is moved to row ILST, by a\n\
  *          sequence of transpositions between adjacent blocks.\n\
  *          On exit, if IFST pointed on entry to the second row of a\n\
  *          2-by-2 block, it is changed to point to the first row; ILST\n\
  *          always points to the first row of the block in its final\n\
  *          position (which may differ from its input value by +1 or -1).\n\
  *          1 <= IFST <= N; 1 <= ILST <= N.\n\
  *\n\
  *  WORK    (workspace) REAL array, dimension (N)\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          = 1:  two adjacent blocks were too close to swap (the problem\n\
  *                is very ill-conditioned); T may have been partially\n\
  *                reordered, and ILST points to the first row of the\n\
  *                current position of the block being moved.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
