--- 
:name: dormrq
:md5sum: 076a38b2e29790a32e3e67694f2b9668
:category: :subroutine
:arguments: 
- side: 
    :type: char
    :intent: input
- trans: 
    :type: char
    :intent: input
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- k: 
    :type: integer
    :intent: input
- a: 
    :type: doublereal
    :intent: input
    :dims: 
    - lda
    - m
- lda: 
    :type: integer
    :intent: input
- tau: 
    :type: doublereal
    :intent: input
    :dims: 
    - k
- c: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - ldc
    - n
- ldc: 
    :type: integer
    :intent: input
- work: 
    :type: doublereal
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE DORMRQ( SIDE, TRANS, M, N, K, A, LDA, TAU, C, LDC, WORK, LWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DORMRQ overwrites the general real M-by-N matrix C with\n\
  *\n\
  *                  SIDE = 'L'     SIDE = 'R'\n\
  *  TRANS = 'N':      Q * C          C * Q\n\
  *  TRANS = 'T':      Q**T * C       C * Q**T\n\
  *\n\
  *  where Q is a real orthogonal matrix defined as the product of k\n\
  *  elementary reflectors\n\
  *\n\
  *        Q = H(1) H(2) . . . H(k)\n\
  *\n\
  *  as returned by DGERQF. Q is of order M if SIDE = 'L' and of order N\n\
  *  if SIDE = 'R'.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  SIDE    (input) CHARACTER*1\n\
  *          = 'L': apply Q or Q**T from the Left;\n\
  *          = 'R': apply Q or Q**T from the Right.\n\
  *\n\
  *  TRANS   (input) CHARACTER*1\n\
  *          = 'N':  No transpose, apply Q;\n\
  *          = 'T':  Transpose, apply Q**T.\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The number of rows of the matrix C. M >= 0.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of columns of the matrix C. N >= 0.\n\
  *\n\
  *  K       (input) INTEGER\n\
  *          The number of elementary reflectors whose product defines\n\
  *          the matrix Q.\n\
  *          If SIDE = 'L', M >= K >= 0;\n\
  *          if SIDE = 'R', N >= K >= 0.\n\
  *\n\
  *  A       (input) DOUBLE PRECISION array, dimension\n\
  *                               (LDA,M) if SIDE = 'L',\n\
  *                               (LDA,N) if SIDE = 'R'\n\
  *          The i-th row must contain the vector which defines the\n\
  *          elementary reflector H(i), for i = 1,2,...,k, as returned by\n\
  *          DGERQF in the last k rows of its array argument A.\n\
  *          A is modified by the routine but restored on exit.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A. LDA >= max(1,K).\n\
  *\n\
  *  TAU     (input) DOUBLE PRECISION array, dimension (K)\n\
  *          TAU(i) must contain the scalar factor of the elementary\n\
  *          reflector H(i), as returned by DGERQF.\n\
  *\n\
  *  C       (input/output) DOUBLE PRECISION array, dimension (LDC,N)\n\
  *          On entry, the M-by-N matrix C.\n\
  *          On exit, C is overwritten by Q*C or Q**T*C or C*Q**T or C*Q.\n\
  *\n\
  *  LDC     (input) INTEGER\n\
  *          The leading dimension of the array C. LDC >= max(1,M).\n\
  *\n\
  *  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.\n\
  *          If SIDE = 'L', LWORK >= max(1,N);\n\
  *          if SIDE = 'R', LWORK >= max(1,M).\n\
  *          For optimum performance LWORK >= N*NB if SIDE = 'L', and\n\
  *          LWORK >= M*NB if SIDE = 'R', where NB is the optimal\n\
  *          blocksize.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
