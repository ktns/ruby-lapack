--- 
:name: ztrevc
:md5sum: ec49fff50379686734c9e1b3cd5bcaad
:category: :subroutine
:arguments: 
- side: 
    :type: char
    :intent: input
- howmny: 
    :type: char
    :intent: input
- select: 
    :type: logical
    :intent: input
    :dims: 
    - n
- n: 
    :type: integer
    :intent: input
- t: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - ldt
    - n
- ldt: 
    :type: integer
    :intent: input
- vl: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - ldvl
    - mm
- ldvl: 
    :type: integer
    :intent: input
- vr: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - ldvr
    - mm
- ldvr: 
    :type: integer
    :intent: input
- mm: 
    :type: integer
    :intent: input
- m: 
    :type: integer
    :intent: output
- work: 
    :type: doublecomplex
    :intent: workspace
    :dims: 
    - 2*n
- rwork: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZTREVC( SIDE, HOWMNY, SELECT, N, T, LDT, VL, LDVL, VR, LDVR, MM, M, WORK, RWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZTREVC computes some or all of the right and/or left eigenvectors of\n\
  *  a complex upper triangular matrix T.\n\
  *  Matrices of this type are produced by the Schur factorization of\n\
  *  a complex general matrix:  A = Q*T*Q**H, as computed by ZHSEQR.\n\
  *  \n\
  *  The right eigenvector x and the left eigenvector y of T corresponding\n\
  *  to an eigenvalue w are defined by:\n\
  *  \n\
  *               T*x = w*x,     (y**H)*T = w*(y**H)\n\
  *  \n\
  *  where y**H denotes the conjugate transpose of the vector y.\n\
  *  The eigenvalues are not input to this routine, but are read directly\n\
  *  from the diagonal of T.\n\
  *  \n\
  *  This routine returns the matrices X and/or Y of right and left\n\
  *  eigenvectors of T, or the products Q*X and/or Q*Y, where Q is an\n\
  *  input matrix.  If Q is the unitary factor that reduces a matrix A to\n\
  *  Schur form T, then Q*X and Q*Y are the matrices of right and left\n\
  *  eigenvectors of A.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  SIDE    (input) CHARACTER*1\n\
  *          = 'R':  compute right eigenvectors only;\n\
  *          = 'L':  compute left eigenvectors only;\n\
  *          = 'B':  compute both right and left eigenvectors.\n\
  *\n\
  *  HOWMNY  (input) CHARACTER*1\n\
  *          = 'A':  compute all right and/or left eigenvectors;\n\
  *          = 'B':  compute all right and/or left eigenvectors,\n\
  *                  backtransformed using the matrices supplied in\n\
  *                  VR and/or VL;\n\
  *          = 'S':  compute selected right and/or left eigenvectors,\n\
  *                  as indicated by the logical array SELECT.\n\
  *\n\
  *  SELECT  (input) LOGICAL array, dimension (N)\n\
  *          If HOWMNY = 'S', SELECT specifies the eigenvectors to be\n\
  *          computed.\n\
  *          The eigenvector corresponding to the j-th eigenvalue is\n\
  *          computed if SELECT(j) = .TRUE..\n\
  *          Not referenced if HOWMNY = 'A' or 'B'.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix T. N >= 0.\n\
  *\n\
  *  T       (input/output) COMPLEX*16 array, dimension (LDT,N)\n\
  *          The upper triangular matrix T.  T is modified, but restored\n\
  *          on exit.\n\
  *\n\
  *  LDT     (input) INTEGER\n\
  *          The leading dimension of the array T. LDT >= max(1,N).\n\
  *\n\
  *  VL      (input/output) COMPLEX*16 array, dimension (LDVL,MM)\n\
  *          On entry, if SIDE = 'L' or 'B' and HOWMNY = 'B', VL must\n\
  *          contain an N-by-N matrix Q (usually the unitary matrix Q of\n\
  *          Schur vectors returned by ZHSEQR).\n\
  *          On exit, if SIDE = 'L' or 'B', VL contains:\n\
  *          if HOWMNY = 'A', the matrix Y of left eigenvectors of T;\n\
  *          if HOWMNY = 'B', the matrix Q*Y;\n\
  *          if HOWMNY = 'S', the left eigenvectors of T specified by\n\
  *                           SELECT, stored consecutively in the columns\n\
  *                           of VL, in the same order as their\n\
  *                           eigenvalues.\n\
  *          Not referenced if SIDE = 'R'.\n\
  *\n\
  *  LDVL    (input) INTEGER\n\
  *          The leading dimension of the array VL.  LDVL >= 1, and if\n\
  *          SIDE = 'L' or 'B', LDVL >= N.\n\
  *\n\
  *  VR      (input/output) COMPLEX*16 array, dimension (LDVR,MM)\n\
  *          On entry, if SIDE = 'R' or 'B' and HOWMNY = 'B', VR must\n\
  *          contain an N-by-N matrix Q (usually the unitary matrix Q of\n\
  *          Schur vectors returned by ZHSEQR).\n\
  *          On exit, if SIDE = 'R' or 'B', VR contains:\n\
  *          if HOWMNY = 'A', the matrix X of right eigenvectors of T;\n\
  *          if HOWMNY = 'B', the matrix Q*X;\n\
  *          if HOWMNY = 'S', the right eigenvectors of T specified by\n\
  *                           SELECT, stored consecutively in the columns\n\
  *                           of VR, in the same order as their\n\
  *                           eigenvalues.\n\
  *          Not referenced if SIDE = 'L'.\n\
  *\n\
  *  LDVR    (input) INTEGER\n\
  *          The leading dimension of the array VR.  LDVR >= 1, and if\n\
  *          SIDE = 'R' or 'B'; LDVR >= N.\n\
  *\n\
  *  MM      (input) INTEGER\n\
  *          The number of columns in the arrays VL and/or VR. MM >= M.\n\
  *\n\
  *  M       (output) INTEGER\n\
  *          The number of columns in the arrays VL and/or VR actually\n\
  *          used to store the eigenvectors.  If HOWMNY = 'A' or 'B', M\n\
  *          is set to N.  Each selected eigenvector occupies one\n\
  *          column.\n\
  *\n\
  *  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n\
  *\n\
  *  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  The algorithm used in this program is basically backward (forward)\n\
  *  substitution, with scaling to make the the code robust against\n\
  *  possible overflow.\n\
  *\n\
  *  Each eigenvector is normalized so that the element of largest\n\
  *  magnitude has magnitude 1; here the magnitude of a complex number\n\
  *  (x,y) is taken to be |x| + |y|.\n\
  *\n\
  *  =====================================================================\n\
  *\n"
