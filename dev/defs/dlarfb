--- 
:name: dlarfb
:md5sum: a20fc3a5ff2f6f880a322c5402f64de1
:category: :subroutine
:arguments: 
- side: 
    :type: char
    :intent: input
- trans: 
    :type: char
    :intent: input
- direct: 
    :type: char
    :intent: input
- storev: 
    :type: char
    :intent: input
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- k: 
    :type: integer
    :intent: input
- v: 
    :type: doublereal
    :intent: input
    :dims: 
    - ldv
    - k
- ldv: 
    :type: integer
    :intent: input
- t: 
    :type: doublereal
    :intent: input
    :dims: 
    - ldt
    - k
- ldt: 
    :type: integer
    :intent: input
- c: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - ldc
    - n
- ldc: 
    :type: integer
    :intent: input
- work: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - ldwork
    - k
- ldwork: 
    :type: integer
    :intent: input
:substitutions: 
  ldwork: "MAX(1,n) ? side = 'l' : MAX(1,m) ? side = 'r' : 0"
:fortran_help: "      SUBROUTINE DLARFB( SIDE, TRANS, DIRECT, STOREV, M, N, K, V, LDV, T, LDT, C, LDC, WORK, LDWORK )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DLARFB applies a real block reflector H or its transpose H' to a\n\
  *  real m by n matrix C, from either the left or the right.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  SIDE    (input) CHARACTER*1\n\
  *          = 'L': apply H or H' from the Left\n\
  *          = 'R': apply H or H' from the Right\n\
  *\n\
  *  TRANS   (input) CHARACTER*1\n\
  *          = 'N': apply H (No transpose)\n\
  *          = 'T': apply H' (Transpose)\n\
  *\n\
  *  DIRECT  (input) CHARACTER*1\n\
  *          Indicates how H is formed from a product of elementary\n\
  *          reflectors\n\
  *          = 'F': H = H(1) H(2) . . . H(k) (Forward)\n\
  *          = 'B': H = H(k) . . . H(2) H(1) (Backward)\n\
  *\n\
  *  STOREV  (input) CHARACTER*1\n\
  *          Indicates how the vectors which define the elementary\n\
  *          reflectors are stored:\n\
  *          = 'C': Columnwise\n\
  *          = 'R': Rowwise\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The number of rows of the matrix C.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of columns of the matrix C.\n\
  *\n\
  *  K       (input) INTEGER\n\
  *          The order of the matrix T (= the number of elementary\n\
  *          reflectors whose product defines the block reflector).\n\
  *\n\
  *  V       (input) DOUBLE PRECISION array, dimension\n\
  *                                (LDV,K) if STOREV = 'C'\n\
  *                                (LDV,M) if STOREV = 'R' and SIDE = 'L'\n\
  *                                (LDV,N) if STOREV = 'R' and SIDE = 'R'\n\
  *          The matrix V. See further details.\n\
  *\n\
  *  LDV     (input) INTEGER\n\
  *          The leading dimension of the array V.\n\
  *          If STOREV = 'C' and SIDE = 'L', LDV >= max(1,M);\n\
  *          if STOREV = 'C' and SIDE = 'R', LDV >= max(1,N);\n\
  *          if STOREV = 'R', LDV >= K.\n\
  *\n\
  *  T       (input) DOUBLE PRECISION array, dimension (LDT,K)\n\
  *          The triangular k by k matrix T in the representation of the\n\
  *          block reflector.\n\
  *\n\
  *  LDT     (input) INTEGER\n\
  *          The leading dimension of the array T. LDT >= K.\n\
  *\n\
  *  C       (input/output) DOUBLE PRECISION array, dimension (LDC,N)\n\
  *          On entry, the m by n matrix C.\n\
  *          On exit, C is overwritten by H*C or H'*C or C*H or C*H'.\n\
  *\n\
  *  LDC     (input) INTEGER\n\
  *          The leading dimension of the array C. LDA >= max(1,M).\n\
  *\n\
  *  WORK    (workspace) DOUBLE PRECISION array, dimension (LDWORK,K)\n\
  *\n\
  *  LDWORK  (input) INTEGER\n\
  *          The leading dimension of the array WORK.\n\
  *          If SIDE = 'L', LDWORK >= max(1,N);\n\
  *          if SIDE = 'R', LDWORK >= max(1,M).\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
