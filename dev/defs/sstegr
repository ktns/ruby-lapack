--- 
:name: sstegr
:md5sum: 992b1604b86ed979e0de63b7c057e36b
:category: :subroutine
:arguments: 
- jobz: 
    :type: char
    :intent: input
- range: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- d: 
    :type: real
    :intent: input/output
    :dims: 
    - n
- e: 
    :type: real
    :intent: input/output
    :dims: 
    - n
- vl: 
    :type: real
    :intent: input
- vu: 
    :type: real
    :intent: input
- il: 
    :type: integer
    :intent: input
- iu: 
    :type: integer
    :intent: input
- abstol: 
    :type: real
    :intent: input
- m: 
    :type: integer
    :intent: output
- w: 
    :type: real
    :intent: output
    :dims: 
    - n
- z: 
    :type: real
    :intent: output
    :dims: 
    - ldz
    - MAX(1,m)
- ldz: 
    :type: integer
    :intent: input
- isuppz: 
    :type: integer
    :intent: output
    :dims: 
    - 2*MAX(1,m)
- work: 
    :type: real
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "lsame_(&jobz,\"V\") ? 18*n : lsame_(&jobz,\"N\") ? 12*n : 0"
- iwork: 
    :type: integer
    :intent: output
    :dims: 
    - MAX(1,liwork)
- liwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "lsame_(&jobz,\"V\") ? 10*n : lsame_(&jobz,\"N\") ? 8*n : 0"
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldz: "lsame_(&jobz,\"V\") ? MAX(1,n) : 1"
  m: "lsame_(&range,\"A\") ? n : lsame_(&range,\"I\") ? iu-il+1 : 0"
:fortran_help: "      SUBROUTINE SSTEGR( JOBZ, RANGE, N, D, E, VL, VU, IL, IU, ABSTOL, M, W, Z, LDZ, ISUPPZ, WORK, LWORK, IWORK, LIWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  SSTEGR computes selected eigenvalues and, optionally, eigenvectors\n\
  *  of a real symmetric tridiagonal matrix T. Any such unreduced matrix has\n\
  *  a well defined set of pairwise different real eigenvalues, the corresponding\n\
  *  real eigenvectors are pairwise orthogonal.\n\
  *\n\
  *  The spectrum may be computed either completely or partially by specifying\n\
  *  either an interval (VL,VU] or a range of indices IL:IU for the desired\n\
  *  eigenvalues.\n\
  *\n\
  *  SSTEGR is a compatability wrapper around the improved SSTEMR routine.\n\
  *  See SSTEMR for further details.\n\
  *\n\
  *  One important change is that the ABSTOL parameter no longer provides any\n\
  *  benefit and hence is no longer used.\n\
  *\n\
  *  Note : SSTEGR and SSTEMR work only on machines which follow\n\
  *  IEEE-754 floating-point standard in their handling of infinities and\n\
  *  NaNs.  Normal execution may create these exceptiona values and hence\n\
  *  may abort due to a floating point exception in environments which\n\
  *  do not conform to the IEEE-754 standard.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  JOBZ    (input) CHARACTER*1\n\
  *          = 'N':  Compute eigenvalues only;\n\
  *          = 'V':  Compute eigenvalues and eigenvectors.\n\
  *\n\
  *  RANGE   (input) CHARACTER*1\n\
  *          = 'A': all eigenvalues will be found.\n\
  *          = 'V': all eigenvalues in the half-open interval (VL,VU]\n\
  *                 will be found.\n\
  *          = 'I': the IL-th through IU-th eigenvalues will be found.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix.  N >= 0.\n\
  *\n\
  *  D       (input/output) REAL array, dimension (N)\n\
  *          On entry, the N diagonal elements of the tridiagonal matrix\n\
  *          T. On exit, D is overwritten.\n\
  *\n\
  *  E       (input/output) REAL array, dimension (N)\n\
  *          On entry, the (N-1) subdiagonal elements of the tridiagonal\n\
  *          matrix T in elements 1 to N-1 of E. E(N) need not be set on\n\
  *          input, but is used internally as workspace.\n\
  *          On exit, E is overwritten.\n\
  *\n\
  *  VL      (input) REAL\n\
  *  VU      (input) REAL\n\
  *          If RANGE='V', the lower and upper bounds of the interval to\n\
  *          be searched for eigenvalues. VL < VU.\n\
  *          Not referenced if RANGE = 'A' or 'I'.\n\
  *\n\
  *  IL      (input) INTEGER\n\
  *  IU      (input) INTEGER\n\
  *          If RANGE='I', the indices (in ascending order) of the\n\
  *          smallest and largest eigenvalues to be returned.\n\
  *          1 <= IL <= IU <= N, if N > 0.\n\
  *          Not referenced if RANGE = 'A' or 'V'.\n\
  *\n\
  *  ABSTOL  (input) REAL\n\
  *          Unused.  Was the absolute error tolerance for the\n\
  *          eigenvalues/eigenvectors in previous versions.\n\
  *\n\
  *  M       (output) INTEGER\n\
  *          The total number of eigenvalues found.  0 <= M <= N.\n\
  *          If RANGE = 'A', M = N, and if RANGE = 'I', M = IU-IL+1.\n\
  *\n\
  *  W       (output) REAL array, dimension (N)\n\
  *          The first M elements contain the selected eigenvalues in\n\
  *          ascending order.\n\
  *\n\
  *  Z       (output) REAL array, dimension (LDZ, max(1,M) )\n\
  *          If JOBZ = 'V', and if INFO = 0, then the first M columns of Z\n\
  *          contain the orthonormal eigenvectors of the matrix T\n\
  *          corresponding to the selected eigenvalues, with the i-th\n\
  *          column of Z holding the eigenvector associated with W(i).\n\
  *          If JOBZ = 'N', then Z is not referenced.\n\
  *          Note: the user must ensure that at least max(1,M) columns are\n\
  *          supplied in the array Z; if RANGE = 'V', the exact value of M\n\
  *          is not known in advance and an upper bound must be used.\n\
  *          Supplying N columns is always safe.\n\
  *\n\
  *  LDZ     (input) INTEGER\n\
  *          The leading dimension of the array Z.  LDZ >= 1, and if\n\
  *          JOBZ = 'V', then LDZ >= max(1,N).\n\
  *\n\
  *  ISUPPZ  (output) INTEGER ARRAY, dimension ( 2*max(1,M) )\n\
  *          The support of the eigenvectors in Z, i.e., the indices\n\
  *          indicating the nonzero elements in Z. The i-th computed eigenvector\n\
  *          is nonzero only in elements ISUPPZ( 2*i-1 ) through\n\
  *          ISUPPZ( 2*i ). This is relevant in the case when the matrix\n\
  *          is split. ISUPPZ is only accessed when JOBZ is 'V' and N > 0.\n\
  *\n\
  *  WORK    (workspace/output) REAL array, dimension (LWORK)\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal\n\
  *          (and minimal) LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK. LWORK >= max(1,18*N)\n\
  *          if JOBZ = 'V', and LWORK >= max(1,12*N) if JOBZ = 'N'.\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  IWORK   (workspace/output) INTEGER array, dimension (LIWORK)\n\
  *          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n\
  *\n\
  *  LIWORK  (input) INTEGER\n\
  *          The dimension of the array IWORK.  LIWORK >= max(1,10*N)\n\
  *          if the eigenvectors are desired, and LIWORK >= max(1,8*N)\n\
  *          if only the eigenvalues are to be computed.\n\
  *          If LIWORK = -1, then a workspace query is assumed; the\n\
  *          routine only calculates the optimal size of the IWORK array,\n\
  *          returns this value as the first entry of the IWORK array, and\n\
  *          no error message related to LIWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          On exit, INFO\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  if INFO = 1X, internal error in SLARRE,\n\
  *                if INFO = 2X, internal error in SLARRV.\n\
  *                Here, the digit X = ABS( IINFO ) < 10, where IINFO is\n\
  *                the nonzero error code returned by SLARRE or\n\
  *                SLARRV, respectively.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Inderjit Dhillon, IBM Almaden, USA\n\
  *     Osni Marques, LBNL/NERSC, USA\n\
  *     Christof Voemel, LBNL/NERSC, USA\n\
  *\n\
  *  =====================================================================\n\
  *\n\
  *     .. Local Scalars ..\n      LOGICAL TRYRAC\n\
  *     ..\n\
  *     .. External Subroutines ..\n      EXTERNAL SSTEMR\n\
  *     ..\n"
