--- 
:name: zpbrfs
:md5sum: 772ad90aaaf5530161b964fe7ede2bfb
:category: :subroutine
:arguments: 
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- kd: 
    :type: integer
    :intent: input
- nrhs: 
    :type: integer
    :intent: input
- ab: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - ldab
    - n
- ldab: 
    :type: integer
    :intent: input
- afb: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - ldafb
    - n
- ldafb: 
    :type: integer
    :intent: input
- b: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - ldb
    - nrhs
- ldb: 
    :type: integer
    :intent: input
- x: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - ldx
    - nrhs
- ldx: 
    :type: integer
    :intent: input
- ferr: 
    :type: doublereal
    :intent: output
    :dims: 
    - nrhs
- berr: 
    :type: doublereal
    :intent: output
    :dims: 
    - nrhs
- work: 
    :type: doublecomplex
    :intent: workspace
    :dims: 
    - 2*n
- rwork: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZPBRFS( UPLO, N, KD, NRHS, AB, LDAB, AFB, LDAFB, B, LDB, X, LDX, FERR, BERR, WORK, RWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZPBRFS improves the computed solution to a system of linear\n\
  *  equations when the coefficient matrix is Hermitian positive definite\n\
  *  and banded, and provides error bounds and backward error estimates\n\
  *  for the solution.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangle of A is stored;\n\
  *          = 'L':  Lower triangle of A is stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  KD      (input) INTEGER\n\
  *          The number of superdiagonals of the matrix A if UPLO = 'U',\n\
  *          or the number of subdiagonals if UPLO = 'L'.  KD >= 0.\n\
  *\n\
  *  NRHS    (input) INTEGER\n\
  *          The number of right hand sides, i.e., the number of columns\n\
  *          of the matrices B and X.  NRHS >= 0.\n\
  *\n\
  *  AB      (input) DOUBLE PRECISION array, dimension (LDAB,N)\n\
  *          The upper or lower triangle of the Hermitian band matrix A,\n\
  *          stored in the first KD+1 rows of the array.  The j-th column\n\
  *          of A is stored in the j-th column of the array AB as follows:\n\
  *          if UPLO = 'U', AB(kd+1+i-j,j) = A(i,j) for max(1,j-kd)<=i<=j;\n\
  *          if UPLO = 'L', AB(1+i-j,j)    = A(i,j) for j<=i<=min(n,j+kd).\n\
  *\n\
  *  LDAB    (input) INTEGER\n\
  *          The leading dimension of the array AB.  LDAB >= KD+1.\n\
  *\n\
  *  AFB     (input) COMPLEX*16 array, dimension (LDAFB,N)\n\
  *          The triangular factor U or L from the Cholesky factorization\n\
  *          A = U**H*U or A = L*L**H of the band matrix A as computed by\n\
  *          ZPBTRF, in the same storage format as A (see AB).\n\
  *\n\
  *  LDAFB   (input) INTEGER\n\
  *          The leading dimension of the array AFB.  LDAFB >= KD+1.\n\
  *\n\
  *  B       (input) COMPLEX*16 array, dimension (LDB,NRHS)\n\
  *          The right hand side matrix B.\n\
  *\n\
  *  LDB     (input) INTEGER\n\
  *          The leading dimension of the array B.  LDB >= max(1,N).\n\
  *\n\
  *  X       (input/output) COMPLEX*16 array, dimension (LDX,NRHS)\n\
  *          On entry, the solution matrix X, as computed by ZPBTRS.\n\
  *          On exit, the improved solution matrix X.\n\
  *\n\
  *  LDX     (input) INTEGER\n\
  *          The leading dimension of the array X.  LDX >= max(1,N).\n\
  *\n\
  *  FERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n\
  *          The estimated forward error bound for each solution vector\n\
  *          X(j) (the j-th column of the solution matrix X).\n\
  *          If XTRUE is the true solution corresponding to X(j), FERR(j)\n\
  *          is an estimated upper bound for the magnitude of the largest\n\
  *          element in (X(j) - XTRUE) divided by the magnitude of the\n\
  *          largest element in X(j).  The estimate is as reliable as\n\
  *          the estimate for RCOND, and is almost always a slight\n\
  *          overestimate of the true error.\n\
  *\n\
  *  BERR    (output) DOUBLE PRECISION array, dimension (NRHS)\n\
  *          The componentwise relative backward error of each solution\n\
  *          vector X(j) (i.e., the smallest relative change in\n\
  *          any element of A or B that makes X(j) an exact solution).\n\
  *\n\
  *  WORK    (workspace) COMPLEX*16 array, dimension (2*N)\n\
  *\n\
  *  RWORK   (workspace) DOUBLE PRECISION array, dimension (N)\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\
  *  Internal Parameters\n\
  *  ===================\n\
  *\n\
  *  ITMAX is the maximum number of steps of iterative refinement.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
