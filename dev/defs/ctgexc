--- 
:name: ctgexc
:md5sum: 28615b111bd89941edff51027b6ac193
:category: :subroutine
:arguments: 
- wantq: 
    :type: logical
    :intent: input
- wantz: 
    :type: logical
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: complex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- b: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldb
    - n
- ldb: 
    :type: integer
    :intent: input
- q: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldz
    - n
- ldq: 
    :type: integer
    :intent: input
- z: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldz
    - n
- ldz: 
    :type: integer
    :intent: input
- ifst: 
    :type: integer
    :intent: input
- ilst: 
    :type: integer
    :intent: input/output
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE CTGEXC( WANTQ, WANTZ, N, A, LDA, B, LDB, Q, LDQ, Z, LDZ, IFST, ILST, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  CTGEXC reorders the generalized Schur decomposition of a complex\n\
  *  matrix pair (A,B), using an unitary equivalence transformation\n\
  *  (A, B) := Q * (A, B) * Z', so that the diagonal block of (A, B) with\n\
  *  row index IFST is moved to row ILST.\n\
  *\n\
  *  (A, B) must be in generalized Schur canonical form, that is, A and\n\
  *  B are both upper triangular.\n\
  *\n\
  *  Optionally, the matrices Q and Z of generalized Schur vectors are\n\
  *  updated.\n\
  *\n\
  *         Q(in) * A(in) * Z(in)' = Q(out) * A(out) * Z(out)'\n\
  *         Q(in) * B(in) * Z(in)' = Q(out) * B(out) * Z(out)'\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  WANTQ   (input) LOGICAL\n\
  *          .TRUE. : update the left transformation matrix Q;\n\
  *          .FALSE.: do not update Q.\n\
  *\n\
  *  WANTZ   (input) LOGICAL\n\
  *          .TRUE. : update the right transformation matrix Z;\n\
  *          .FALSE.: do not update Z.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrices A and B. N >= 0.\n\
  *\n\
  *  A       (input/output) COMPLEX array, dimension (LDA,N)\n\
  *          On entry, the upper triangular matrix A in the pair (A, B).\n\
  *          On exit, the updated matrix A.\n\
  *\n\
  *  LDA     (input)  INTEGER\n\
  *          The leading dimension of the array A. LDA >= max(1,N).\n\
  *\n\
  *  B       (input/output) COMPLEX array, dimension (LDB,N)\n\
  *          On entry, the upper triangular matrix B in the pair (A, B).\n\
  *          On exit, the updated matrix B.\n\
  *\n\
  *  LDB     (input)  INTEGER\n\
  *          The leading dimension of the array B. LDB >= max(1,N).\n\
  *\n\
  *  Q       (input/output) COMPLEX array, dimension (LDZ,N)\n\
  *          On entry, if WANTQ = .TRUE., the unitary matrix Q.\n\
  *          On exit, the updated matrix Q.\n\
  *          If WANTQ = .FALSE., Q is not referenced.\n\
  *\n\
  *  LDQ     (input) INTEGER\n\
  *          The leading dimension of the array Q. LDQ >= 1;\n\
  *          If WANTQ = .TRUE., LDQ >= N.\n\
  *\n\
  *  Z       (input/output) COMPLEX array, dimension (LDZ,N)\n\
  *          On entry, if WANTZ = .TRUE., the unitary matrix Z.\n\
  *          On exit, the updated matrix Z.\n\
  *          If WANTZ = .FALSE., Z is not referenced.\n\
  *\n\
  *  LDZ     (input) INTEGER\n\
  *          The leading dimension of the array Z. LDZ >= 1;\n\
  *          If WANTZ = .TRUE., LDZ >= N.\n\
  *\n\
  *  IFST    (input) INTEGER\n\
  *  ILST    (input/output) INTEGER\n\
  *          Specify the reordering of the diagonal blocks of (A, B).\n\
  *          The block with row index IFST is moved to row ILST, by a\n\
  *          sequence of swapping between adjacent blocks.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *           =0:  Successful exit.\n\
  *           <0:  if INFO = -i, the i-th argument had an illegal value.\n\
  *           =1:  The transformed matrix pair (A, B) would be too far\n\
  *                from generalized Schur form; the problem is ill-\n\
  *                conditioned. (A, B) may have been partially reordered,\n\
  *                and ILST points to the first row of the current\n\
  *                position of the block being moved.\n\
  *\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Bo Kagstrom and Peter Poromaa, Department of Computing Science,\n\
  *     Umea University, S-901 87 Umea, Sweden.\n\
  *\n\
  *  [1] B. Kagstrom; A Direct Method for Reordering Eigenvalues in the\n\
  *      Generalized Real Schur Form of a Regular Matrix Pair (A, B), in\n\
  *      M.S. Moonen et al (eds), Linear Algebra for Large Scale and\n\
  *      Real-Time Applications, Kluwer Academic Publ. 1993, pp 195-218.\n\
  *\n\
  *  [2] B. Kagstrom and P. Poromaa; Computing Eigenspaces with Specified\n\
  *      Eigenvalues of a Regular Matrix Pair (A, B) and Condition\n\
  *      Estimation: Theory, Algorithms and Software, Report\n\
  *      UMINF - 94.04, Department of Computing Science, Umea University,\n\
  *      S-901 87 Umea, Sweden, 1994. Also as LAPACK Working Note 87.\n\
  *      To appear in Numerical Algorithms, 1996.\n\
  *\n\
  *  [3] B. Kagstrom and P. Poromaa, LAPACK-Style Algorithms and Software\n\
  *      for Solving the Generalized Sylvester Equation and Estimating the\n\
  *      Separation between Regular Matrix Pairs, Report UMINF - 93.23,\n\
  *      Department of Computing Science, Umea University, S-901 87 Umea,\n\
  *      Sweden, December 1993, Revised April 1994, Also as LAPACK working\n\
  *      Note 75. To appear in ACM Trans. on Math. Software, Vol 22, No 1,\n\
  *      1996.\n\
  *\n\
  *  =====================================================================\n\
  *\n\
  *     .. Local Scalars ..\n      INTEGER            HERE\n\
  *     ..\n\
  *     .. External Subroutines ..\n      EXTERNAL           CTGEX2, XERBLA\n\
  *     ..\n\
  *     .. Intrinsic Functions ..\n      INTRINSIC          MAX\n\
  *     ..\n"
