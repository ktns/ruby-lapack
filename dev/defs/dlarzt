--- 
:name: dlarzt
:md5sum: 794da30b757b5da1ded2c6c9124f7150
:category: :subroutine
:arguments: 
- direct: 
    :type: char
    :intent: input
- storev: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- k: 
    :type: integer
    :intent: input
- v: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - ldv
    - "lsame_(&storev,\"C\") ? k : lsame_(&storev,\"R\") ? n : 0"
- ldv: 
    :type: integer
    :intent: input
- tau: 
    :type: doublereal
    :intent: input
    :dims: 
    - k
- t: 
    :type: doublereal
    :intent: output
    :dims: 
    - ldt
    - k
- ldt: 
    :type: integer
    :intent: input
:substitutions: 
  ldt: k
:fortran_help: "      SUBROUTINE DLARZT( DIRECT, STOREV, N, K, V, LDV, TAU, T, LDT )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DLARZT forms the triangular factor T of a real block reflector\n\
  *  H of order > n, which is defined as a product of k elementary\n\
  *  reflectors.\n\
  *\n\
  *  If DIRECT = 'F', H = H(1) H(2) . . . H(k) and T is upper triangular;\n\
  *\n\
  *  If DIRECT = 'B', H = H(k) . . . H(2) H(1) and T is lower triangular.\n\
  *\n\
  *  If STOREV = 'C', the vector which defines the elementary reflector\n\
  *  H(i) is stored in the i-th column of the array V, and\n\
  *\n\
  *     H  =  I - V * T * V'\n\
  *\n\
  *  If STOREV = 'R', the vector which defines the elementary reflector\n\
  *  H(i) is stored in the i-th row of the array V, and\n\
  *\n\
  *     H  =  I - V' * T * V\n\
  *\n\
  *  Currently, only STOREV = 'R' and DIRECT = 'B' are supported.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  DIRECT  (input) CHARACTER*1\n\
  *          Specifies the order in which the elementary reflectors are\n\
  *          multiplied to form the block reflector:\n\
  *          = 'F': H = H(1) H(2) . . . H(k) (Forward, not supported yet)\n\
  *          = 'B': H = H(k) . . . H(2) H(1) (Backward)\n\
  *\n\
  *  STOREV  (input) CHARACTER*1\n\
  *          Specifies how the vectors which define the elementary\n\
  *          reflectors are stored (see also Further Details):\n\
  *          = 'C': columnwise                        (not supported yet)\n\
  *          = 'R': rowwise\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the block reflector H. N >= 0.\n\
  *\n\
  *  K       (input) INTEGER\n\
  *          The order of the triangular factor T (= the number of\n\
  *          elementary reflectors). K >= 1.\n\
  *\n\
  *  V       (input/output) DOUBLE PRECISION array, dimension\n\
  *                               (LDV,K) if STOREV = 'C'\n\
  *                               (LDV,N) if STOREV = 'R'\n\
  *          The matrix V. See further details.\n\
  *\n\
  *  LDV     (input) INTEGER\n\
  *          The leading dimension of the array V.\n\
  *          If STOREV = 'C', LDV >= max(1,N); if STOREV = 'R', LDV >= K.\n\
  *\n\
  *  TAU     (input) DOUBLE PRECISION array, dimension (K)\n\
  *          TAU(i) must contain the scalar factor of the elementary\n\
  *          reflector H(i).\n\
  *\n\
  *  T       (output) DOUBLE PRECISION array, dimension (LDT,K)\n\
  *          The k by k triangular factor T of the block reflector.\n\
  *          If DIRECT = 'F', T is upper triangular; if DIRECT = 'B', T is\n\
  *          lower triangular. The rest of the array is not used.\n\
  *\n\
  *  LDT     (input) INTEGER\n\
  *          The leading dimension of the array T. LDT >= K.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *    A. Petitet, Computer Science Dept., Univ. of Tenn., Knoxville, USA\n\
  *\n\
  *  The shape of the matrix V and the storage of the vectors which define\n\
  *  the H(i) is best illustrated by the following example with n = 5 and\n\
  *  k = 3. The elements equal to 1 are not stored; the corresponding\n\
  *  array elements are modified but restored on exit. The rest of the\n\
  *  array is not used.\n\
  *\n\
  *  DIRECT = 'F' and STOREV = 'C':         DIRECT = 'F' and STOREV = 'R':\n\
  *\n\
  *                                              ______V_____\n\
  *         ( v1 v2 v3 )                        /            \\\n\
  *         ( v1 v2 v3 )                      ( v1 v1 v1 v1 v1 . . . . 1 )\n\
  *     V = ( v1 v2 v3 )                      ( v2 v2 v2 v2 v2 . . . 1   )\n\
  *         ( v1 v2 v3 )                      ( v3 v3 v3 v3 v3 . . 1     )\n\
  *         ( v1 v2 v3 )\n\
  *            .  .  .\n\
  *            .  .  .\n\
  *            1  .  .\n\
  *               1  .\n\
  *                  1\n\
  *\n\
  *  DIRECT = 'B' and STOREV = 'C':         DIRECT = 'B' and STOREV = 'R':\n\
  *\n\
  *                                                        ______V_____\n\
  *            1                                          /            \\\n\
  *            .  1                           ( 1 . . . . v1 v1 v1 v1 v1 )\n\
  *            .  .  1                        ( . 1 . . . v2 v2 v2 v2 v2 )\n\
  *            .  .  .                        ( . . 1 . . v3 v3 v3 v3 v3 )\n\
  *            .  .  .\n\
  *         ( v1 v2 v3 )\n\
  *         ( v1 v2 v3 )\n\
  *     V = ( v1 v2 v3 )\n\
  *         ( v1 v2 v3 )\n\
  *         ( v1 v2 v3 )\n\
  *\n\
  *  =====================================================================\n\
  *\n"
