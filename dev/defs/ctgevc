--- 
:name: ctgevc
:md5sum: 34fff5554b8b02ba108f616b7c23fbde
:category: :subroutine
:arguments: 
- side: 
    :type: char
    :intent: input
- howmny: 
    :type: char
    :intent: input
- select: 
    :type: logical
    :intent: input
    :dims: 
    - n
- n: 
    :type: integer
    :intent: input
- s: 
    :type: complex
    :intent: input
    :dims: 
    - lds
    - n
- lds: 
    :type: integer
    :intent: input
- p: 
    :type: complex
    :intent: input
    :dims: 
    - ldp
    - n
- ldp: 
    :type: integer
    :intent: input
- vl: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldvl
    - mm
- ldvl: 
    :type: integer
    :intent: input
- vr: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldvr
    - mm
- ldvr: 
    :type: integer
    :intent: input
- mm: 
    :type: integer
    :intent: input
- m: 
    :type: integer
    :intent: output
- work: 
    :type: complex
    :intent: workspace
    :dims: 
    - 2*n
- rwork: 
    :type: real
    :intent: workspace
    :dims: 
    - 2*n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE CTGEVC( SIDE, HOWMNY, SELECT, N, S, LDS, P, LDP, VL, LDVL, VR, LDVR, MM, M, WORK, RWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  CTGEVC computes some or all of the right and/or left eigenvectors of\n\
  *  a pair of complex matrices (S,P), where S and P are upper triangular.\n\
  *  Matrix pairs of this type are produced by the generalized Schur\n\
  *  factorization of a complex matrix pair (A,B):\n\
  *  \n\
  *     A = Q*S*Z**H,  B = Q*P*Z**H\n\
  *  \n\
  *  as computed by CGGHRD + CHGEQZ.\n\
  *  \n\
  *  The right eigenvector x and the left eigenvector y of (S,P)\n\
  *  corresponding to an eigenvalue w are defined by:\n\
  *  \n\
  *     S*x = w*P*x,  (y**H)*S = w*(y**H)*P,\n\
  *  \n\
  *  where y**H denotes the conjugate tranpose of y.\n\
  *  The eigenvalues are not input to this routine, but are computed\n\
  *  directly from the diagonal elements of S and P.\n\
  *  \n\
  *  This routine returns the matrices X and/or Y of right and left\n\
  *  eigenvectors of (S,P), or the products Z*X and/or Q*Y,\n\
  *  where Z and Q are input matrices.\n\
  *  If Q and Z are the unitary factors from the generalized Schur\n\
  *  factorization of a matrix pair (A,B), then Z*X and Q*Y\n\
  *  are the matrices of right and left eigenvectors of (A,B).\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  SIDE    (input) CHARACTER*1\n\
  *          = 'R': compute right eigenvectors only;\n\
  *          = 'L': compute left eigenvectors only;\n\
  *          = 'B': compute both right and left eigenvectors.\n\
  *\n\
  *  HOWMNY  (input) CHARACTER*1\n\
  *          = 'A': compute all right and/or left eigenvectors;\n\
  *          = 'B': compute all right and/or left eigenvectors,\n\
  *                 backtransformed by the matrices in VR and/or VL;\n\
  *          = 'S': compute selected right and/or left eigenvectors,\n\
  *                 specified by the logical array SELECT.\n\
  *\n\
  *  SELECT  (input) LOGICAL array, dimension (N)\n\
  *          If HOWMNY='S', SELECT specifies the eigenvectors to be\n\
  *          computed.  The eigenvector corresponding to the j-th\n\
  *          eigenvalue is computed if SELECT(j) = .TRUE..\n\
  *          Not referenced if HOWMNY = 'A' or 'B'.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrices S and P.  N >= 0.\n\
  *\n\
  *  S       (input) COMPLEX array, dimension (LDS,N)\n\
  *          The upper triangular matrix S from a generalized Schur\n\
  *          factorization, as computed by CHGEQZ.\n\
  *\n\
  *  LDS     (input) INTEGER\n\
  *          The leading dimension of array S.  LDS >= max(1,N).\n\
  *\n\
  *  P       (input) COMPLEX array, dimension (LDP,N)\n\
  *          The upper triangular matrix P from a generalized Schur\n\
  *          factorization, as computed by CHGEQZ.  P must have real\n\
  *          diagonal elements.\n\
  *\n\
  *  LDP     (input) INTEGER\n\
  *          The leading dimension of array P.  LDP >= max(1,N).\n\
  *\n\
  *  VL      (input/output) COMPLEX array, dimension (LDVL,MM)\n\
  *          On entry, if SIDE = 'L' or 'B' and HOWMNY = 'B', VL must\n\
  *          contain an N-by-N matrix Q (usually the unitary matrix Q\n\
  *          of left Schur vectors returned by CHGEQZ).\n\
  *          On exit, if SIDE = 'L' or 'B', VL contains:\n\
  *          if HOWMNY = 'A', the matrix Y of left eigenvectors of (S,P);\n\
  *          if HOWMNY = 'B', the matrix Q*Y;\n\
  *          if HOWMNY = 'S', the left eigenvectors of (S,P) specified by\n\
  *                      SELECT, stored consecutively in the columns of\n\
  *                      VL, in the same order as their eigenvalues.\n\
  *          Not referenced if SIDE = 'R'.\n\
  *\n\
  *  LDVL    (input) INTEGER\n\
  *          The leading dimension of array VL.  LDVL >= 1, and if\n\
  *          SIDE = 'L' or 'l' or 'B' or 'b', LDVL >= N.\n\
  *\n\
  *  VR      (input/output) COMPLEX array, dimension (LDVR,MM)\n\
  *          On entry, if SIDE = 'R' or 'B' and HOWMNY = 'B', VR must\n\
  *          contain an N-by-N matrix Q (usually the unitary matrix Z\n\
  *          of right Schur vectors returned by CHGEQZ).\n\
  *          On exit, if SIDE = 'R' or 'B', VR contains:\n\
  *          if HOWMNY = 'A', the matrix X of right eigenvectors of (S,P);\n\
  *          if HOWMNY = 'B', the matrix Z*X;\n\
  *          if HOWMNY = 'S', the right eigenvectors of (S,P) specified by\n\
  *                      SELECT, stored consecutively in the columns of\n\
  *                      VR, in the same order as their eigenvalues.\n\
  *          Not referenced if SIDE = 'L'.\n\
  *\n\
  *  LDVR    (input) INTEGER\n\
  *          The leading dimension of the array VR.  LDVR >= 1, and if\n\
  *          SIDE = 'R' or 'B', LDVR >= N.\n\
  *\n\
  *  MM      (input) INTEGER\n\
  *          The number of columns in the arrays VL and/or VR. MM >= M.\n\
  *\n\
  *  M       (output) INTEGER\n\
  *          The number of columns in the arrays VL and/or VR actually\n\
  *          used to store the eigenvectors.  If HOWMNY = 'A' or 'B', M\n\
  *          is set to N.  Each selected eigenvector occupies one column.\n\
  *\n\
  *  WORK    (workspace) COMPLEX array, dimension (2*N)\n\
  *\n\
  *  RWORK   (workspace) REAL array, dimension (2*N)\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit.\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
