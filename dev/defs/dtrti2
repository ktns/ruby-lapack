--- 
:name: dtrti2
:md5sum: 79f9cf1a3356f3c9b6db28e00f2a9527
:category: :subroutine
:arguments: 
- uplo: 
    :type: char
    :intent: input
- diag: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE DTRTI2( UPLO, DIAG, N, A, LDA, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DTRTI2 computes the inverse of a real upper or lower triangular\n\
  *  matrix.\n\
  *\n\
  *  This is the Level 2 BLAS version of the algorithm.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          Specifies whether the matrix A is upper or lower triangular.\n\
  *          = 'U':  Upper triangular\n\
  *          = 'L':  Lower triangular\n\
  *\n\
  *  DIAG    (input) CHARACTER*1\n\
  *          Specifies whether or not the matrix A is unit triangular.\n\
  *          = 'N':  Non-unit triangular\n\
  *          = 'U':  Unit triangular\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n\
  *          On entry, the triangular matrix A.  If UPLO = 'U', the\n\
  *          leading n by n upper triangular part of the array A contains\n\
  *          the upper triangular matrix, and the strictly lower\n\
  *          triangular part of A is not referenced.  If UPLO = 'L', the\n\
  *          leading n by n lower triangular part of the array A contains\n\
  *          the lower triangular matrix, and the strictly upper\n\
  *          triangular part of A is not referenced.  If DIAG = 'U', the\n\
  *          diagonal elements of A are also not referenced and are\n\
  *          assumed to be 1.\n\
  *\n\
  *          On exit, the (triangular) inverse of the original matrix, in\n\
  *          the same storage format.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0: successful exit\n\
  *          < 0: if INFO = -k, the k-th argument had an illegal value\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
