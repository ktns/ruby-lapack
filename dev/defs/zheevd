--- 
:name: zheevd
:md5sum: cfb4c97c52c4714d3a44874ba9810d89
:category: :subroutine
:arguments: 
- jobz: 
    :type: char
    :intent: input
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- w: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- work: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "n<=1 ? 1 : lsame_(&jobz,\"N\") ? n+1 : lsame_(&jobz,\"V\") ? 2*n+n*n : 0"
- rwork: 
    :type: doublereal
    :intent: output
    :dims: 
    - MAX(1,lrwork)
- lrwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "n<=1 ? 1 : lsame_(&jobz,\"N\") ? n+1 : lsame_(&jobz,\"V\") ? 1+5*n+2*n*n : 0"
- iwork: 
    :type: integer
    :intent: output
    :dims: 
    - MAX(1,liwork)
- liwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "n<=1 ? 1 : lsame_(&jobz,\"N\") ? 1 : lsame_(&jobz,\"V\") ? 3+5*n : 0"
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZHEEVD( JOBZ, UPLO, N, A, LDA, W, WORK, LWORK, RWORK, LRWORK, IWORK, LIWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZHEEVD computes all eigenvalues and, optionally, eigenvectors of a\n\
  *  complex Hermitian matrix A.  If eigenvectors are desired, it uses a\n\
  *  divide and conquer algorithm.\n\
  *\n\
  *  The divide and conquer algorithm makes very mild assumptions about\n\
  *  floating point arithmetic. It will work on machines with a guard\n\
  *  digit in add/subtract, or on those binary machines without guard\n\
  *  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n\
  *  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n\
  *  without guard digits, but we know of none.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  JOBZ    (input) CHARACTER*1\n\
  *          = 'N':  Compute eigenvalues only;\n\
  *          = 'V':  Compute eigenvalues and eigenvectors.\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangle of A is stored;\n\
  *          = 'L':  Lower triangle of A is stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  A       (input/output) COMPLEX*16 array, dimension (LDA, N)\n\
  *          On entry, the Hermitian matrix A.  If UPLO = 'U', the\n\
  *          leading N-by-N upper triangular part of A contains the\n\
  *          upper triangular part of the matrix A.  If UPLO = 'L',\n\
  *          the leading N-by-N lower triangular part of A contains\n\
  *          the lower triangular part of the matrix A.\n\
  *          On exit, if JOBZ = 'V', then if INFO = 0, A contains the\n\
  *          orthonormal eigenvectors of the matrix A.\n\
  *          If JOBZ = 'N', then on exit the lower triangle (if UPLO='L')\n\
  *          or the upper triangle (if UPLO='U') of A, including the\n\
  *          diagonal, is destroyed.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  W       (output) DOUBLE PRECISION array, dimension (N)\n\
  *          If INFO = 0, the eigenvalues in ascending order.\n\
  *\n\
  *  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The length of the array WORK.\n\
  *          If N <= 1,                LWORK must be at least 1.\n\
  *          If JOBZ  = 'N' and N > 1, LWORK must be at least N + 1.\n\
  *          If JOBZ  = 'V' and N > 1, LWORK must be at least 2*N + N**2.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal sizes of the WORK, RWORK and\n\
  *          IWORK arrays, returns these values as the first entries of\n\
  *          the WORK, RWORK and IWORK arrays, and no error message\n\
  *          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n\
  *\n\
  *  RWORK   (workspace/output) DOUBLE PRECISION array,\n\
  *                                         dimension (LRWORK)\n\
  *          On exit, if INFO = 0, RWORK(1) returns the optimal LRWORK.\n\
  *\n\
  *  LRWORK  (input) INTEGER\n\
  *          The dimension of the array RWORK.\n\
  *          If N <= 1,                LRWORK must be at least 1.\n\
  *          If JOBZ  = 'N' and N > 1, LRWORK must be at least N.\n\
  *          If JOBZ  = 'V' and N > 1, LRWORK must be at least\n\
  *                         1 + 5*N + 2*N**2.\n\
  *\n\
  *          If LRWORK = -1, then a workspace query is assumed; the\n\
  *          routine only calculates the optimal sizes of the WORK, RWORK\n\
  *          and IWORK arrays, returns these values as the first entries\n\
  *          of the WORK, RWORK and IWORK arrays, and no error message\n\
  *          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n\
  *\n\
  *  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n\
  *          On exit, if INFO = 0, IWORK(1) returns the optimal LIWORK.\n\
  *\n\
  *  LIWORK  (input) INTEGER\n\
  *          The dimension of the array IWORK.\n\
  *          If N <= 1,                LIWORK must be at least 1.\n\
  *          If JOBZ  = 'N' and N > 1, LIWORK must be at least 1.\n\
  *          If JOBZ  = 'V' and N > 1, LIWORK must be at least 3 + 5*N.\n\
  *\n\
  *          If LIWORK = -1, then a workspace query is assumed; the\n\
  *          routine only calculates the optimal sizes of the WORK, RWORK\n\
  *          and IWORK arrays, returns these values as the first entries\n\
  *          of the WORK, RWORK and IWORK arrays, and no error message\n\
  *          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  if INFO = i and JOBZ = 'N', then the algorithm failed\n\
  *                to converge; i off-diagonal elements of an intermediate\n\
  *                tridiagonal form did not converge to zero;\n\
  *                if INFO = i and JOBZ = 'V', then the algorithm failed\n\
  *                to compute an eigenvalue while working on the submatrix\n\
  *                lying in rows and columns INFO/(N+1) through\n\
  *                mod(INFO,N+1).\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Jeff Rutter, Computer Science Division, University of California\n\
  *     at Berkeley, USA\n\
  *\n\
  *  Modified description of INFO. Sven, 16 Feb 05.\n\
  *  =====================================================================\n\
  *\n"
