--- 
:name: zhpgvd
:md5sum: e81d6e43ac0f0338388ac1726dcfa821
:category: :subroutine
:arguments: 
- itype: 
    :type: integer
    :intent: input
- jobz: 
    :type: char
    :intent: input
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- ap: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - ldap
- bp: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - n*(n+1)/2
- w: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- z: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - ldz
    - n
- ldz: 
    :type: integer
    :intent: input
- work: 
    :type: doublecomplex
    :intent: workspace
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "n<=1 ? 1 : lsame_(&jobz,\"N\") ? n : lsame_(&jobz,\"V\") ? 2*n : 0"
- rwork: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - MAX(1,lrwork)
- lrwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "n<=1 ? 1 : lsame_(&jobz,\"N\") ? n : lsame_(&jobz,\"V\") ? 1+5*n+2*n*n : 0"
- iwork: 
    :type: integer
    :intent: output
    :dims: 
    - MAX(1,liwork)
- liwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "(lsame_(&jobz,\"N\")||n<=1) ? 1 : lsame_(&jobz,\"V\") ? 3+5*n : 0"
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldz: "lsame_(&jobz,\"V\") ? MAX(1,n) : 1"
  n: ((int)sqrtf(ldap*8+1.0f)-1)/2
:fortran_help: "      SUBROUTINE ZHPGVD( ITYPE, JOBZ, UPLO, N, AP, BP, W, Z, LDZ, WORK, LWORK, RWORK, LRWORK, IWORK, LIWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZHPGVD computes all the eigenvalues and, optionally, the eigenvectors\n\
  *  of a complex generalized Hermitian-definite eigenproblem, of the form\n\
  *  A*x=(lambda)*B*x,  A*Bx=(lambda)*x,  or B*A*x=(lambda)*x.  Here A and\n\
  *  B are assumed to be Hermitian, stored in packed format, and B is also\n\
  *  positive definite.\n\
  *  If eigenvectors are desired, it uses a divide and conquer algorithm.\n\
  *\n\
  *  The divide and conquer algorithm makes very mild assumptions about\n\
  *  floating point arithmetic. It will work on machines with a guard\n\
  *  digit in add/subtract, or on those binary machines without guard\n\
  *  digits which subtract like the Cray X-MP, Cray Y-MP, Cray C-90, or\n\
  *  Cray-2. It could conceivably fail on hexadecimal or decimal machines\n\
  *  without guard digits, but we know of none.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  ITYPE   (input) INTEGER\n\
  *          Specifies the problem type to be solved:\n\
  *          = 1:  A*x = (lambda)*B*x\n\
  *          = 2:  A*B*x = (lambda)*x\n\
  *          = 3:  B*A*x = (lambda)*x\n\
  *\n\
  *  JOBZ    (input) CHARACTER*1\n\
  *          = 'N':  Compute eigenvalues only;\n\
  *          = 'V':  Compute eigenvalues and eigenvectors.\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U':  Upper triangles of A and B are stored;\n\
  *          = 'L':  Lower triangles of A and B are stored.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrices A and B.  N >= 0.\n\
  *\n\
  *  AP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n\
  *          On entry, the upper or lower triangle of the Hermitian matrix\n\
  *          A, packed columnwise in a linear array.  The j-th column of A\n\
  *          is stored in the array AP as follows:\n\
  *          if UPLO = 'U', AP(i + (j-1)*j/2) = A(i,j) for 1<=i<=j;\n\
  *          if UPLO = 'L', AP(i + (j-1)*(2*n-j)/2) = A(i,j) for j<=i<=n.\n\
  *\n\
  *          On exit, the contents of AP are destroyed.\n\
  *\n\
  *  BP      (input/output) COMPLEX*16 array, dimension (N*(N+1)/2)\n\
  *          On entry, the upper or lower triangle of the Hermitian matrix\n\
  *          B, packed columnwise in a linear array.  The j-th column of B\n\
  *          is stored in the array BP as follows:\n\
  *          if UPLO = 'U', BP(i + (j-1)*j/2) = B(i,j) for 1<=i<=j;\n\
  *          if UPLO = 'L', BP(i + (j-1)*(2*n-j)/2) = B(i,j) for j<=i<=n.\n\
  *\n\
  *          On exit, the triangular factor U or L from the Cholesky\n\
  *          factorization B = U**H*U or B = L*L**H, in the same storage\n\
  *          format as B.\n\
  *\n\
  *  W       (output) DOUBLE PRECISION array, dimension (N)\n\
  *          If INFO = 0, the eigenvalues in ascending order.\n\
  *\n\
  *  Z       (output) COMPLEX*16 array, dimension (LDZ, N)\n\
  *          If JOBZ = 'V', then if INFO = 0, Z contains the matrix Z of\n\
  *          eigenvectors.  The eigenvectors are normalized as follows:\n\
  *          if ITYPE = 1 or 2, Z**H*B*Z = I;\n\
  *          if ITYPE = 3, Z**H*inv(B)*Z = I.\n\
  *          If JOBZ = 'N', then Z is not referenced.\n\
  *\n\
  *  LDZ     (input) INTEGER\n\
  *          The leading dimension of the array Z.  LDZ >= 1, and if\n\
  *          JOBZ = 'V', LDZ >= max(1,N).\n\
  *\n\
  *  WORK    (workspace) COMPLEX*16 array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the required LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of array WORK.\n\
  *          If N <= 1,               LWORK >= 1.\n\
  *          If JOBZ = 'N' and N > 1, LWORK >= N.\n\
  *          If JOBZ = 'V' and N > 1, LWORK >= 2*N.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the required sizes of the WORK, RWORK and\n\
  *          IWORK arrays, returns these values as the first entries of\n\
  *          the WORK, RWORK and IWORK arrays, and no error message\n\
  *          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n\
  *\n\
  *  RWORK   (workspace) DOUBLE PRECISION array, dimension (MAX(1,LRWORK))\n\
  *          On exit, if INFO = 0, RWORK(1) returns the required LRWORK.\n\
  *\n\
  *  LRWORK  (input) INTEGER\n\
  *          The dimension of array RWORK.\n\
  *          If N <= 1,               LRWORK >= 1.\n\
  *          If JOBZ = 'N' and N > 1, LRWORK >= N.\n\
  *          If JOBZ = 'V' and N > 1, LRWORK >= 1 + 5*N + 2*N**2.\n\
  *\n\
  *          If LRWORK = -1, then a workspace query is assumed; the\n\
  *          routine only calculates the required sizes of the WORK, RWORK\n\
  *          and IWORK arrays, returns these values as the first entries\n\
  *          of the WORK, RWORK and IWORK arrays, and no error message\n\
  *          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n\
  *\n\
  *  IWORK   (workspace/output) INTEGER array, dimension (MAX(1,LIWORK))\n\
  *          On exit, if INFO = 0, IWORK(1) returns the required LIWORK.\n\
  *\n\
  *  LIWORK  (input) INTEGER\n\
  *          The dimension of array IWORK.\n\
  *          If JOBZ  = 'N' or N <= 1, LIWORK >= 1.\n\
  *          If JOBZ  = 'V' and N > 1, LIWORK >= 3 + 5*N.\n\
  *\n\
  *          If LIWORK = -1, then a workspace query is assumed; the\n\
  *          routine only calculates the required sizes of the WORK, RWORK\n\
  *          and IWORK arrays, returns these values as the first entries\n\
  *          of the WORK, RWORK and IWORK arrays, and no error message\n\
  *          related to LWORK or LRWORK or LIWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0:  ZPPTRF or ZHPEVD returned an error code:\n\
  *             <= N:  if INFO = i, ZHPEVD failed to converge;\n\
  *                    i off-diagonal elements of an intermediate\n\
  *                    tridiagonal form did not convergeto zero;\n\
  *             > N:   if INFO = N + i, for 1 <= i <= n, then the leading\n\
  *                    minor of order i of B is not positive definite.\n\
  *                    The factorization of B could not be completed and\n\
  *                    no eigenvalues or eigenvectors were computed.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Mark Fahey, Department of Mathematics, Univ. of Kentucky, USA\n\
  *\n\
  *  =====================================================================\n\
  *\n\
  *     .. Local Scalars ..\n      LOGICAL            LQUERY, UPPER, WANTZ\n      CHARACTER          TRANS\n      INTEGER            J, LIWMIN, LRWMIN, LWMIN, NEIG\n\
  *     ..\n\
  *     .. External Functions ..\n      LOGICAL            LSAME\n      EXTERNAL           LSAME\n\
  *     ..\n\
  *     .. External Subroutines ..\n      EXTERNAL           XERBLA, ZHPEVD, ZHPGST, ZPPTRF, ZTPMV, ZTPSV\n\
  *     ..\n\
  *     .. Intrinsic Functions ..\n      INTRINSIC          DBLE, MAX\n\
  *     ..\n"
