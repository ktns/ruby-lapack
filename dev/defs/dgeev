--- 
:name: dgeev
:md5sum: aabe3b38aa4ecc1eaef182e801f27ca4
:category: :subroutine
:arguments: 
- jobvl: 
    :type: char
    :intent: input
- jobvr: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- wr: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- wi: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- vl: 
    :type: doublereal
    :intent: output
    :dims: 
    - ldvl
    - n
- ldvl: 
    :type: integer
    :intent: input
- vr: 
    :type: doublereal
    :intent: output
    :dims: 
    - ldvr
    - n
- ldvr: 
    :type: integer
    :intent: input
- work: 
    :type: doublereal
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
    :option: true
    :default: "(lsame_(&jobvl,\"V\")||lsame_(&jobvr,\"V\")) ? 4*n : 3*n"
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldvr: "lsame_(&jobvr,\"V\") ? n : 1"
  ldvl: "lsame_(&jobvl,\"V\") ? n : 1"
:fortran_help: "      SUBROUTINE DGEEV( JOBVL, JOBVR, N, A, LDA, WR, WI, VL, LDVL, VR, LDVR, WORK, LWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DGEEV computes for an N-by-N real nonsymmetric matrix A, the\n\
  *  eigenvalues and, optionally, the left and/or right eigenvectors.\n\
  *\n\
  *  The right eigenvector v(j) of A satisfies\n\
  *                   A * v(j) = lambda(j) * v(j)\n\
  *  where lambda(j) is its eigenvalue.\n\
  *  The left eigenvector u(j) of A satisfies\n\
  *                u(j)**H * A = lambda(j) * u(j)**H\n\
  *  where u(j)**H denotes the conjugate transpose of u(j).\n\
  *\n\
  *  The computed eigenvectors are normalized to have Euclidean norm\n\
  *  equal to 1 and largest component real.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  JOBVL   (input) CHARACTER*1\n\
  *          = 'N': left eigenvectors of A are not computed;\n\
  *          = 'V': left eigenvectors of A are computed.\n\
  *\n\
  *  JOBVR   (input) CHARACTER*1\n\
  *          = 'N': right eigenvectors of A are not computed;\n\
  *          = 'V': right eigenvectors of A are computed.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A. N >= 0.\n\
  *\n\
  *  A       (input/output) DOUBLE PRECISION array, dimension (LDA,N)\n\
  *          On entry, the N-by-N matrix A.\n\
  *          On exit, A has been overwritten.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  WR      (output) DOUBLE PRECISION array, dimension (N)\n\
  *  WI      (output) DOUBLE PRECISION array, dimension (N)\n\
  *          WR and WI contain the real and imaginary parts,\n\
  *          respectively, of the computed eigenvalues.  Complex\n\
  *          conjugate pairs of eigenvalues appear consecutively\n\
  *          with the eigenvalue having the positive imaginary part\n\
  *          first.\n\
  *\n\
  *  VL      (output) DOUBLE PRECISION array, dimension (LDVL,N)\n\
  *          If JOBVL = 'V', the left eigenvectors u(j) are stored one\n\
  *          after another in the columns of VL, in the same order\n\
  *          as their eigenvalues.\n\
  *          If JOBVL = 'N', VL is not referenced.\n\
  *          If the j-th eigenvalue is real, then u(j) = VL(:,j),\n\
  *          the j-th column of VL.\n\
  *          If the j-th and (j+1)-st eigenvalues form a complex\n\
  *          conjugate pair, then u(j) = VL(:,j) + i*VL(:,j+1) and\n\
  *          u(j+1) = VL(:,j) - i*VL(:,j+1).\n\
  *\n\
  *  LDVL    (input) INTEGER\n\
  *          The leading dimension of the array VL.  LDVL >= 1; if\n\
  *          JOBVL = 'V', LDVL >= N.\n\
  *\n\
  *  VR      (output) DOUBLE PRECISION array, dimension (LDVR,N)\n\
  *          If JOBVR = 'V', the right eigenvectors v(j) are stored one\n\
  *          after another in the columns of VR, in the same order\n\
  *          as their eigenvalues.\n\
  *          If JOBVR = 'N', VR is not referenced.\n\
  *          If the j-th eigenvalue is real, then v(j) = VR(:,j),\n\
  *          the j-th column of VR.\n\
  *          If the j-th and (j+1)-st eigenvalues form a complex\n\
  *          conjugate pair, then v(j) = VR(:,j) + i*VR(:,j+1) and\n\
  *          v(j+1) = VR(:,j) - i*VR(:,j+1).\n\
  *\n\
  *  LDVR    (input) INTEGER\n\
  *          The leading dimension of the array VR.  LDVR >= 1; if\n\
  *          JOBVR = 'V', LDVR >= N.\n\
  *\n\
  *  WORK    (workspace/output) DOUBLE PRECISION array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.  LWORK >= max(1,3*N), and\n\
  *          if JOBVL = 'V' or JOBVR = 'V', LWORK >= 4*N.  For good\n\
  *          performance, LWORK must generally be larger.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value.\n\
  *          > 0:  if INFO = i, the QR algorithm failed to compute all the\n\
  *                eigenvalues, and no eigenvectors have been computed;\n\
  *                elements i+1:N of WR and WI contain eigenvalues which\n\
  *                have converged.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
