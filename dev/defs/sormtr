--- 
:name: sormtr
:md5sum: 5c0d297be3b21e4f035a0da2f474fb36
:category: :subroutine
:arguments: 
- side: 
    :type: char
    :intent: input
- uplo: 
    :type: char
    :intent: input
- trans: 
    :type: char
    :intent: input
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: real
    :intent: input
    :dims: 
    - lda
    - m
- lda: 
    :type: integer
    :intent: input
- tau: 
    :type: real
    :intent: input
    :dims: 
    - m-1
- c: 
    :type: real
    :intent: input/output
    :dims: 
    - ldc
    - n
- ldc: 
    :type: integer
    :intent: input
- work: 
    :type: real
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE SORMTR( SIDE, UPLO, TRANS, M, N, A, LDA, TAU, C, LDC, WORK, LWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  SORMTR overwrites the general real M-by-N matrix C with\n\
  *\n\
  *                  SIDE = 'L'     SIDE = 'R'\n\
  *  TRANS = 'N':      Q * C          C * Q\n\
  *  TRANS = 'T':      Q**T * C       C * Q**T\n\
  *\n\
  *  where Q is a real orthogonal matrix of order nq, with nq = m if\n\
  *  SIDE = 'L' and nq = n if SIDE = 'R'. Q is defined as the product of\n\
  *  nq-1 elementary reflectors, as returned by SSYTRD:\n\
  *\n\
  *  if UPLO = 'U', Q = H(nq-1) . . . H(2) H(1);\n\
  *\n\
  *  if UPLO = 'L', Q = H(1) H(2) . . . H(nq-1).\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  SIDE    (input) CHARACTER*1\n\
  *          = 'L': apply Q or Q**T from the Left;\n\
  *          = 'R': apply Q or Q**T from the Right.\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          = 'U': Upper triangle of A contains elementary reflectors\n\
  *                 from SSYTRD;\n\
  *          = 'L': Lower triangle of A contains elementary reflectors\n\
  *                 from SSYTRD.\n\
  *\n\
  *  TRANS   (input) CHARACTER*1\n\
  *          = 'N':  No transpose, apply Q;\n\
  *          = 'T':  Transpose, apply Q**T.\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The number of rows of the matrix C. M >= 0.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of columns of the matrix C. N >= 0.\n\
  *\n\
  *  A       (input) REAL array, dimension\n\
  *                               (LDA,M) if SIDE = 'L'\n\
  *                               (LDA,N) if SIDE = 'R'\n\
  *          The vectors which define the elementary reflectors, as\n\
  *          returned by SSYTRD.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.\n\
  *          LDA >= max(1,M) if SIDE = 'L'; LDA >= max(1,N) if SIDE = 'R'.\n\
  *\n\
  *  TAU     (input) REAL array, dimension\n\
  *                               (M-1) if SIDE = 'L'\n\
  *                               (N-1) if SIDE = 'R'\n\
  *          TAU(i) must contain the scalar factor of the elementary\n\
  *          reflector H(i), as returned by SSYTRD.\n\
  *\n\
  *  C       (input/output) REAL array, dimension (LDC,N)\n\
  *          On entry, the M-by-N matrix C.\n\
  *          On exit, C is overwritten by Q*C or Q**T*C or C*Q**T or C*Q.\n\
  *\n\
  *  LDC     (input) INTEGER\n\
  *          The leading dimension of the array C. LDC >= max(1,M).\n\
  *\n\
  *  WORK    (workspace/output) REAL array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.\n\
  *          If SIDE = 'L', LWORK >= max(1,N);\n\
  *          if SIDE = 'R', LWORK >= max(1,M).\n\
  *          For optimum performance LWORK >= N*NB if SIDE = 'L', and\n\
  *          LWORK >= M*NB if SIDE = 'R', where NB is the optimal\n\
  *          blocksize.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\n\
  *  =====================================================================\n\
  *\n\
  *     .. Local Scalars ..\n      LOGICAL            LEFT, LQUERY, UPPER\n      INTEGER            I1, I2, IINFO, LWKOPT, MI, NI, NB, NQ, NW\n\
  *     ..\n\
  *     .. External Functions ..\n      LOGICAL            LSAME\n      INTEGER            ILAENV\n      EXTERNAL           ILAENV, LSAME\n\
  *     ..\n\
  *     .. External Subroutines ..\n      EXTERNAL           SORMQL, SORMQR, XERBLA\n\
  *     ..\n\
  *     .. Intrinsic Functions ..\n      INTRINSIC          MAX\n\
  *     ..\n"
