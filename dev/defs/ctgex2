--- 
:name: ctgex2
:md5sum: 291e324cd2dab391083a4d6d15ee8c8d
:category: :subroutine
:arguments: 
- wantq: 
    :type: logical
    :intent: input
- wantz: 
    :type: logical
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: complex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- b: 
    :type: complex
    :intent: input/output
    :dims: 
    - ldb
    - n
- ldb: 
    :type: integer
    :intent: input
- q: 
    :type: complex
    :intent: input/output
    :dims: 
    - "wantq ? ldq : 0"
    - "wantq ? n : 0"
- ldq: 
    :type: integer
    :intent: input
- z: 
    :type: complex
    :intent: input/output
    :dims: 
    - "wantq ? ldz : 0"
    - "wantq ? n : 0"
- ldz: 
    :type: integer
    :intent: input
- j1: 
    :type: integer
    :intent: input
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE CTGEX2( WANTQ, WANTZ, N, A, LDA, B, LDB, Q, LDQ, Z, LDZ, J1, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  CTGEX2 swaps adjacent diagonal 1 by 1 blocks (A11,B11) and (A22,B22)\n\
  *  in an upper triangular matrix pair (A, B) by an unitary equivalence\n\
  *  transformation.\n\
  *\n\
  *  (A, B) must be in generalized Schur canonical form, that is, A and\n\
  *  B are both upper triangular.\n\
  *\n\
  *  Optionally, the matrices Q and Z of generalized Schur vectors are\n\
  *  updated.\n\
  *\n\
  *         Q(in) * A(in) * Z(in)' = Q(out) * A(out) * Z(out)'\n\
  *         Q(in) * B(in) * Z(in)' = Q(out) * B(out) * Z(out)'\n\
  *\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  WANTQ   (input) LOGICAL\n\
  *          .TRUE. : update the left transformation matrix Q;\n\
  *          .FALSE.: do not update Q.\n\
  *\n\
  *  WANTZ   (input) LOGICAL\n\
  *          .TRUE. : update the right transformation matrix Z;\n\
  *          .FALSE.: do not update Z.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrices A and B. N >= 0.\n\
  *\n\
  *  A       (input/output) COMPLEX arrays, dimensions (LDA,N)\n\
  *          On entry, the matrix A in the pair (A, B).\n\
  *          On exit, the updated matrix A.\n\
  *\n\
  *  LDA     (input)  INTEGER\n\
  *          The leading dimension of the array A. LDA >= max(1,N).\n\
  *\n\
  *  B       (input/output) COMPLEX arrays, dimensions (LDB,N)\n\
  *          On entry, the matrix B in the pair (A, B).\n\
  *          On exit, the updated matrix B.\n\
  *\n\
  *  LDB     (input)  INTEGER\n\
  *          The leading dimension of the array B. LDB >= max(1,N).\n\
  *\n\
  *  Q       (input/output) COMPLEX array, dimension (LDZ,N)\n\
  *          If WANTQ = .TRUE, on entry, the unitary matrix Q. On exit,\n\
  *          the updated matrix Q.\n\
  *          Not referenced if WANTQ = .FALSE..\n\
  *\n\
  *  LDQ     (input) INTEGER\n\
  *          The leading dimension of the array Q. LDQ >= 1;\n\
  *          If WANTQ = .TRUE., LDQ >= N.\n\
  *\n\
  *  Z       (input/output) COMPLEX array, dimension (LDZ,N)\n\
  *          If WANTZ = .TRUE, on entry, the unitary matrix Z. On exit,\n\
  *          the updated matrix Z.\n\
  *          Not referenced if WANTZ = .FALSE..\n\
  *\n\
  *  LDZ     (input) INTEGER\n\
  *          The leading dimension of the array Z. LDZ >= 1;\n\
  *          If WANTZ = .TRUE., LDZ >= N.\n\
  *\n\
  *  J1      (input) INTEGER\n\
  *          The index to the first block (A11, B11).\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *           =0:  Successful exit.\n\
  *           =1:  The transformed matrix pair (A, B) would be too far\n\
  *                from generalized Schur form; the problem is ill-\n\
  *                conditioned.\n\
  *\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Bo Kagstrom and Peter Poromaa, Department of Computing Science,\n\
  *     Umea University, S-901 87 Umea, Sweden.\n\
  *\n\
  *  In the current code both weak and strong stability tests are\n\
  *  performed. The user can omit the strong stability test by changing\n\
  *  the internal logical parameter WANDS to .FALSE.. See ref. [2] for\n\
  *  details.\n\
  *\n\
  *  [1] B. Kagstrom; A Direct Method for Reordering Eigenvalues in the\n\
  *      Generalized Real Schur Form of a Regular Matrix Pair (A, B), in\n\
  *      M.S. Moonen et al (eds), Linear Algebra for Large Scale and\n\
  *      Real-Time Applications, Kluwer Academic Publ. 1993, pp 195-218.\n\
  *\n\
  *  [2] B. Kagstrom and P. Poromaa; Computing Eigenspaces with Specified\n\
  *      Eigenvalues of a Regular Matrix Pair (A, B) and Condition\n\
  *      Estimation: Theory, Algorithms and Software, Report UMINF-94.04,\n\
  *      Department of Computing Science, Umea University, S-901 87 Umea,\n\
  *      Sweden, 1994. Also as LAPACK Working Note 87. To appear in\n\
  *      Numerical Algorithms, 1996.\n\
  *\n\
  *  =====================================================================\n\
  *\n"
