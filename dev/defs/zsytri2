--- 
:name: zsytri2
:md5sum: 250ab7ce23ae359ab3d198b664d5bf4b
:category: :subroutine
:arguments: 
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- ipiv: 
    :type: integer
    :intent: input
    :dims: 
    - n
- work: 
    :type: doublecomplex
    :intent: workspace
    :dims: 
    - lwork
- lwork: 
    :type: integer
    :intent: input
- info: 
    :type: integer
    :intent: output
:substitutions: 
  c__1: "1"
  c__m1: "-1"
  lwork: (n+nb+1)*(nb+3)
  nb: ilaenv_(&c__1, "ZSYTRF", &uplo, &n, &c__m1, &c__m1, &c__m1)
:extras:
  c__1: integer
  c__m1: integer
  nb: integer
:fortran_help: "      SUBROUTINE ZSYTRI2( UPLO, N, A, LDA, IPIV, WORK, LWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZSYTRI2 computes the inverse of a complex symmetric indefinite matrix\n\
  *  A using the factorization A = U*D*U**T or A = L*D*L**T computed by\n\
  *  ZSYTRF. ZSYTRI2 sets the LEADING DIMENSION of the workspace\n\
  *  before calling ZSYTRI2X that actually computes the inverse.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          Specifies whether the details of the factorization are stored\n\
  *          as an upper or lower triangular matrix.\n\
  *          = 'U':  Upper triangular, form is A = U*D*U**T;\n\
  *          = 'L':  Lower triangular, form is A = L*D*L**T.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  A       (input/output) DOUBLE COMPLEX array, dimension (LDA,N)\n\
  *          On entry, the NB diagonal matrix D and the multipliers\n\
  *          used to obtain the factor U or L as computed by ZSYTRF.\n\
  *\n\
  *          On exit, if INFO = 0, the (symmetric) inverse of the original\n\
  *          matrix.  If UPLO = 'U', the upper triangular part of the\n\
  *          inverse is formed and the part of A below the diagonal is not\n\
  *          referenced; if UPLO = 'L' the lower triangular part of the\n\
  *          inverse is formed and the part of A above the diagonal is\n\
  *          not referenced.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  IPIV    (input) INTEGER array, dimension (N)\n\
  *          Details of the interchanges and the NB structure of D\n\
  *          as determined by ZSYTRF.\n\
  *\n\
  *  WORK    (workspace) DOUBLE COMPLEX array, dimension (N+NB+1)*(NB+3)\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.\n\
  *          WORK is size >= (N+NB+1)*(NB+3)\n\
  *          If LDWORK = -1, then a workspace query is assumed; the routine\n\
  *           calculates:\n\
  *              - the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array,\n\
  *              - and no error message related to LDWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0: successful exit\n\
  *          < 0: if INFO = -i, the i-th argument had an illegal value\n\
  *          > 0: if INFO = i, D(i,i) = 0; the matrix is singular and its\n\
  *               inverse could not be computed.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n\
  *     .. Local Scalars ..\n      LOGICAL            UPPER, LQUERY\n      INTEGER            MINSIZE, NBMAX\n\
  *     ..\n\
  *     .. External Functions ..\n      LOGICAL            LSAME\n      INTEGER            ILAENV\n      EXTERNAL           LSAME, ILAENV\n\
  *     ..\n\
  *     .. External Subroutines ..\n      EXTERNAL           ZSYTRI2X\n\
  *     ..\n"
