--- 
:name: cgbsvxx
:md5sum: 801194546c21b97849616b544a6977ee
:category: :subroutine
:arguments: 
- fact: 
    :type: char
    :intent: input
- trans: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- kl: 
    :type: integer
    :intent: input
- ku: 
    :type: integer
    :intent: input
- nrhs: 
    :type: integer
    :intent: input
- ab: 
    :type: real
    :intent: input/output
    :dims: 
    - ldab
    - n
- ldab: 
    :type: integer
    :intent: input
- afb: 
    :type: real
    :intent: input/output
    :dims: 
    - ldafb
    - n
- ldafb: 
    :type: integer
    :intent: input
- ipiv: 
    :type: integer
    :intent: input/output
    :dims: 
    - n
- equed: 
    :type: char
    :intent: input/output
- r: 
    :type: real
    :intent: input/output
    :dims: 
    - n
- c: 
    :type: real
    :intent: input/output
    :dims: 
    - n
- b: 
    :type: real
    :intent: input/output
    :dims: 
    - ldb
    - nrhs
- ldb: 
    :type: integer
    :intent: input
- x: 
    :type: real
    :intent: output
    :dims: 
    - ldx
    - nrhs
- ldx: 
    :type: integer
    :intent: input
- rcond: 
    :type: real
    :intent: output
- rpvgrw: 
    :type: real
    :intent: output
- berr: 
    :type: real
    :intent: output
    :dims: 
    - nrhs
- n_err_bnds: 
    :type: integer
    :intent: input
- err_bnds_norm: 
    :type: real
    :intent: output
    :dims: 
    - nrhs
    - n_err_bnds
- err_bnds_comp: 
    :type: real
    :intent: output
    :dims: 
    - nrhs
    - n_err_bnds
- nparams: 
    :type: integer
    :intent: input
- params: 
    :type: real
    :intent: input/output
    :dims: []

- work: 
    :type: complex
    :intent: workspace
    :dims: 
    - 2*n
- rwork: 
    :type: real
    :intent: workspace
    :dims: 
    - 2*n
- info: 
    :type: integer
    :intent: output
:substitutions: 
  ldx: MAX(1,n)
:fortran_help: "      SUBROUTINE CGBSVXX( FACT, TRANS, N, KL, KU, NRHS, AB, LDAB, AFB, LDAFB, IPIV, EQUED, R, C, B, LDB, X, LDX, RCOND, RPVGRW, BERR, N_ERR_BNDS, ERR_BNDS_NORM, ERR_BNDS_COMP, NPARAMS, PARAMS, WORK, RWORK, INFO )\n\n\
  *     Purpose\n\
  *     =======\n\
  *\n\
  *     CGBSVXX uses the LU factorization to compute the solution to a\n\
  *     complex system of linear equations  A * X = B,  where A is an\n\
  *     N-by-N matrix and X and B are N-by-NRHS matrices.\n\
  *\n\
  *     If requested, both normwise and maximum componentwise error bounds\n\
  *     are returned. CGBSVXX will return a solution with a tiny\n\
  *     guaranteed error (O(eps) where eps is the working machine\n\
  *     precision) unless the matrix is very ill-conditioned, in which\n\
  *     case a warning is returned. Relevant condition numbers also are\n\
  *     calculated and returned.\n\
  *\n\
  *     CGBSVXX accepts user-provided factorizations and equilibration\n\
  *     factors; see the definitions of the FACT and EQUED options.\n\
  *     Solving with refinement and using a factorization from a previous\n\
  *     CGBSVXX call will also produce a solution with either O(eps)\n\
  *     errors or warnings, but we cannot make that claim for general\n\
  *     user-provided factorizations and equilibration factors if they\n\
  *     differ from what CGBSVXX would itself produce.\n\
  *\n\
  *     Description\n\
  *     ===========\n\
  *\n\
  *     The following steps are performed:\n\
  *\n\
  *     1. If FACT = 'E', real scaling factors are computed to equilibrate\n\
  *     the system:\n\
  *\n\
  *       TRANS = 'N':  diag(R)*A*diag(C)     *inv(diag(C))*X = diag(R)*B\n\
  *       TRANS = 'T': (diag(R)*A*diag(C))**T *inv(diag(R))*X = diag(C)*B\n\
  *       TRANS = 'C': (diag(R)*A*diag(C))**H *inv(diag(R))*X = diag(C)*B\n\
  *\n\
  *     Whether or not the system will be equilibrated depends on the\n\
  *     scaling of the matrix A, but if equilibration is used, A is\n\
  *     overwritten by diag(R)*A*diag(C) and B by diag(R)*B (if TRANS='N')\n\
  *     or diag(C)*B (if TRANS = 'T' or 'C').\n\
  *\n\
  *     2. If FACT = 'N' or 'E', the LU decomposition is used to factor\n\
  *     the matrix A (after equilibration if FACT = 'E') as\n\
  *\n\
  *       A = P * L * U,\n\
  *\n\
  *     where P is a permutation matrix, L is a unit lower triangular\n\
  *     matrix, and U is upper triangular.\n\
  *\n\
  *     3. If some U(i,i)=0, so that U is exactly singular, then the\n\
  *     routine returns with INFO = i. Otherwise, the factored form of A\n\
  *     is used to estimate the condition number of the matrix A (see\n\
  *     argument RCOND). If the reciprocal of the condition number is less\n\
  *     than machine precision, the routine still goes on to solve for X\n\
  *     and compute error bounds as described below.\n\
  *\n\
  *     4. The system of equations is solved for X using the factored form\n\
  *     of A.\n\
  *\n\
  *     5. By default (unless PARAMS(LA_LINRX_ITREF_I) is set to zero),\n\
  *     the routine will use iterative refinement to try to get a small\n\
  *     error and error bounds.  Refinement calculates the residual to at\n\
  *     least twice the working precision.\n\
  *\n\
  *     6. If equilibration was used, the matrix X is premultiplied by\n\
  *     diag(C) (if TRANS = 'N') or diag(R) (if TRANS = 'T' or 'C') so\n\
  *     that it solves the original system before equilibration.\n\
  *\n\n\
  *     Arguments\n\
  *     =========\n\
  *\n\
  *     Some optional parameters are bundled in the PARAMS array.  These\n\
  *     settings determine how refinement is performed, but often the\n\
  *     defaults are acceptable.  If the defaults are acceptable, users\n\
  *     can pass NPARAMS = 0 which prevents the source code from accessing\n\
  *     the PARAMS argument.\n\
  *\n\
  *     FACT    (input) CHARACTER*1\n\
  *     Specifies whether or not the factored form of the matrix A is\n\
  *     supplied on entry, and if not, whether the matrix A should be\n\
  *     equilibrated before it is factored.\n\
  *       = 'F':  On entry, AF and IPIV contain the factored form of A.\n\
  *               If EQUED is not 'N', the matrix A has been\n\
  *               equilibrated with scaling factors given by R and C.\n\
  *               A, AF, and IPIV are not modified.\n\
  *       = 'N':  The matrix A will be copied to AF and factored.\n\
  *       = 'E':  The matrix A will be equilibrated if necessary, then\n\
  *               copied to AF and factored.\n\
  *\n\
  *     TRANS   (input) CHARACTER*1\n\
  *     Specifies the form of the system of equations:\n\
  *       = 'N':  A * X = B     (No transpose)\n\
  *       = 'T':  A**T * X = B  (Transpose)\n\
  *       = 'C':  A**H * X = B  (Conjugate Transpose = Transpose)\n\
  *\n\
  *     N       (input) INTEGER\n\
  *     The number of linear equations, i.e., the order of the\n\
  *     matrix A.  N >= 0.\n\
  *\n\
  *     KL      (input) INTEGER\n\
  *     The number of subdiagonals within the band of A.  KL >= 0.\n\
  *\n\
  *     KU      (input) INTEGER\n\
  *     The number of superdiagonals within the band of A.  KU >= 0.\n\
  *\n\
  *     NRHS    (input) INTEGER\n\
  *     The number of right hand sides, i.e., the number of columns\n\
  *     of the matrices B and X.  NRHS >= 0.\n\
  *\n\
  *     AB      (input/output) REAL array, dimension (LDAB,N)\n\
  *     On entry, the matrix A in band storage, in rows 1 to KL+KU+1.\n\
  *     The j-th column of A is stored in the j-th column of the\n\
  *     array AB as follows:\n\
  *     AB(KU+1+i-j,j) = A(i,j) for max(1,j-KU)<=i<=min(N,j+kl)\n\
  *\n\
  *     If FACT = 'F' and EQUED is not 'N', then AB must have been\n\
  *     equilibrated by the scaling factors in R and/or C.  AB is not\n\
  *     modified if FACT = 'F' or 'N', or if FACT = 'E' and\n\
  *     EQUED = 'N' on exit.\n\
  *\n\
  *     On exit, if EQUED .ne. 'N', A is scaled as follows:\n\
  *     EQUED = 'R':  A := diag(R) * A\n\
  *     EQUED = 'C':  A := A * diag(C)\n\
  *     EQUED = 'B':  A := diag(R) * A * diag(C).\n\
  *\n\
  *     LDAB    (input) INTEGER\n\
  *     The leading dimension of the array AB.  LDAB >= KL+KU+1.\n\
  *\n\
  *     AFB     (input or output) REAL array, dimension (LDAFB,N)\n\
  *     If FACT = 'F', then AFB is an input argument and on entry\n\
  *     contains details of the LU factorization of the band matrix\n\
  *     A, as computed by CGBTRF.  U is stored as an upper triangular\n\
  *     band matrix with KL+KU superdiagonals in rows 1 to KL+KU+1,\n\
  *     and the multipliers used during the factorization are stored\n\
  *     in rows KL+KU+2 to 2*KL+KU+1.  If EQUED .ne. 'N', then AFB is\n\
  *     the factored form of the equilibrated matrix A.\n\
  *\n\
  *     If FACT = 'N', then AF is an output argument and on exit\n\
  *     returns the factors L and U from the factorization A = P*L*U\n\
  *     of the original matrix A.\n\
  *\n\
  *     If FACT = 'E', then AF is an output argument and on exit\n\
  *     returns the factors L and U from the factorization A = P*L*U\n\
  *     of the equilibrated matrix A (see the description of A for\n\
  *     the form of the equilibrated matrix).\n\
  *\n\
  *     LDAFB   (input) INTEGER\n\
  *     The leading dimension of the array AFB.  LDAFB >= 2*KL+KU+1.\n\
  *\n\
  *     IPIV    (input or output) INTEGER array, dimension (N)\n\
  *     If FACT = 'F', then IPIV is an input argument and on entry\n\
  *     contains the pivot indices from the factorization A = P*L*U\n\
  *     as computed by SGETRF; row i of the matrix was interchanged\n\
  *     with row IPIV(i).\n\
  *\n\
  *     If FACT = 'N', then IPIV is an output argument and on exit\n\
  *     contains the pivot indices from the factorization A = P*L*U\n\
  *     of the original matrix A.\n\
  *\n\
  *     If FACT = 'E', then IPIV is an output argument and on exit\n\
  *     contains the pivot indices from the factorization A = P*L*U\n\
  *     of the equilibrated matrix A.\n\
  *\n\
  *     EQUED   (input or output) CHARACTER*1\n\
  *     Specifies the form of equilibration that was done.\n\
  *       = 'N':  No equilibration (always true if FACT = 'N').\n\
  *       = 'R':  Row equilibration, i.e., A has been premultiplied by\n\
  *               diag(R).\n\
  *       = 'C':  Column equilibration, i.e., A has been postmultiplied\n\
  *               by diag(C).\n\
  *       = 'B':  Both row and column equilibration, i.e., A has been\n\
  *               replaced by diag(R) * A * diag(C).\n\
  *     EQUED is an input argument if FACT = 'F'; otherwise, it is an\n\
  *     output argument.\n\
  *\n\
  *     R       (input or output) REAL array, dimension (N)\n\
  *     The row scale factors for A.  If EQUED = 'R' or 'B', A is\n\
  *     multiplied on the left by diag(R); if EQUED = 'N' or 'C', R\n\
  *     is not accessed.  R is an input argument if FACT = 'F';\n\
  *     otherwise, R is an output argument.  If FACT = 'F' and\n\
  *     EQUED = 'R' or 'B', each element of R must be positive.\n\
  *     If R is output, each element of R is a power of the radix.\n\
  *     If R is input, each element of R should be a power of the radix\n\
  *     to ensure a reliable solution and error estimates. Scaling by\n\
  *     powers of the radix does not cause rounding errors unless the\n\
  *     result underflows or overflows. Rounding errors during scaling\n\
  *     lead to refining with a matrix that is not equivalent to the\n\
  *     input matrix, producing error estimates that may not be\n\
  *     reliable.\n\
  *\n\
  *     C       (input or output) REAL array, dimension (N)\n\
  *     The column scale factors for A.  If EQUED = 'C' or 'B', A is\n\
  *     multiplied on the right by diag(C); if EQUED = 'N' or 'R', C\n\
  *     is not accessed.  C is an input argument if FACT = 'F';\n\
  *     otherwise, C is an output argument.  If FACT = 'F' and\n\
  *     EQUED = 'C' or 'B', each element of C must be positive.\n\
  *     If C is output, each element of C is a power of the radix.\n\
  *     If C is input, each element of C should be a power of the radix\n\
  *     to ensure a reliable solution and error estimates. Scaling by\n\
  *     powers of the radix does not cause rounding errors unless the\n\
  *     result underflows or overflows. Rounding errors during scaling\n\
  *     lead to refining with a matrix that is not equivalent to the\n\
  *     input matrix, producing error estimates that may not be\n\
  *     reliable.\n\
  *\n\
  *     B       (input/output) REAL array, dimension (LDB,NRHS)\n\
  *     On entry, the N-by-NRHS right hand side matrix B.\n\
  *     On exit,\n\
  *     if EQUED = 'N', B is not modified;\n\
  *     if TRANS = 'N' and EQUED = 'R' or 'B', B is overwritten by\n\
  *        diag(R)*B;\n\
  *     if TRANS = 'T' or 'C' and EQUED = 'C' or 'B', B is\n\
  *        overwritten by diag(C)*B.\n\
  *\n\
  *     LDB     (input) INTEGER\n\
  *     The leading dimension of the array B.  LDB >= max(1,N).\n\
  *\n\
  *     X       (output) REAL array, dimension (LDX,NRHS)\n\
  *     If INFO = 0, the N-by-NRHS solution matrix X to the original\n\
  *     system of equations.  Note that A and B are modified on exit\n\
  *     if EQUED .ne. 'N', and the solution to the equilibrated system is\n\
  *     inv(diag(C))*X if TRANS = 'N' and EQUED = 'C' or 'B', or\n\
  *     inv(diag(R))*X if TRANS = 'T' or 'C' and EQUED = 'R' or 'B'.\n\
  *\n\
  *     LDX     (input) INTEGER\n\
  *     The leading dimension of the array X.  LDX >= max(1,N).\n\
  *\n\
  *     RCOND   (output) REAL\n\
  *     Reciprocal scaled condition number.  This is an estimate of the\n\
  *     reciprocal Skeel condition number of the matrix A after\n\
  *     equilibration (if done).  If this is less than the machine\n\
  *     precision (in particular, if it is zero), the matrix is singular\n\
  *     to working precision.  Note that the error may still be small even\n\
  *     if this number is very small and the matrix appears ill-\n\
  *     conditioned.\n\
  *\n\
  *     RPVGRW  (output) REAL\n\
  *     Reciprocal pivot growth.  On exit, this contains the reciprocal\n\
  *     pivot growth factor norm(A)/norm(U). The \"max absolute element\"\n\
  *     norm is used.  If this is much less than 1, then the stability of\n\
  *     the LU factorization of the (equilibrated) matrix A could be poor.\n\
  *     This also means that the solution X, estimated condition numbers,\n\
  *     and error bounds could be unreliable. If factorization fails with\n\
  *     0<INFO<=N, then this contains the reciprocal pivot growth factor\n\
  *     for the leading INFO columns of A.  In SGESVX, this quantity is\n\
  *     returned in WORK(1).\n\
  *\n\
  *     BERR    (output) REAL array, dimension (NRHS)\n\
  *     Componentwise relative backward error.  This is the\n\
  *     componentwise relative backward error of each solution vector X(j)\n\
  *     (i.e., the smallest relative change in any element of A or B that\n\
  *     makes X(j) an exact solution).\n\
  *\n\
  *     N_ERR_BNDS (input) INTEGER\n\
  *     Number of error bounds to return for each right hand side\n\
  *     and each type (normwise or componentwise).  See ERR_BNDS_NORM and\n\
  *     ERR_BNDS_COMP below.\n\
  *\n\
  *     ERR_BNDS_NORM  (output) REAL array, dimension (NRHS, N_ERR_BNDS)\n\
  *     For each right-hand side, this array contains information about\n\
  *     various error bounds and condition numbers corresponding to the\n\
  *     normwise relative error, which is defined as follows:\n\
  *\n\
  *     Normwise relative error in the ith solution vector:\n\
  *             max_j (abs(XTRUE(j,i) - X(j,i)))\n\
  *            ------------------------------\n\
  *                  max_j abs(X(j,i))\n\
  *\n\
  *     The array is indexed by the type of error information as described\n\
  *     below. There currently are up to three pieces of information\n\
  *     returned.\n\
  *\n\
  *     The first index in ERR_BNDS_NORM(i,:) corresponds to the ith\n\
  *     right-hand side.\n\
  *\n\
  *     The second index in ERR_BNDS_NORM(:,err) contains the following\n\
  *     three fields:\n\
  *     err = 1 \"Trust/don't trust\" boolean. Trust the answer if the\n\
  *              reciprocal condition number is less than the threshold\n\
  *              sqrt(n) * slamch('Epsilon').\n\
  *\n\
  *     err = 2 \"Guaranteed\" error bound: The estimated forward error,\n\
  *              almost certainly within a factor of 10 of the true error\n\
  *              so long as the next entry is greater than the threshold\n\
  *              sqrt(n) * slamch('Epsilon'). This error bound should only\n\
  *              be trusted if the previous boolean is true.\n\
  *\n\
  *     err = 3  Reciprocal condition number: Estimated normwise\n\
  *              reciprocal condition number.  Compared with the threshold\n\
  *              sqrt(n) * slamch('Epsilon') to determine if the error\n\
  *              estimate is \"guaranteed\". These reciprocal condition\n\
  *              numbers are 1 / (norm(Z^{-1},inf) * norm(Z,inf)) for some\n\
  *              appropriately scaled matrix Z.\n\
  *              Let Z = S*A, where S scales each row by a power of the\n\
  *              radix so all absolute row sums of Z are approximately 1.\n\
  *\n\
  *     See Lapack Working Note 165 for further details and extra\n\
  *     cautions.\n\
  *\n\
  *     ERR_BNDS_COMP  (output) REAL array, dimension (NRHS, N_ERR_BNDS)\n\
  *     For each right-hand side, this array contains information about\n\
  *     various error bounds and condition numbers corresponding to the\n\
  *     componentwise relative error, which is defined as follows:\n\
  *\n\
  *     Componentwise relative error in the ith solution vector:\n\
  *                    abs(XTRUE(j,i) - X(j,i))\n\
  *             max_j ----------------------\n\
  *                         abs(X(j,i))\n\
  *\n\
  *     The array is indexed by the right-hand side i (on which the\n\
  *     componentwise relative error depends), and the type of error\n\
  *     information as described below. There currently are up to three\n\
  *     pieces of information returned for each right-hand side. If\n\
  *     componentwise accuracy is not requested (PARAMS(3) = 0.0), then\n\
  *     ERR_BNDS_COMP is not accessed.  If N_ERR_BNDS .LT. 3, then at most\n\
  *     the first (:,N_ERR_BNDS) entries are returned.\n\
  *\n\
  *     The first index in ERR_BNDS_COMP(i,:) corresponds to the ith\n\
  *     right-hand side.\n\
  *\n\
  *     The second index in ERR_BNDS_COMP(:,err) contains the following\n\
  *     three fields:\n\
  *     err = 1 \"Trust/don't trust\" boolean. Trust the answer if the\n\
  *              reciprocal condition number is less than the threshold\n\
  *              sqrt(n) * slamch('Epsilon').\n\
  *\n\
  *     err = 2 \"Guaranteed\" error bound: The estimated forward error,\n\
  *              almost certainly within a factor of 10 of the true error\n\
  *              so long as the next entry is greater than the threshold\n\
  *              sqrt(n) * slamch('Epsilon'). This error bound should only\n\
  *              be trusted if the previous boolean is true.\n\
  *\n\
  *     err = 3  Reciprocal condition number: Estimated componentwise\n\
  *              reciprocal condition number.  Compared with the threshold\n\
  *              sqrt(n) * slamch('Epsilon') to determine if the error\n\
  *              estimate is \"guaranteed\". These reciprocal condition\n\
  *              numbers are 1 / (norm(Z^{-1},inf) * norm(Z,inf)) for some\n\
  *              appropriately scaled matrix Z.\n\
  *              Let Z = S*(A*diag(x)), where x is the solution for the\n\
  *              current right-hand side and S scales each row of\n\
  *              A*diag(x) by a power of the radix so all absolute row\n\
  *              sums of Z are approximately 1.\n\
  *\n\
  *     See Lapack Working Note 165 for further details and extra\n\
  *     cautions.\n\
  *\n\
  *     NPARAMS (input) INTEGER\n\
  *     Specifies the number of parameters set in PARAMS.  If .LE. 0, the\n\
  *     PARAMS array is never referenced and default values are used.\n\
  *\n\
  *     PARAMS  (input / output) REAL array, dimension NPARAMS\n\
  *     Specifies algorithm parameters.  If an entry is .LT. 0.0, then\n\
  *     that entry will be filled with default value used for that\n\
  *     parameter.  Only positions up to NPARAMS are accessed; defaults\n\
  *     are used for higher-numbered parameters.\n\
  *\n\
  *       PARAMS(LA_LINRX_ITREF_I = 1) : Whether to perform iterative\n\
  *            refinement or not.\n\
  *         Default: 1.0\n\
  *            = 0.0 : No refinement is performed, and no error bounds are\n\
  *                    computed.\n\
  *            = 1.0 : Use the double-precision refinement algorithm,\n\
  *                    possibly with doubled-single computations if the\n\
  *                    compilation environment does not support DOUBLE\n\
  *                    PRECISION.\n\
  *              (other values are reserved for future use)\n\
  *\n\
  *       PARAMS(LA_LINRX_ITHRESH_I = 2) : Maximum number of residual\n\
  *            computations allowed for refinement.\n\
  *         Default: 10\n\
  *         Aggressive: Set to 100 to permit convergence using approximate\n\
  *                     factorizations or factorizations other than LU. If\n\
  *                     the factorization uses a technique other than\n\
  *                     Gaussian elimination, the guarantees in\n\
  *                     err_bnds_norm and err_bnds_comp may no longer be\n\
  *                     trustworthy.\n\
  *\n\
  *       PARAMS(LA_LINRX_CWISE_I = 3) : Flag determining if the code\n\
  *            will attempt to find a solution with small componentwise\n\
  *            relative error in the double-precision algorithm.  Positive\n\
  *            is true, 0.0 is false.\n\
  *         Default: 1.0 (attempt componentwise convergence)\n\
  *\n\
  *     WORK    (workspace) COMPLEX array, dimension (2*N)\n\
  *\n\
  *     RWORK   (workspace) REAL array, dimension (2*N)\n\
  *\n\
  *     INFO    (output) INTEGER\n\
  *       = 0:  Successful exit. The solution to every right-hand side is\n\
  *         guaranteed.\n\
  *       < 0:  If INFO = -i, the i-th argument had an illegal value\n\
  *       > 0 and <= N:  U(INFO,INFO) is exactly zero.  The factorization\n\
  *         has been completed, but the factor U is exactly singular, so\n\
  *         the solution and error bounds could not be computed. RCOND = 0\n\
  *         is returned.\n\
  *       = N+J: The solution corresponding to the Jth right-hand side is\n\
  *         not guaranteed. The solutions corresponding to other right-\n\
  *         hand sides K with K > J may not be guaranteed as well, but\n\
  *         only the first such right-hand side is reported. If a small\n\
  *         componentwise error is not requested (PARAMS(3) = 0.0) then\n\
  *         the Jth right-hand side is the first with a normwise error\n\
  *         bound that is not guaranteed (the smallest J such\n\
  *         that ERR_BNDS_NORM(J,1) = 0.0). By default (PARAMS(3) = 1.0)\n\
  *         the Jth right-hand side is the first with either a normwise or\n\
  *         componentwise error bound that is not guaranteed (the smallest\n\
  *         J such that either ERR_BNDS_NORM(J,1) = 0.0 or\n\
  *         ERR_BNDS_COMP(J,1) = 0.0). See the definition of\n\
  *         ERR_BNDS_NORM(:,1) and ERR_BNDS_COMP(:,1). To get information\n\
  *         about all of the right-hand sides check ERR_BNDS_NORM or\n\
  *         ERR_BNDS_COMP.\n\
  *\n\n\
  *     ==================================================================\n\
  *\n"
