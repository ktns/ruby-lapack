--- 
:name: dlagtm
:md5sum: cc3d3f3d4b1b3e13c85f7cbd11769a05
:category: :subroutine
:arguments: 
- trans: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- nrhs: 
    :type: integer
    :intent: input
- alpha: 
    :type: doublereal
    :intent: input
- dl: 
    :type: doublereal
    :intent: input
    :dims: 
    - n-1
- d: 
    :type: doublereal
    :intent: input
    :dims: 
    - n
- du: 
    :type: doublereal
    :intent: input
    :dims: 
    - n-1
- x: 
    :type: doublereal
    :intent: input
    :dims: 
    - ldx
    - nrhs
- ldx: 
    :type: integer
    :intent: input
- beta: 
    :type: doublereal
    :intent: input
- b: 
    :type: doublereal
    :intent: input/output
    :dims: 
    - ldb
    - nrhs
- ldb: 
    :type: integer
    :intent: input
:substitutions: {}

:fortran_help: "      SUBROUTINE DLAGTM( TRANS, N, NRHS, ALPHA, DL, D, DU, X, LDX, BETA, B, LDB )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  DLAGTM performs a matrix-vector product of the form\n\
  *\n\
  *     B := alpha * A * X + beta * B\n\
  *\n\
  *  where A is a tridiagonal matrix of order N, B and X are N by NRHS\n\
  *  matrices, and alpha and beta are real scalars, each of which may be\n\
  *  0., 1., or -1.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  TRANS   (input) CHARACTER*1\n\
  *          Specifies the operation applied to A.\n\
  *          = 'N':  No transpose, B := alpha * A * X + beta * B\n\
  *          = 'T':  Transpose,    B := alpha * A'* X + beta * B\n\
  *          = 'C':  Conjugate transpose = Transpose\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  NRHS    (input) INTEGER\n\
  *          The number of right hand sides, i.e., the number of columns\n\
  *          of the matrices X and B.\n\
  *\n\
  *  ALPHA   (input) DOUBLE PRECISION\n\
  *          The scalar alpha.  ALPHA must be 0., 1., or -1.; otherwise,\n\
  *          it is assumed to be 0.\n\
  *\n\
  *  DL      (input) DOUBLE PRECISION array, dimension (N-1)\n\
  *          The (n-1) sub-diagonal elements of T.\n\
  *\n\
  *  D       (input) DOUBLE PRECISION array, dimension (N)\n\
  *          The diagonal elements of T.\n\
  *\n\
  *  DU      (input) DOUBLE PRECISION array, dimension (N-1)\n\
  *          The (n-1) super-diagonal elements of T.\n\
  *\n\
  *  X       (input) DOUBLE PRECISION array, dimension (LDX,NRHS)\n\
  *          The N by NRHS matrix X.\n\
  *  LDX     (input) INTEGER\n\
  *          The leading dimension of the array X.  LDX >= max(N,1).\n\
  *\n\
  *  BETA    (input) DOUBLE PRECISION\n\
  *          The scalar beta.  BETA must be 0., 1., or -1.; otherwise,\n\
  *          it is assumed to be 1.\n\
  *\n\
  *  B       (input/output) DOUBLE PRECISION array, dimension (LDB,NRHS)\n\
  *          On entry, the N by NRHS matrix B.\n\
  *          On exit, B is overwritten by the matrix expression\n\
  *          B := alpha * A * X + beta * B.\n\
  *\n\
  *  LDB     (input) INTEGER\n\
  *          The leading dimension of the array B.  LDB >= max(N,1).\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
