--- 
:name: dlasd4
:md5sum: f02b36b4a85646e4e01e1dd6445ec7fe
:category: :subroutine
:arguments: 
- n: 
    :type: integer
    :intent: input
- i: 
    :type: integer
    :intent: input
- d: 
    :type: doublereal
    :intent: input
    :dims: 
    - n
- z: 
    :type: doublereal
    :intent: input
    :dims: 
    - n
- delta: 
    :type: doublereal
    :intent: output
    :dims: 
    - n
- rho: 
    :type: doublereal
    :intent: input
- sigma: 
    :type: doublereal
    :intent: output
- work: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE DLASD4( N, I, D, Z, DELTA, RHO, SIGMA, WORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  This subroutine computes the square root of the I-th updated\n\
  *  eigenvalue of a positive symmetric rank-one modification to\n\
  *  a positive diagonal matrix whose entries are given as the squares\n\
  *  of the corresponding entries in the array d, and that\n\
  *\n\
  *         0 <= D(i) < D(j)  for  i < j\n\
  *\n\
  *  and that RHO > 0. This is arranged by the calling routine, and is\n\
  *  no loss in generality.  The rank-one modified system is thus\n\
  *\n\
  *         diag( D ) * diag( D ) +  RHO *  Z * Z_transpose.\n\
  *\n\
  *  where we assume the Euclidean norm of Z is 1.\n\
  *\n\
  *  The method consists of approximating the rational functions in the\n\
  *  secular equation by simpler interpolating rational functions.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  N      (input) INTEGER\n\
  *         The length of all arrays.\n\
  *\n\
  *  I      (input) INTEGER\n\
  *         The index of the eigenvalue to be computed.  1 <= I <= N.\n\
  *\n\
  *  D      (input) DOUBLE PRECISION array, dimension ( N )\n\
  *         The original eigenvalues.  It is assumed that they are in\n\
  *         order, 0 <= D(I) < D(J)  for I < J.\n\
  *\n\
  *  Z      (input) DOUBLE PRECISION array, dimension ( N )\n\
  *         The components of the updating vector.\n\
  *\n\
  *  DELTA  (output) DOUBLE PRECISION array, dimension ( N )\n\
  *         If N .ne. 1, DELTA contains (D(j) - sigma_I) in its  j-th\n\
  *         component.  If N = 1, then DELTA(1) = 1.  The vector DELTA\n\
  *         contains the information necessary to construct the\n\
  *         (singular) eigenvectors.\n\
  *\n\
  *  RHO    (input) DOUBLE PRECISION\n\
  *         The scalar in the symmetric updating formula.\n\
  *\n\
  *  SIGMA  (output) DOUBLE PRECISION\n\
  *         The computed sigma_I, the I-th updated eigenvalue.\n\
  *\n\
  *  WORK   (workspace) DOUBLE PRECISION array, dimension ( N )\n\
  *         If N .ne. 1, WORK contains (D(j) + sigma_I) in its  j-th\n\
  *         component.  If N = 1, then WORK( 1 ) = 1.\n\
  *\n\
  *  INFO   (output) INTEGER\n\
  *         = 0:  successful exit\n\
  *         > 0:  if INFO = 1, the updating process failed.\n\
  *\n\
  *  Internal Parameters\n\
  *  ===================\n\
  *\n\
  *  Logical variable ORGATI (origin-at-i?) is used for distinguishing\n\
  *  whether D(i) or D(i+1) is treated as the origin.\n\
  *\n\
  *            ORGATI = .true.    origin at i\n\
  *            ORGATI = .false.   origin at i+1\n\
  *\n\
  *  Logical variable SWTCH3 (switch-for-3-poles?) is for noting\n\
  *  if we are working with THREE poles!\n\
  *\n\
  *  MAXIT is the maximum number of iterations allowed for each\n\
  *  eigenvalue.\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *     Ren-Cang Li, Computer Science Division, University of California\n\
  *     at Berkeley, USA\n\
  *\n\
  *  =====================================================================\n\
  *\n"
