--- 
:name: zungbr
:md5sum: 3f925e9eac5d8de52577cb97d814c82a
:category: :subroutine
:arguments: 
- vect: 
    :type: char
    :intent: input
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- k: 
    :type: integer
    :intent: input
- a: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- tau: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - MIN(m,k)
- work: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
    :option: true
    :default: MIN(m,n)
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZUNGBR( VECT, M, N, K, A, LDA, TAU, WORK, LWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZUNGBR generates one of the complex unitary matrices Q or P**H\n\
  *  determined by ZGEBRD when reducing a complex matrix A to bidiagonal\n\
  *  form: A = Q * B * P**H.  Q and P**H are defined as products of\n\
  *  elementary reflectors H(i) or G(i) respectively.\n\
  *\n\
  *  If VECT = 'Q', A is assumed to have been an M-by-K matrix, and Q\n\
  *  is of order M:\n\
  *  if m >= k, Q = H(1) H(2) . . . H(k) and ZUNGBR returns the first n\n\
  *  columns of Q, where m >= n >= k;\n\
  *  if m < k, Q = H(1) H(2) . . . H(m-1) and ZUNGBR returns Q as an\n\
  *  M-by-M matrix.\n\
  *\n\
  *  If VECT = 'P', A is assumed to have been a K-by-N matrix, and P**H\n\
  *  is of order N:\n\
  *  if k < n, P**H = G(k) . . . G(2) G(1) and ZUNGBR returns the first m\n\
  *  rows of P**H, where n >= m >= k;\n\
  *  if k >= n, P**H = G(n-1) . . . G(2) G(1) and ZUNGBR returns P**H as\n\
  *  an N-by-N matrix.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  VECT    (input) CHARACTER*1\n\
  *          Specifies whether the matrix Q or the matrix P**H is\n\
  *          required, as defined in the transformation applied by ZGEBRD:\n\
  *          = 'Q':  generate Q;\n\
  *          = 'P':  generate P**H.\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The number of rows of the matrix Q or P**H to be returned.\n\
  *          M >= 0.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of columns of the matrix Q or P**H to be returned.\n\
  *          N >= 0.\n\
  *          If VECT = 'Q', M >= N >= min(M,K);\n\
  *          if VECT = 'P', N >= M >= min(N,K).\n\
  *\n\
  *  K       (input) INTEGER\n\
  *          If VECT = 'Q', the number of columns in the original M-by-K\n\
  *          matrix reduced by ZGEBRD.\n\
  *          If VECT = 'P', the number of rows in the original K-by-N\n\
  *          matrix reduced by ZGEBRD.\n\
  *          K >= 0.\n\
  *\n\
  *  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n\
  *          On entry, the vectors which define the elementary reflectors,\n\
  *          as returned by ZGEBRD.\n\
  *          On exit, the M-by-N matrix Q or P**H.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A. LDA >= M.\n\
  *\n\
  *  TAU     (input) COMPLEX*16 array, dimension\n\
  *                                (min(M,K)) if VECT = 'Q'\n\
  *                                (min(N,K)) if VECT = 'P'\n\
  *          TAU(i) must contain the scalar factor of the elementary\n\
  *          reflector H(i) or G(i), which determines Q or P**H, as\n\
  *          returned by ZGEBRD in its array argument TAUQ or TAUP.\n\
  *\n\
  *  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK. LWORK >= max(1,min(M,N)).\n\
  *          For optimum performance LWORK >= min(M,N)*NB, where NB\n\
  *          is the optimal blocksize.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
