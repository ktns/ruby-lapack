--- 
:name: zgeqpf
:md5sum: 51fcf5d185ef9463c8789ce9d0d92782
:category: :subroutine
:arguments: 
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- jpvt: 
    :type: integer
    :intent: input/output
    :dims: 
    - n
- tau: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - MIN(m,n)
- work: 
    :type: doublecomplex
    :intent: workspace
    :dims: 
    - n
- rwork: 
    :type: doublereal
    :intent: workspace
    :dims: 
    - 2*n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE ZGEQPF( M, N, A, LDA, JPVT, TAU, WORK, RWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  This routine is deprecated and has been replaced by routine ZGEQP3.\n\
  *\n\
  *  ZGEQPF computes a QR factorization with column pivoting of a\n\
  *  complex M-by-N matrix A: A*P = Q*R.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The number of rows of the matrix A. M >= 0.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of columns of the matrix A. N >= 0\n\
  *\n\
  *  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n\
  *          On entry, the M-by-N matrix A.\n\
  *          On exit, the upper triangle of the array contains the\n\
  *          min(M,N)-by-N upper triangular matrix R; the elements\n\
  *          below the diagonal, together with the array TAU,\n\
  *          represent the unitary matrix Q as a product of\n\
  *          min(m,n) elementary reflectors.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A. LDA >= max(1,M).\n\
  *\n\
  *  JPVT    (input/output) INTEGER array, dimension (N)\n\
  *          On entry, if JPVT(i) .ne. 0, the i-th column of A is permuted\n\
  *          to the front of A*P (a leading column); if JPVT(i) = 0,\n\
  *          the i-th column of A is a free column.\n\
  *          On exit, if JPVT(i) = k, then the i-th column of A*P\n\
  *          was the k-th column of A.\n\
  *\n\
  *  TAU     (output) COMPLEX*16 array, dimension (min(M,N))\n\
  *          The scalar factors of the elementary reflectors.\n\
  *\n\
  *  WORK    (workspace) COMPLEX*16 array, dimension (N)\n\
  *\n\
  *  RWORK   (workspace) DOUBLE PRECISION array, dimension (2*N)\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  The matrix Q is represented as a product of elementary reflectors\n\
  *\n\
  *     Q = H(1) H(2) . . . H(n)\n\
  *\n\
  *  Each H(i) has the form\n\
  *\n\
  *     H = I - tau * v * v'\n\
  *\n\
  *  where tau is a complex scalar, and v is a complex vector with\n\
  *  v(1:i-1) = 0 and v(i) = 1; v(i+1:m) is stored on exit in A(i+1:m,i).\n\
  *\n\
  *  The matrix P is represented in jpvt as follows: If\n\
  *     jpvt(j) = i\n\
  *  then the jth column of P is the ith canonical unit vector.\n\
  *\n\
  *  Partial column norm updating strategy modified by\n\
  *    Z. Drmac and Z. Bujanovic, Dept. of Mathematics,\n\
  *    University of Zagreb, Croatia.\n\
  *     June 2010\n\
  *  For more details see LAPACK Working Note 176.\n\
  *\n\
  *  =====================================================================\n\
  *\n"
