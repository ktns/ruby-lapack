--- 
:name: ztzrzf
:md5sum: 71b51f416a0713c90c0b4492f3d3457b
:category: :subroutine
:arguments: 
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- tau: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - m
- work: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
- info: 
    :type: integer
    :intent: output
:substitutions: 
  m: lda
:fortran_help: "      SUBROUTINE ZTZRZF( M, N, A, LDA, TAU, WORK, LWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  ZTZRZF reduces the M-by-N ( M<=N ) complex upper trapezoidal matrix A\n\
  *  to upper triangular form by means of unitary transformations.\n\
  *\n\
  *  The upper trapezoidal matrix A is factored as\n\
  *\n\
  *     A = ( R  0 ) * Z,\n\
  *\n\
  *  where Z is an N-by-N unitary matrix and R is an M-by-M upper\n\
  *  triangular matrix.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The number of rows of the matrix A.  M >= 0.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of columns of the matrix A.  N >= M.\n\
  *\n\
  *  A       (input/output) COMPLEX*16 array, dimension (LDA,N)\n\
  *          On entry, the leading M-by-N upper trapezoidal part of the\n\
  *          array A must contain the matrix to be factorized.\n\
  *          On exit, the leading M-by-M upper triangular part of A\n\
  *          contains the upper triangular matrix R, and elements M+1 to\n\
  *          N of the first M rows of A, with the array TAU, represent the\n\
  *          unitary matrix Z as a product of M elementary reflectors.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,M).\n\
  *\n\
  *  TAU     (output) COMPLEX*16 array, dimension (M)\n\
  *          The scalar factors of the elementary reflectors.\n\
  *\n\
  *  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.  LWORK >= max(1,M).\n\
  *          For optimum performance LWORK >= M*NB, where NB is\n\
  *          the optimal blocksize.\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\n\
  *  Further Details\n\
  *  ===============\n\
  *\n\
  *  Based on contributions by\n\
  *    A. Petitet, Computer Science Dept., Univ. of Tenn., Knoxville, USA\n\
  *\n\
  *  The factorization is obtained by Householder's method.  The kth\n\
  *  transformation matrix, Z( k ), which is used to introduce zeros into\n\
  *  the ( m - k + 1 )th row of A, is given in the form\n\
  *\n\
  *     Z( k ) = ( I     0   ),\n\
  *              ( 0  T( k ) )\n\
  *\n\
  *  where\n\
  *\n\
  *     T( k ) = I - tau*u( k )*u( k )',   u( k ) = (   1    ),\n\
  *                                                 (   0    )\n\
  *                                                 ( z( k ) )\n\
  *\n\
  *  tau is a scalar and z( k ) is an ( n - m ) element vector.\n\
  *  tau and z( k ) are chosen to annihilate the elements of the kth row\n\
  *  of X.\n\
  *\n\
  *  The scalar tau is returned in the kth element of TAU and the vector\n\
  *  u( k ) in the kth row of A, such that the elements of z( k ) are\n\
  *  in  a( k, m + 1 ), ..., a( k, n ). The elements of R are returned in\n\
  *  the upper triangular part of A.\n\
  *\n\
  *  Z is given by\n\
  *\n\
  *     Z =  Z( 1 ) * Z( 2 ) * ... * Z( m ).\n\
  *\n\
  *  =====================================================================\n\
  *\n"
