--- 
:name: spstrf
:md5sum: 3aace2c5c80392dcbc18630e0ce90642
:category: :subroutine
:arguments: 
- uplo: 
    :type: char
    :intent: input
- n: 
    :type: integer
    :intent: input
- a: 
    :type: real
    :intent: input/output
    :dims: 
    - lda
    - n
- lda: 
    :type: integer
    :intent: input
- piv: 
    :type: integer
    :intent: output
    :dims: 
    - n
- rank: 
    :type: integer
    :intent: output
- tol: 
    :type: real
    :intent: input
- work: 
    :type: real
    :intent: workspace
    :dims: 
    - 2*n
- info: 
    :type: integer
    :intent: output
:substitutions: {}

:fortran_help: "      SUBROUTINE SPSTRF( UPLO, N, A, LDA, PIV, RANK, TOL, WORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  SPSTRF computes the Cholesky factorization with complete\n\
  *  pivoting of a real symmetric positive semidefinite matrix A.\n\
  *\n\
  *  The factorization has the form\n\
  *     P' * A * P = U' * U ,  if UPLO = 'U',\n\
  *     P' * A * P = L  * L',  if UPLO = 'L',\n\
  *  where U is an upper triangular matrix and L is lower triangular, and\n\
  *  P is stored as vector PIV.\n\
  *\n\
  *  This algorithm does not attempt to check that A is positive\n\
  *  semidefinite. This version of the algorithm calls level 3 BLAS.\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  UPLO    (input) CHARACTER*1\n\
  *          Specifies whether the upper or lower triangular part of the\n\
  *          symmetric matrix A is stored.\n\
  *          = 'U':  Upper triangular\n\
  *          = 'L':  Lower triangular\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The order of the matrix A.  N >= 0.\n\
  *\n\
  *  A       (input/output) REAL array, dimension (LDA,N)\n\
  *          On entry, the symmetric matrix A.  If UPLO = 'U', the leading\n\
  *          n by n upper triangular part of A contains the upper\n\
  *          triangular part of the matrix A, and the strictly lower\n\
  *          triangular part of A is not referenced.  If UPLO = 'L', the\n\
  *          leading n by n lower triangular part of A contains the lower\n\
  *          triangular part of the matrix A, and the strictly upper\n\
  *          triangular part of A is not referenced.\n\
  *\n\
  *          On exit, if INFO = 0, the factor U or L from the Cholesky\n\
  *          factorization as above.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.  LDA >= max(1,N).\n\
  *\n\
  *  PIV     (output) INTEGER array, dimension (N)\n\
  *          PIV is such that the nonzero entries are P( PIV(K), K ) = 1.\n\
  *\n\
  *  RANK    (output) INTEGER\n\
  *          The rank of A given by the number of steps the algorithm\n\
  *          completed.\n\
  *\n\
  *  TOL     (input) REAL\n\
  *          User defined tolerance. If TOL < 0, then N*U*MAX( A(K,K) )\n\
  *          will be used. The algorithm terminates at the (K-1)st step\n\
  *          if the pivot <= TOL.\n\
  *\n\
  *  WORK    (workspace) REAL array, dimension (2*N)\n\
  *          Work space.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          < 0: If INFO = -K, the K-th argument had an illegal value,\n\
  *          = 0: algorithm completed successfully, and\n\
  *          > 0: the matrix A is either rank deficient with computed rank\n\
  *               as returned in RANK, or is indefinite.  See Section 7 of\n\
  *               LAPACK Working Note #161 for further information.\n\
  *\n\n\
  *  =====================================================================\n\
  *\n"
