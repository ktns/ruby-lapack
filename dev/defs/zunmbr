--- 
:name: zunmbr
:md5sum: 39e1a87077ff3d4f0239a32149d77cc5
:category: :subroutine
:arguments: 
- vect: 
    :type: char
    :intent: input
- side: 
    :type: char
    :intent: input
- trans: 
    :type: char
    :intent: input
- m: 
    :type: integer
    :intent: input
- n: 
    :type: integer
    :intent: input
- k: 
    :type: integer
    :intent: input
- a: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - lda
    - MIN(nq,k)
- lda: 
    :type: integer
    :intent: input
- tau: 
    :type: doublecomplex
    :intent: input
    :dims: 
    - MIN(nq,k)
- c: 
    :type: doublecomplex
    :intent: input/output
    :dims: 
    - ldc
    - n
- ldc: 
    :type: integer
    :intent: input
- work: 
    :type: doublecomplex
    :intent: output
    :dims: 
    - MAX(1,lwork)
- lwork: 
    :type: integer
    :intent: input
- info: 
    :type: integer
    :intent: output
:substitutions: 
  nq: "lsame_(&side,\"L\") ? m : lsame_(&side,\"R\") ? n : 0"
:fortran_help: "      SUBROUTINE ZUNMBR( VECT, SIDE, TRANS, M, N, K, A, LDA, TAU, C, LDC, WORK, LWORK, INFO )\n\n\
  *  Purpose\n\
  *  =======\n\
  *\n\
  *  If VECT = 'Q', ZUNMBR overwrites the general complex M-by-N matrix C\n\
  *  with\n\
  *                  SIDE = 'L'     SIDE = 'R'\n\
  *  TRANS = 'N':      Q * C          C * Q\n\
  *  TRANS = 'C':      Q**H * C       C * Q**H\n\
  *\n\
  *  If VECT = 'P', ZUNMBR overwrites the general complex M-by-N matrix C\n\
  *  with\n\
  *                  SIDE = 'L'     SIDE = 'R'\n\
  *  TRANS = 'N':      P * C          C * P\n\
  *  TRANS = 'C':      P**H * C       C * P**H\n\
  *\n\
  *  Here Q and P**H are the unitary matrices determined by ZGEBRD when\n\
  *  reducing a complex matrix A to bidiagonal form: A = Q * B * P**H. Q\n\
  *  and P**H are defined as products of elementary reflectors H(i) and\n\
  *  G(i) respectively.\n\
  *\n\
  *  Let nq = m if SIDE = 'L' and nq = n if SIDE = 'R'. Thus nq is the\n\
  *  order of the unitary matrix Q or P**H that is applied.\n\
  *\n\
  *  If VECT = 'Q', A is assumed to have been an NQ-by-K matrix:\n\
  *  if nq >= k, Q = H(1) H(2) . . . H(k);\n\
  *  if nq < k, Q = H(1) H(2) . . . H(nq-1).\n\
  *\n\
  *  If VECT = 'P', A is assumed to have been a K-by-NQ matrix:\n\
  *  if k < nq, P = G(1) G(2) . . . G(k);\n\
  *  if k >= nq, P = G(1) G(2) . . . G(nq-1).\n\
  *\n\n\
  *  Arguments\n\
  *  =========\n\
  *\n\
  *  VECT    (input) CHARACTER*1\n\
  *          = 'Q': apply Q or Q**H;\n\
  *          = 'P': apply P or P**H.\n\
  *\n\
  *  SIDE    (input) CHARACTER*1\n\
  *          = 'L': apply Q, Q**H, P or P**H from the Left;\n\
  *          = 'R': apply Q, Q**H, P or P**H from the Right.\n\
  *\n\
  *  TRANS   (input) CHARACTER*1\n\
  *          = 'N':  No transpose, apply Q or P;\n\
  *          = 'C':  Conjugate transpose, apply Q**H or P**H.\n\
  *\n\
  *  M       (input) INTEGER\n\
  *          The number of rows of the matrix C. M >= 0.\n\
  *\n\
  *  N       (input) INTEGER\n\
  *          The number of columns of the matrix C. N >= 0.\n\
  *\n\
  *  K       (input) INTEGER\n\
  *          If VECT = 'Q', the number of columns in the original\n\
  *          matrix reduced by ZGEBRD.\n\
  *          If VECT = 'P', the number of rows in the original\n\
  *          matrix reduced by ZGEBRD.\n\
  *          K >= 0.\n\
  *\n\
  *  A       (input) COMPLEX*16 array, dimension\n\
  *                                (LDA,min(nq,K)) if VECT = 'Q'\n\
  *                                (LDA,nq)        if VECT = 'P'\n\
  *          The vectors which define the elementary reflectors H(i) and\n\
  *          G(i), whose products determine the matrices Q and P, as\n\
  *          returned by ZGEBRD.\n\
  *\n\
  *  LDA     (input) INTEGER\n\
  *          The leading dimension of the array A.\n\
  *          If VECT = 'Q', LDA >= max(1,nq);\n\
  *          if VECT = 'P', LDA >= max(1,min(nq,K)).\n\
  *\n\
  *  TAU     (input) COMPLEX*16 array, dimension (min(nq,K))\n\
  *          TAU(i) must contain the scalar factor of the elementary\n\
  *          reflector H(i) or G(i) which determines Q or P, as returned\n\
  *          by ZGEBRD in the array argument TAUQ or TAUP.\n\
  *\n\
  *  C       (input/output) COMPLEX*16 array, dimension (LDC,N)\n\
  *          On entry, the M-by-N matrix C.\n\
  *          On exit, C is overwritten by Q*C or Q**H*C or C*Q**H or C*Q\n\
  *          or P*C or P**H*C or C*P or C*P**H.\n\
  *\n\
  *  LDC     (input) INTEGER\n\
  *          The leading dimension of the array C. LDC >= max(1,M).\n\
  *\n\
  *  WORK    (workspace/output) COMPLEX*16 array, dimension (MAX(1,LWORK))\n\
  *          On exit, if INFO = 0, WORK(1) returns the optimal LWORK.\n\
  *\n\
  *  LWORK   (input) INTEGER\n\
  *          The dimension of the array WORK.\n\
  *          If SIDE = 'L', LWORK >= max(1,N);\n\
  *          if SIDE = 'R', LWORK >= max(1,M);\n\
  *          if N = 0 or M = 0, LWORK >= 1.\n\
  *          For optimum performance LWORK >= max(1,N*NB) if SIDE = 'L',\n\
  *          and LWORK >= max(1,M*NB) if SIDE = 'R', where NB is the\n\
  *          optimal blocksize. (NB = 0 if M = 0 or N = 0.)\n\
  *\n\
  *          If LWORK = -1, then a workspace query is assumed; the routine\n\
  *          only calculates the optimal size of the WORK array, returns\n\
  *          this value as the first entry of the WORK array, and no error\n\
  *          message related to LWORK is issued by XERBLA.\n\
  *\n\
  *  INFO    (output) INTEGER\n\
  *          = 0:  successful exit\n\
  *          < 0:  if INFO = -i, the i-th argument had an illegal value\n\
  *\n\n\
  *  =====================================================================\n\
  *\n\
  *     .. Local Scalars ..\n      LOGICAL            APPLYQ, LEFT, LQUERY, NOTRAN\n      CHARACTER          TRANST\n      INTEGER            I1, I2, IINFO, LWKOPT, MI, NB, NI, NQ, NW\n\
  *     ..\n\
  *     .. External Functions ..\n      LOGICAL            LSAME\n      INTEGER            ILAENV\n      EXTERNAL           LSAME, ILAENV\n\
  *     ..\n\
  *     .. External Subroutines ..\n      EXTERNAL           XERBLA, ZUNMLQ, ZUNMQR\n\
  *     ..\n\
  *     .. Intrinsic Functions ..\n      INTRINSIC          MAX, MIN\n\
  *     ..\n"
